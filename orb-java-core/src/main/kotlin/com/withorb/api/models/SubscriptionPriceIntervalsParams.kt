// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.immutableEmptyMap
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.time.OffsetDateTime
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

class SubscriptionPriceIntervalsParams
constructor(
    private val subscriptionId: String,
    private val add: List<Add>?,
    private val addAdjustments: List<AddAdjustment>?,
    private val edit: List<Edit>?,
    private val editAdjustments: List<EditAdjustment>?,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
    private val additionalBodyProperties: Map<String, JsonValue>,
) {

    fun subscriptionId(): String = subscriptionId

    fun add(): Optional<List<Add>> = Optional.ofNullable(add)

    fun addAdjustments(): Optional<List<AddAdjustment>> = Optional.ofNullable(addAdjustments)

    fun edit(): Optional<List<Edit>> = Optional.ofNullable(edit)

    fun editAdjustments(): Optional<List<EditAdjustment>> = Optional.ofNullable(editAdjustments)

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun _additionalBodyProperties(): Map<String, JsonValue> = additionalBodyProperties

    @JvmSynthetic
    internal fun getBody(): SubscriptionPriceIntervalsBody {
        return SubscriptionPriceIntervalsBody(
            add,
            addAdjustments,
            edit,
            editAdjustments,
            additionalBodyProperties,
        )
    }

    @JvmSynthetic internal fun getHeaders(): Headers = additionalHeaders

    @JvmSynthetic internal fun getQueryParams(): QueryParams = additionalQueryParams

    fun getPathParam(index: Int): String {
        return when (index) {
            0 -> subscriptionId
            else -> ""
        }
    }

    @NoAutoDetect
    class SubscriptionPriceIntervalsBody
    @JsonCreator
    internal constructor(
        @JsonProperty("add") private val add: List<Add>?,
        @JsonProperty("add_adjustments") private val addAdjustments: List<AddAdjustment>?,
        @JsonProperty("edit") private val edit: List<Edit>?,
        @JsonProperty("edit_adjustments") private val editAdjustments: List<EditAdjustment>?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** A list of price intervals to add to the subscription. */
        @JsonProperty("add") fun add(): Optional<List<Add>> = Optional.ofNullable(add)

        /** A list of adjustments to add to the subscription. */
        @JsonProperty("add_adjustments")
        fun addAdjustments(): Optional<List<AddAdjustment>> = Optional.ofNullable(addAdjustments)

        /** A list of price intervals to edit on the subscription. */
        @JsonProperty("edit") fun edit(): Optional<List<Edit>> = Optional.ofNullable(edit)

        /** A list of adjustments to edit on the subscription. */
        @JsonProperty("edit_adjustments")
        fun editAdjustments(): Optional<List<EditAdjustment>> = Optional.ofNullable(editAdjustments)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var add: List<Add>? = null
            private var addAdjustments: List<AddAdjustment>? = null
            private var edit: List<Edit>? = null
            private var editAdjustments: List<EditAdjustment>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(subscriptionPriceIntervalsBody: SubscriptionPriceIntervalsBody) =
                apply {
                    add = subscriptionPriceIntervalsBody.add?.toMutableList()
                    addAdjustments = subscriptionPriceIntervalsBody.addAdjustments?.toMutableList()
                    edit = subscriptionPriceIntervalsBody.edit?.toMutableList()
                    editAdjustments =
                        subscriptionPriceIntervalsBody.editAdjustments?.toMutableList()
                    additionalProperties =
                        subscriptionPriceIntervalsBody.additionalProperties.toMutableMap()
                }

            /** A list of price intervals to add to the subscription. */
            fun add(add: List<Add>) = apply { this.add = add }

            /** A list of adjustments to add to the subscription. */
            fun addAdjustments(addAdjustments: List<AddAdjustment>) = apply {
                this.addAdjustments = addAdjustments
            }

            /** A list of price intervals to edit on the subscription. */
            fun edit(edit: List<Edit>) = apply { this.edit = edit }

            /** A list of adjustments to edit on the subscription. */
            fun editAdjustments(editAdjustments: List<EditAdjustment>) = apply {
                this.editAdjustments = editAdjustments
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): SubscriptionPriceIntervalsBody =
                SubscriptionPriceIntervalsBody(
                    add?.toImmutable(),
                    addAdjustments?.toImmutable(),
                    edit?.toImmutable(),
                    editAdjustments?.toImmutable(),
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is SubscriptionPriceIntervalsBody && add == other.add && addAdjustments == other.addAdjustments && edit == other.edit && editAdjustments == other.editAdjustments && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(add, addAdjustments, edit, editAdjustments, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "SubscriptionPriceIntervalsBody{add=$add, addAdjustments=$addAdjustments, edit=$edit, editAdjustments=$editAdjustments, additionalProperties=$additionalProperties}"
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    @NoAutoDetect
    class Builder {

        private var subscriptionId: String? = null
        private var add: MutableList<Add> = mutableListOf()
        private var addAdjustments: MutableList<AddAdjustment> = mutableListOf()
        private var edit: MutableList<Edit> = mutableListOf()
        private var editAdjustments: MutableList<EditAdjustment> = mutableListOf()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()
        private var additionalBodyProperties: MutableMap<String, JsonValue> = mutableMapOf()

        @JvmSynthetic
        internal fun from(subscriptionPriceIntervalsParams: SubscriptionPriceIntervalsParams) =
            apply {
                subscriptionId = subscriptionPriceIntervalsParams.subscriptionId
                add = subscriptionPriceIntervalsParams.add?.toMutableList() ?: mutableListOf()
                addAdjustments =
                    subscriptionPriceIntervalsParams.addAdjustments?.toMutableList()
                        ?: mutableListOf()
                edit = subscriptionPriceIntervalsParams.edit?.toMutableList() ?: mutableListOf()
                editAdjustments =
                    subscriptionPriceIntervalsParams.editAdjustments?.toMutableList()
                        ?: mutableListOf()
                additionalHeaders = subscriptionPriceIntervalsParams.additionalHeaders.toBuilder()
                additionalQueryParams =
                    subscriptionPriceIntervalsParams.additionalQueryParams.toBuilder()
                additionalBodyProperties =
                    subscriptionPriceIntervalsParams.additionalBodyProperties.toMutableMap()
            }

        fun subscriptionId(subscriptionId: String) = apply { this.subscriptionId = subscriptionId }

        /** A list of price intervals to add to the subscription. */
        fun add(add: List<Add>) = apply {
            this.add.clear()
            this.add.addAll(add)
        }

        /** A list of price intervals to add to the subscription. */
        fun addAdd(add: Add) = apply { this.add.add(add) }

        /** A list of adjustments to add to the subscription. */
        fun addAdjustments(addAdjustments: List<AddAdjustment>) = apply {
            this.addAdjustments.clear()
            this.addAdjustments.addAll(addAdjustments)
        }

        /** A list of adjustments to add to the subscription. */
        fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
            this.addAdjustments.add(addAdjustment)
        }

        /** A list of price intervals to edit on the subscription. */
        fun edit(edit: List<Edit>) = apply {
            this.edit.clear()
            this.edit.addAll(edit)
        }

        /** A list of price intervals to edit on the subscription. */
        fun addEdit(edit: Edit) = apply { this.edit.add(edit) }

        /** A list of adjustments to edit on the subscription. */
        fun editAdjustments(editAdjustments: List<EditAdjustment>) = apply {
            this.editAdjustments.clear()
            this.editAdjustments.addAll(editAdjustments)
        }

        /** A list of adjustments to edit on the subscription. */
        fun addEditAdjustment(editAdjustment: EditAdjustment) = apply {
            this.editAdjustments.add(editAdjustment)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            this.additionalBodyProperties.clear()
            putAllAdditionalBodyProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            additionalBodyProperties.put(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                this.additionalBodyProperties.putAll(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply {
            additionalBodyProperties.remove(key)
        }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            keys.forEach(::removeAdditionalBodyProperty)
        }

        fun build(): SubscriptionPriceIntervalsParams =
            SubscriptionPriceIntervalsParams(
                checkNotNull(subscriptionId) { "`subscriptionId` is required but was not set" },
                add.toImmutable().ifEmpty { null },
                addAdjustments.toImmutable().ifEmpty { null },
                edit.toImmutable().ifEmpty { null },
                editAdjustments.toImmutable().ifEmpty { null },
                additionalHeaders.build(),
                additionalQueryParams.build(),
                additionalBodyProperties.toImmutable(),
            )
    }

    @NoAutoDetect
    class Add
    @JsonCreator
    private constructor(
        @JsonProperty("price_id") private val priceId: String?,
        @JsonProperty("external_price_id") private val externalPriceId: String?,
        @JsonProperty("price") private val price: Price?,
        @JsonProperty("allocation_price") private val allocationPrice: AllocationPrice?,
        @JsonProperty("start_date") private val startDate: StartDate,
        @JsonProperty("end_date") private val endDate: EndDate?,
        @JsonProperty("fixed_fee_quantity_transitions")
        private val fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>?,
        @JsonProperty("discounts") private val discounts: List<Discount>?,
        @JsonProperty("minimum_amount") private val minimumAmount: Double?,
        @JsonProperty("maximum_amount") private val maximumAmount: Double?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the price to add to the subscription. */
        @JsonProperty("price_id") fun priceId(): Optional<String> = Optional.ofNullable(priceId)

        /** The external price id of the price to add to the subscription. */
        @JsonProperty("external_price_id")
        fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

        /** The definition of a new price to create and add to the subscription. */
        @JsonProperty("price") fun price(): Optional<Price> = Optional.ofNullable(price)

        /** The definition of a new allocation price to create and add to the subscription. */
        @JsonProperty("allocation_price")
        fun allocationPrice(): Optional<AllocationPrice> = Optional.ofNullable(allocationPrice)

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription.
         */
        @JsonProperty("start_date") fun startDate(): StartDate = startDate

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription.
         */
        @JsonProperty("end_date") fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate)

        /** A list of fixed fee quantity transitions to initialize on the price interval. */
        @JsonProperty("fixed_fee_quantity_transitions")
        fun fixedFeeQuantityTransitions(): Optional<List<FixedFeeQuantityTransition>> =
            Optional.ofNullable(fixedFeeQuantityTransitions)

        /** A list of discounts to initialize on the price interval. */
        @JsonProperty("discounts")
        fun discounts(): Optional<List<Discount>> = Optional.ofNullable(discounts)

        /**
         * The minimum amount that will be billed for this price interval for a given billing
         * period.
         */
        @JsonProperty("minimum_amount")
        fun minimumAmount(): Optional<Double> = Optional.ofNullable(minimumAmount)

        /**
         * The maximum amount that will be billed for this price interval for a given billing
         * period.
         */
        @JsonProperty("maximum_amount")
        fun maximumAmount(): Optional<Double> = Optional.ofNullable(maximumAmount)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var priceId: String? = null
            private var externalPriceId: String? = null
            private var price: Price? = null
            private var allocationPrice: AllocationPrice? = null
            private var startDate: StartDate? = null
            private var endDate: EndDate? = null
            private var fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>? = null
            private var discounts: List<Discount>? = null
            private var minimumAmount: Double? = null
            private var maximumAmount: Double? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(add: Add) = apply {
                priceId = add.priceId
                externalPriceId = add.externalPriceId
                price = add.price
                allocationPrice = add.allocationPrice
                startDate = add.startDate
                endDate = add.endDate
                fixedFeeQuantityTransitions = add.fixedFeeQuantityTransitions?.toMutableList()
                discounts = add.discounts?.toMutableList()
                minimumAmount = add.minimumAmount
                maximumAmount = add.maximumAmount
                additionalProperties = add.additionalProperties.toMutableMap()
            }

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: String) = apply { this.priceId = priceId }

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: String) = apply {
                this.externalPriceId = externalPriceId
            }

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Price) = apply { this.price = price }

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: AllocationPrice) = apply {
                this.allocationPrice = allocationPrice
            }

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription.
             */
            fun startDate(startDate: StartDate) = apply { this.startDate = startDate }

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription.
             */
            fun endDate(endDate: EndDate) = apply { this.endDate = endDate }

            /** A list of fixed fee quantity transitions to initialize on the price interval. */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>
            ) = apply { this.fixedFeeQuantityTransitions = fixedFeeQuantityTransitions }

            /** A list of discounts to initialize on the price interval. */
            fun discounts(discounts: List<Discount>) = apply { this.discounts = discounts }

            /**
             * The minimum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun minimumAmount(minimumAmount: Double) = apply { this.minimumAmount = minimumAmount }

            /**
             * The maximum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun maximumAmount(maximumAmount: Double) = apply { this.maximumAmount = maximumAmount }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Add =
                Add(
                    priceId,
                    externalPriceId,
                    price,
                    allocationPrice,
                    checkNotNull(startDate) { "`startDate` is required but was not set" },
                    endDate,
                    fixedFeeQuantityTransitions?.toImmutable(),
                    discounts?.toImmutable(),
                    minimumAmount,
                    maximumAmount,
                    additionalProperties.toImmutable(),
                )
        }

        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "StartDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        /** The definition of a new allocation price to create and add to the subscription. */
        @NoAutoDetect
        class AllocationPrice
        @JsonCreator
        private constructor(
            @JsonProperty("currency") private val currency: String,
            @JsonProperty("amount") private val amount: String,
            @JsonProperty("cadence") private val cadence: Cadence,
            @JsonProperty("expires_at_end_of_cadence") private val expiresAtEndOfCadence: Boolean,
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /**
             * An ISO 4217 currency string or a custom pricing unit identifier in which to bill this
             * price.
             */
            @JsonProperty("currency") fun currency(): String = currency

            /** An amount of the currency to allocate to the customer at the specified cadence. */
            @JsonProperty("amount") fun amount(): String = amount

            /** The cadence at which to allocate the amount to the customer. */
            @JsonProperty("cadence") fun cadence(): Cadence = cadence

            /**
             * Whether the allocated amount should expire at the end of the cadence or roll over to
             * the next period.
             */
            @JsonProperty("expires_at_end_of_cadence")
            fun expiresAtEndOfCadence(): Boolean = expiresAtEndOfCadence

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var currency: String? = null
                private var amount: String? = null
                private var cadence: Cadence? = null
                private var expiresAtEndOfCadence: Boolean? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(allocationPrice: AllocationPrice) = apply {
                    currency = allocationPrice.currency
                    amount = allocationPrice.amount
                    cadence = allocationPrice.cadence
                    expiresAtEndOfCadence = allocationPrice.expiresAtEndOfCadence
                    additionalProperties = allocationPrice.additionalProperties.toMutableMap()
                }

                /**
                 * An ISO 4217 currency string or a custom pricing unit identifier in which to bill
                 * this price.
                 */
                fun currency(currency: String) = apply { this.currency = currency }

                /**
                 * An amount of the currency to allocate to the customer at the specified cadence.
                 */
                fun amount(amount: String) = apply { this.amount = amount }

                /** The cadence at which to allocate the amount to the customer. */
                fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                /**
                 * Whether the allocated amount should expire at the end of the cadence or roll over
                 * to the next period.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: Boolean) = apply {
                    this.expiresAtEndOfCadence = expiresAtEndOfCadence
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): AllocationPrice =
                    AllocationPrice(
                        checkNotNull(currency) { "`currency` is required but was not set" },
                        checkNotNull(amount) { "`amount` is required but was not set" },
                        checkNotNull(cadence) { "`cadence` is required but was not set" },
                        checkNotNull(expiresAtEndOfCadence) {
                            "`expiresAtEndOfCadence` is required but was not set"
                        },
                        additionalProperties.toImmutable(),
                    )
            }

            class Cadence
            @JsonCreator
            private constructor(
                private val value: JsonField<String>,
            ) : Enum {

                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                enum class Known {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                }

                enum class Value {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                    _UNKNOWN,
                }

                fun value(): Value =
                    when (this) {
                        ONE_TIME -> Value.ONE_TIME
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        ANNUAL -> Value.ANNUAL
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                fun known(): Known =
                    when (this) {
                        ONE_TIME -> Known.ONE_TIME
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        ANNUAL -> Known.ANNUAL
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is AllocationPrice && currency == other.currency && amount == other.amount && cadence == other.cadence && expiresAtEndOfCadence == other.expiresAtEndOfCadence && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(currency, amount, cadence, expiresAtEndOfCadence, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "AllocationPrice{currency=$currency, amount=$amount, cadence=$cadence, expiresAtEndOfCadence=$expiresAtEndOfCadence, additionalProperties=$additionalProperties}"
        }

        @JsonDeserialize(using = Discount.Deserializer::class)
        @JsonSerialize(using = Discount.Serializer::class)
        class Discount
        private constructor(
            private val amountDiscountCreationParams: AmountDiscountCreationParams? = null,
            private val percentageDiscountCreationParams: PercentageDiscountCreationParams? = null,
            private val usageDiscountCreationParams: UsageDiscountCreationParams? = null,
            private val _json: JsonValue? = null,
        ) {

            fun amountDiscountCreationParams(): Optional<AmountDiscountCreationParams> =
                Optional.ofNullable(amountDiscountCreationParams)

            fun percentageDiscountCreationParams(): Optional<PercentageDiscountCreationParams> =
                Optional.ofNullable(percentageDiscountCreationParams)

            fun usageDiscountCreationParams(): Optional<UsageDiscountCreationParams> =
                Optional.ofNullable(usageDiscountCreationParams)

            fun isAmountDiscountCreationParams(): Boolean = amountDiscountCreationParams != null

            fun isPercentageDiscountCreationParams(): Boolean =
                percentageDiscountCreationParams != null

            fun isUsageDiscountCreationParams(): Boolean = usageDiscountCreationParams != null

            fun asAmountDiscountCreationParams(): AmountDiscountCreationParams =
                amountDiscountCreationParams.getOrThrow("amountDiscountCreationParams")

            fun asPercentageDiscountCreationParams(): PercentageDiscountCreationParams =
                percentageDiscountCreationParams.getOrThrow("percentageDiscountCreationParams")

            fun asUsageDiscountCreationParams(): UsageDiscountCreationParams =
                usageDiscountCreationParams.getOrThrow("usageDiscountCreationParams")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    amountDiscountCreationParams != null ->
                        visitor.visitAmountDiscountCreationParams(amountDiscountCreationParams)
                    percentageDiscountCreationParams != null ->
                        visitor.visitPercentageDiscountCreationParams(
                            percentageDiscountCreationParams
                        )
                    usageDiscountCreationParams != null ->
                        visitor.visitUsageDiscountCreationParams(usageDiscountCreationParams)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && amountDiscountCreationParams == other.amountDiscountCreationParams && percentageDiscountCreationParams == other.percentageDiscountCreationParams && usageDiscountCreationParams == other.usageDiscountCreationParams /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(amountDiscountCreationParams, percentageDiscountCreationParams, usageDiscountCreationParams) /* spotless:on */

            override fun toString(): String =
                when {
                    amountDiscountCreationParams != null ->
                        "Discount{amountDiscountCreationParams=$amountDiscountCreationParams}"
                    percentageDiscountCreationParams != null ->
                        "Discount{percentageDiscountCreationParams=$percentageDiscountCreationParams}"
                    usageDiscountCreationParams != null ->
                        "Discount{usageDiscountCreationParams=$usageDiscountCreationParams}"
                    _json != null -> "Discount{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Discount")
                }

            companion object {

                @JvmStatic
                fun ofAmountDiscountCreationParams(
                    amountDiscountCreationParams: AmountDiscountCreationParams
                ) = Discount(amountDiscountCreationParams = amountDiscountCreationParams)

                @JvmStatic
                fun ofPercentageDiscountCreationParams(
                    percentageDiscountCreationParams: PercentageDiscountCreationParams
                ) = Discount(percentageDiscountCreationParams = percentageDiscountCreationParams)

                @JvmStatic
                fun ofUsageDiscountCreationParams(
                    usageDiscountCreationParams: UsageDiscountCreationParams
                ) = Discount(usageDiscountCreationParams = usageDiscountCreationParams)
            }

            interface Visitor<out T> {

                fun visitAmountDiscountCreationParams(
                    amountDiscountCreationParams: AmountDiscountCreationParams
                ): T

                fun visitPercentageDiscountCreationParams(
                    percentageDiscountCreationParams: PercentageDiscountCreationParams
                ): T

                fun visitUsageDiscountCreationParams(
                    usageDiscountCreationParams: UsageDiscountCreationParams
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Discount: $json")
                }
            }

            class Deserializer : BaseDeserializer<Discount>(Discount::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Discount {
                    val json = JsonValue.fromJsonNode(node)
                    val discountType =
                        json.asObject().getOrNull()?.get("discount_type")?.asString()?.getOrNull()

                    when (discountType) {
                        "amount" -> {
                            tryDeserialize(node, jacksonTypeRef<AmountDiscountCreationParams>())
                                ?.let {
                                    return Discount(amountDiscountCreationParams = it, _json = json)
                                }
                        }
                        "percentage" -> {
                            tryDeserialize(node, jacksonTypeRef<PercentageDiscountCreationParams>())
                                ?.let {
                                    return Discount(
                                        percentageDiscountCreationParams = it,
                                        _json = json
                                    )
                                }
                        }
                        "usage" -> {
                            tryDeserialize(node, jacksonTypeRef<UsageDiscountCreationParams>())
                                ?.let {
                                    return Discount(usageDiscountCreationParams = it, _json = json)
                                }
                        }
                    }

                    return Discount(_json = json)
                }
            }

            class Serializer : BaseSerializer<Discount>(Discount::class) {

                override fun serialize(
                    value: Discount,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.amountDiscountCreationParams != null ->
                            generator.writeObject(value.amountDiscountCreationParams)
                        value.percentageDiscountCreationParams != null ->
                            generator.writeObject(value.percentageDiscountCreationParams)
                        value.usageDiscountCreationParams != null ->
                            generator.writeObject(value.usageDiscountCreationParams)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Discount")
                    }
                }
            }

            @NoAutoDetect
            class AmountDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("discount_type") private val discountType: DiscountType,
                @JsonProperty("amount_discount") private val amountDiscount: Double,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("discount_type") fun discountType(): DiscountType = discountType

                /** Only available if discount_type is `amount`. */
                @JsonProperty("amount_discount") fun amountDiscount(): Double = amountDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var discountType: DiscountType? = null
                    private var amountDiscount: Double? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(amountDiscountCreationParams: AmountDiscountCreationParams) =
                        apply {
                            discountType = amountDiscountCreationParams.discountType
                            amountDiscount = amountDiscountCreationParams.amountDiscount
                            additionalProperties =
                                amountDiscountCreationParams.additionalProperties.toMutableMap()
                        }

                    fun discountType(discountType: DiscountType) = apply {
                        this.discountType = discountType
                    }

                    /** Only available if discount_type is `amount`. */
                    fun amountDiscount(amountDiscount: Double) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): AmountDiscountCreationParams =
                        AmountDiscountCreationParams(
                            checkNotNull(discountType) {
                                "`discountType` is required but was not set"
                            },
                            checkNotNull(amountDiscount) {
                                "`amountDiscount` is required but was not set"
                            },
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT = of("amount")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    enum class Known {
                        AMOUNT,
                    }

                    enum class Value {
                        AMOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            AMOUNT -> Value.AMOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            AMOUNT -> Known.AMOUNT
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is AmountDiscountCreationParams && discountType == other.discountType && amountDiscount == other.amountDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(discountType, amountDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "AmountDiscountCreationParams{discountType=$discountType, amountDiscount=$amountDiscount, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class PercentageDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("discount_type") private val discountType: DiscountType,
                @JsonProperty("percentage_discount") private val percentageDiscount: Double,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("discount_type") fun discountType(): DiscountType = discountType

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                @JsonProperty("percentage_discount")
                fun percentageDiscount(): Double = percentageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var discountType: DiscountType? = null
                    private var percentageDiscount: Double? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        percentageDiscountCreationParams: PercentageDiscountCreationParams
                    ) = apply {
                        discountType = percentageDiscountCreationParams.discountType
                        percentageDiscount = percentageDiscountCreationParams.percentageDiscount
                        additionalProperties =
                            percentageDiscountCreationParams.additionalProperties.toMutableMap()
                    }

                    fun discountType(discountType: DiscountType) = apply {
                        this.discountType = discountType
                    }

                    /**
                     * Only available if discount_type is `percentage`. This is a number between 0
                     * and 1.
                     */
                    fun percentageDiscount(percentageDiscount: Double) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): PercentageDiscountCreationParams =
                        PercentageDiscountCreationParams(
                            checkNotNull(discountType) {
                                "`discountType` is required but was not set"
                            },
                            checkNotNull(percentageDiscount) {
                                "`percentageDiscount` is required but was not set"
                            },
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE = of("percentage")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    enum class Known {
                        PERCENTAGE,
                    }

                    enum class Value {
                        PERCENTAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PERCENTAGE -> Value.PERCENTAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PERCENTAGE -> Known.PERCENTAGE
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is PercentageDiscountCreationParams && discountType == other.discountType && percentageDiscount == other.percentageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(discountType, percentageDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "PercentageDiscountCreationParams{discountType=$discountType, percentageDiscount=$percentageDiscount, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class UsageDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("discount_type") private val discountType: DiscountType,
                @JsonProperty("usage_discount") private val usageDiscount: Double,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                @JsonProperty("discount_type") fun discountType(): DiscountType = discountType

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for.
                 */
                @JsonProperty("usage_discount") fun usageDiscount(): Double = usageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var discountType: DiscountType? = null
                    private var usageDiscount: Double? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(usageDiscountCreationParams: UsageDiscountCreationParams) =
                        apply {
                            discountType = usageDiscountCreationParams.discountType
                            usageDiscount = usageDiscountCreationParams.usageDiscount
                            additionalProperties =
                                usageDiscountCreationParams.additionalProperties.toMutableMap()
                        }

                    fun discountType(discountType: DiscountType) = apply {
                        this.discountType = discountType
                    }

                    /**
                     * Only available if discount_type is `usage`. Number of usage units that this
                     * discount is for.
                     */
                    fun usageDiscount(usageDiscount: Double) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): UsageDiscountCreationParams =
                        UsageDiscountCreationParams(
                            checkNotNull(discountType) {
                                "`discountType` is required but was not set"
                            },
                            checkNotNull(usageDiscount) {
                                "`usageDiscount` is required but was not set"
                            },
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE = of("usage")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    enum class Known {
                        USAGE,
                    }

                    enum class Value {
                        USAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            USAGE -> Value.USAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            USAGE -> Known.USAGE
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is UsageDiscountCreationParams && discountType == other.discountType && usageDiscount == other.usageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(discountType, usageDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "UsageDiscountCreationParams{discountType=$discountType, usageDiscount=$usageDiscount, additionalProperties=$additionalProperties}"
            }
        }

        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "EndDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        @NoAutoDetect
        class FixedFeeQuantityTransition
        @JsonCreator
        private constructor(
            @JsonProperty("quantity") private val quantity: Long,
            @JsonProperty("effective_date") private val effectiveDate: OffsetDateTime,
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** The quantity of the fixed fee quantity transition. */
            @JsonProperty("quantity") fun quantity(): Long = quantity

            /** The date that the fixed fee quantity transition should take effect. */
            @JsonProperty("effective_date") fun effectiveDate(): OffsetDateTime = effectiveDate

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var quantity: Long? = null
                private var effectiveDate: OffsetDateTime? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(fixedFeeQuantityTransition: FixedFeeQuantityTransition) = apply {
                    quantity = fixedFeeQuantityTransition.quantity
                    effectiveDate = fixedFeeQuantityTransition.effectiveDate
                    additionalProperties =
                        fixedFeeQuantityTransition.additionalProperties.toMutableMap()
                }

                /** The quantity of the fixed fee quantity transition. */
                fun quantity(quantity: Long) = apply { this.quantity = quantity }

                /** The date that the fixed fee quantity transition should take effect. */
                fun effectiveDate(effectiveDate: OffsetDateTime) = apply {
                    this.effectiveDate = effectiveDate
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): FixedFeeQuantityTransition =
                    FixedFeeQuantityTransition(
                        checkNotNull(quantity) { "`quantity` is required but was not set" },
                        checkNotNull(effectiveDate) {
                            "`effectiveDate` is required but was not set"
                        },
                        additionalProperties.toImmutable(),
                    )
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is FixedFeeQuantityTransition && quantity == other.quantity && effectiveDate == other.effectiveDate && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(quantity, effectiveDate, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "FixedFeeQuantityTransition{quantity=$quantity, effectiveDate=$effectiveDate, additionalProperties=$additionalProperties}"
        }

        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newFloatingUnitPrice: NewFloatingUnitPrice? = null,
            private val newFloatingPackagePrice: NewFloatingPackagePrice? = null,
            private val newFloatingMatrixPrice: NewFloatingMatrixPrice? = null,
            private val newFloatingMatrixWithAllocationPrice:
                NewFloatingMatrixWithAllocationPrice? =
                null,
            private val newFloatingTieredPrice: NewFloatingTieredPrice? = null,
            private val newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice? = null,
            private val newFloatingBpsPrice: NewFloatingBpsPrice? = null,
            private val newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice? = null,
            private val newFloatingBulkPrice: NewFloatingBulkPrice? = null,
            private val newFloatingThresholdTotalAmountPrice:
                NewFloatingThresholdTotalAmountPrice? =
                null,
            private val newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice? = null,
            private val newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice? = null,
            private val newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice? =
                null,
            private val newFloatingPackageWithAllocationPrice:
                NewFloatingPackageWithAllocationPrice? =
                null,
            private val newFloatingTieredPackageWithMinimumPrice:
                NewFloatingTieredPackageWithMinimumPrice? =
                null,
            private val newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice? = null,
            private val newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice? =
                null,
            private val newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice? =
                null,
            private val newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice? =
                null,
            private val newFloatingGroupedWithProratedMinimumPrice:
                NewFloatingGroupedWithProratedMinimumPrice? =
                null,
            private val newFloatingGroupedWithMeteredMinimumPrice:
                NewFloatingGroupedWithMeteredMinimumPrice? =
                null,
            private val newFloatingMatrixWithDisplayNamePrice:
                NewFloatingMatrixWithDisplayNamePrice? =
                null,
            private val newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice? =
                null,
            private val newFloatingGroupedTieredPackagePrice:
                NewFloatingGroupedTieredPackagePrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            fun newFloatingUnitPrice(): Optional<NewFloatingUnitPrice> =
                Optional.ofNullable(newFloatingUnitPrice)

            fun newFloatingPackagePrice(): Optional<NewFloatingPackagePrice> =
                Optional.ofNullable(newFloatingPackagePrice)

            fun newFloatingMatrixPrice(): Optional<NewFloatingMatrixPrice> =
                Optional.ofNullable(newFloatingMatrixPrice)

            fun newFloatingMatrixWithAllocationPrice():
                Optional<NewFloatingMatrixWithAllocationPrice> =
                Optional.ofNullable(newFloatingMatrixWithAllocationPrice)

            fun newFloatingTieredPrice(): Optional<NewFloatingTieredPrice> =
                Optional.ofNullable(newFloatingTieredPrice)

            fun newFloatingTieredBpsPrice(): Optional<NewFloatingTieredBpsPrice> =
                Optional.ofNullable(newFloatingTieredBpsPrice)

            fun newFloatingBpsPrice(): Optional<NewFloatingBpsPrice> =
                Optional.ofNullable(newFloatingBpsPrice)

            fun newFloatingBulkBpsPrice(): Optional<NewFloatingBulkBpsPrice> =
                Optional.ofNullable(newFloatingBulkBpsPrice)

            fun newFloatingBulkPrice(): Optional<NewFloatingBulkPrice> =
                Optional.ofNullable(newFloatingBulkPrice)

            fun newFloatingThresholdTotalAmountPrice():
                Optional<NewFloatingThresholdTotalAmountPrice> =
                Optional.ofNullable(newFloatingThresholdTotalAmountPrice)

            fun newFloatingTieredPackagePrice(): Optional<NewFloatingTieredPackagePrice> =
                Optional.ofNullable(newFloatingTieredPackagePrice)

            fun newFloatingGroupedTieredPrice(): Optional<NewFloatingGroupedTieredPrice> =
                Optional.ofNullable(newFloatingGroupedTieredPrice)

            fun newFloatingTieredWithMinimumPrice(): Optional<NewFloatingTieredWithMinimumPrice> =
                Optional.ofNullable(newFloatingTieredWithMinimumPrice)

            fun newFloatingPackageWithAllocationPrice():
                Optional<NewFloatingPackageWithAllocationPrice> =
                Optional.ofNullable(newFloatingPackageWithAllocationPrice)

            fun newFloatingTieredPackageWithMinimumPrice():
                Optional<NewFloatingTieredPackageWithMinimumPrice> =
                Optional.ofNullable(newFloatingTieredPackageWithMinimumPrice)

            fun newFloatingUnitWithPercentPrice(): Optional<NewFloatingUnitWithPercentPrice> =
                Optional.ofNullable(newFloatingUnitWithPercentPrice)

            fun newFloatingTieredWithProrationPrice():
                Optional<NewFloatingTieredWithProrationPrice> =
                Optional.ofNullable(newFloatingTieredWithProrationPrice)

            fun newFloatingUnitWithProrationPrice(): Optional<NewFloatingUnitWithProrationPrice> =
                Optional.ofNullable(newFloatingUnitWithProrationPrice)

            fun newFloatingGroupedAllocationPrice(): Optional<NewFloatingGroupedAllocationPrice> =
                Optional.ofNullable(newFloatingGroupedAllocationPrice)

            fun newFloatingGroupedWithProratedMinimumPrice():
                Optional<NewFloatingGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newFloatingGroupedWithProratedMinimumPrice)

            fun newFloatingGroupedWithMeteredMinimumPrice():
                Optional<NewFloatingGroupedWithMeteredMinimumPrice> =
                Optional.ofNullable(newFloatingGroupedWithMeteredMinimumPrice)

            fun newFloatingMatrixWithDisplayNamePrice():
                Optional<NewFloatingMatrixWithDisplayNamePrice> =
                Optional.ofNullable(newFloatingMatrixWithDisplayNamePrice)

            fun newFloatingBulkWithProrationPrice(): Optional<NewFloatingBulkWithProrationPrice> =
                Optional.ofNullable(newFloatingBulkWithProrationPrice)

            fun newFloatingGroupedTieredPackagePrice():
                Optional<NewFloatingGroupedTieredPackagePrice> =
                Optional.ofNullable(newFloatingGroupedTieredPackagePrice)

            fun isNewFloatingUnitPrice(): Boolean = newFloatingUnitPrice != null

            fun isNewFloatingPackagePrice(): Boolean = newFloatingPackagePrice != null

            fun isNewFloatingMatrixPrice(): Boolean = newFloatingMatrixPrice != null

            fun isNewFloatingMatrixWithAllocationPrice(): Boolean =
                newFloatingMatrixWithAllocationPrice != null

            fun isNewFloatingTieredPrice(): Boolean = newFloatingTieredPrice != null

            fun isNewFloatingTieredBpsPrice(): Boolean = newFloatingTieredBpsPrice != null

            fun isNewFloatingBpsPrice(): Boolean = newFloatingBpsPrice != null

            fun isNewFloatingBulkBpsPrice(): Boolean = newFloatingBulkBpsPrice != null

            fun isNewFloatingBulkPrice(): Boolean = newFloatingBulkPrice != null

            fun isNewFloatingThresholdTotalAmountPrice(): Boolean =
                newFloatingThresholdTotalAmountPrice != null

            fun isNewFloatingTieredPackagePrice(): Boolean = newFloatingTieredPackagePrice != null

            fun isNewFloatingGroupedTieredPrice(): Boolean = newFloatingGroupedTieredPrice != null

            fun isNewFloatingTieredWithMinimumPrice(): Boolean =
                newFloatingTieredWithMinimumPrice != null

            fun isNewFloatingPackageWithAllocationPrice(): Boolean =
                newFloatingPackageWithAllocationPrice != null

            fun isNewFloatingTieredPackageWithMinimumPrice(): Boolean =
                newFloatingTieredPackageWithMinimumPrice != null

            fun isNewFloatingUnitWithPercentPrice(): Boolean =
                newFloatingUnitWithPercentPrice != null

            fun isNewFloatingTieredWithProrationPrice(): Boolean =
                newFloatingTieredWithProrationPrice != null

            fun isNewFloatingUnitWithProrationPrice(): Boolean =
                newFloatingUnitWithProrationPrice != null

            fun isNewFloatingGroupedAllocationPrice(): Boolean =
                newFloatingGroupedAllocationPrice != null

            fun isNewFloatingGroupedWithProratedMinimumPrice(): Boolean =
                newFloatingGroupedWithProratedMinimumPrice != null

            fun isNewFloatingGroupedWithMeteredMinimumPrice(): Boolean =
                newFloatingGroupedWithMeteredMinimumPrice != null

            fun isNewFloatingMatrixWithDisplayNamePrice(): Boolean =
                newFloatingMatrixWithDisplayNamePrice != null

            fun isNewFloatingBulkWithProrationPrice(): Boolean =
                newFloatingBulkWithProrationPrice != null

            fun isNewFloatingGroupedTieredPackagePrice(): Boolean =
                newFloatingGroupedTieredPackagePrice != null

            fun asNewFloatingUnitPrice(): NewFloatingUnitPrice =
                newFloatingUnitPrice.getOrThrow("newFloatingUnitPrice")

            fun asNewFloatingPackagePrice(): NewFloatingPackagePrice =
                newFloatingPackagePrice.getOrThrow("newFloatingPackagePrice")

            fun asNewFloatingMatrixPrice(): NewFloatingMatrixPrice =
                newFloatingMatrixPrice.getOrThrow("newFloatingMatrixPrice")

            fun asNewFloatingMatrixWithAllocationPrice(): NewFloatingMatrixWithAllocationPrice =
                newFloatingMatrixWithAllocationPrice.getOrThrow(
                    "newFloatingMatrixWithAllocationPrice"
                )

            fun asNewFloatingTieredPrice(): NewFloatingTieredPrice =
                newFloatingTieredPrice.getOrThrow("newFloatingTieredPrice")

            fun asNewFloatingTieredBpsPrice(): NewFloatingTieredBpsPrice =
                newFloatingTieredBpsPrice.getOrThrow("newFloatingTieredBpsPrice")

            fun asNewFloatingBpsPrice(): NewFloatingBpsPrice =
                newFloatingBpsPrice.getOrThrow("newFloatingBpsPrice")

            fun asNewFloatingBulkBpsPrice(): NewFloatingBulkBpsPrice =
                newFloatingBulkBpsPrice.getOrThrow("newFloatingBulkBpsPrice")

            fun asNewFloatingBulkPrice(): NewFloatingBulkPrice =
                newFloatingBulkPrice.getOrThrow("newFloatingBulkPrice")

            fun asNewFloatingThresholdTotalAmountPrice(): NewFloatingThresholdTotalAmountPrice =
                newFloatingThresholdTotalAmountPrice.getOrThrow(
                    "newFloatingThresholdTotalAmountPrice"
                )

            fun asNewFloatingTieredPackagePrice(): NewFloatingTieredPackagePrice =
                newFloatingTieredPackagePrice.getOrThrow("newFloatingTieredPackagePrice")

            fun asNewFloatingGroupedTieredPrice(): NewFloatingGroupedTieredPrice =
                newFloatingGroupedTieredPrice.getOrThrow("newFloatingGroupedTieredPrice")

            fun asNewFloatingTieredWithMinimumPrice(): NewFloatingTieredWithMinimumPrice =
                newFloatingTieredWithMinimumPrice.getOrThrow("newFloatingTieredWithMinimumPrice")

            fun asNewFloatingPackageWithAllocationPrice(): NewFloatingPackageWithAllocationPrice =
                newFloatingPackageWithAllocationPrice.getOrThrow(
                    "newFloatingPackageWithAllocationPrice"
                )

            fun asNewFloatingTieredPackageWithMinimumPrice():
                NewFloatingTieredPackageWithMinimumPrice =
                newFloatingTieredPackageWithMinimumPrice.getOrThrow(
                    "newFloatingTieredPackageWithMinimumPrice"
                )

            fun asNewFloatingUnitWithPercentPrice(): NewFloatingUnitWithPercentPrice =
                newFloatingUnitWithPercentPrice.getOrThrow("newFloatingUnitWithPercentPrice")

            fun asNewFloatingTieredWithProrationPrice(): NewFloatingTieredWithProrationPrice =
                newFloatingTieredWithProrationPrice.getOrThrow(
                    "newFloatingTieredWithProrationPrice"
                )

            fun asNewFloatingUnitWithProrationPrice(): NewFloatingUnitWithProrationPrice =
                newFloatingUnitWithProrationPrice.getOrThrow("newFloatingUnitWithProrationPrice")

            fun asNewFloatingGroupedAllocationPrice(): NewFloatingGroupedAllocationPrice =
                newFloatingGroupedAllocationPrice.getOrThrow("newFloatingGroupedAllocationPrice")

            fun asNewFloatingGroupedWithProratedMinimumPrice():
                NewFloatingGroupedWithProratedMinimumPrice =
                newFloatingGroupedWithProratedMinimumPrice.getOrThrow(
                    "newFloatingGroupedWithProratedMinimumPrice"
                )

            fun asNewFloatingGroupedWithMeteredMinimumPrice():
                NewFloatingGroupedWithMeteredMinimumPrice =
                newFloatingGroupedWithMeteredMinimumPrice.getOrThrow(
                    "newFloatingGroupedWithMeteredMinimumPrice"
                )

            fun asNewFloatingMatrixWithDisplayNamePrice(): NewFloatingMatrixWithDisplayNamePrice =
                newFloatingMatrixWithDisplayNamePrice.getOrThrow(
                    "newFloatingMatrixWithDisplayNamePrice"
                )

            fun asNewFloatingBulkWithProrationPrice(): NewFloatingBulkWithProrationPrice =
                newFloatingBulkWithProrationPrice.getOrThrow("newFloatingBulkWithProrationPrice")

            fun asNewFloatingGroupedTieredPackagePrice(): NewFloatingGroupedTieredPackagePrice =
                newFloatingGroupedTieredPackagePrice.getOrThrow(
                    "newFloatingGroupedTieredPackagePrice"
                )

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newFloatingUnitPrice != null ->
                        visitor.visitNewFloatingUnitPrice(newFloatingUnitPrice)
                    newFloatingPackagePrice != null ->
                        visitor.visitNewFloatingPackagePrice(newFloatingPackagePrice)
                    newFloatingMatrixPrice != null ->
                        visitor.visitNewFloatingMatrixPrice(newFloatingMatrixPrice)
                    newFloatingMatrixWithAllocationPrice != null ->
                        visitor.visitNewFloatingMatrixWithAllocationPrice(
                            newFloatingMatrixWithAllocationPrice
                        )
                    newFloatingTieredPrice != null ->
                        visitor.visitNewFloatingTieredPrice(newFloatingTieredPrice)
                    newFloatingTieredBpsPrice != null ->
                        visitor.visitNewFloatingTieredBpsPrice(newFloatingTieredBpsPrice)
                    newFloatingBpsPrice != null ->
                        visitor.visitNewFloatingBpsPrice(newFloatingBpsPrice)
                    newFloatingBulkBpsPrice != null ->
                        visitor.visitNewFloatingBulkBpsPrice(newFloatingBulkBpsPrice)
                    newFloatingBulkPrice != null ->
                        visitor.visitNewFloatingBulkPrice(newFloatingBulkPrice)
                    newFloatingThresholdTotalAmountPrice != null ->
                        visitor.visitNewFloatingThresholdTotalAmountPrice(
                            newFloatingThresholdTotalAmountPrice
                        )
                    newFloatingTieredPackagePrice != null ->
                        visitor.visitNewFloatingTieredPackagePrice(newFloatingTieredPackagePrice)
                    newFloatingGroupedTieredPrice != null ->
                        visitor.visitNewFloatingGroupedTieredPrice(newFloatingGroupedTieredPrice)
                    newFloatingTieredWithMinimumPrice != null ->
                        visitor.visitNewFloatingTieredWithMinimumPrice(
                            newFloatingTieredWithMinimumPrice
                        )
                    newFloatingPackageWithAllocationPrice != null ->
                        visitor.visitNewFloatingPackageWithAllocationPrice(
                            newFloatingPackageWithAllocationPrice
                        )
                    newFloatingTieredPackageWithMinimumPrice != null ->
                        visitor.visitNewFloatingTieredPackageWithMinimumPrice(
                            newFloatingTieredPackageWithMinimumPrice
                        )
                    newFloatingUnitWithPercentPrice != null ->
                        visitor.visitNewFloatingUnitWithPercentPrice(
                            newFloatingUnitWithPercentPrice
                        )
                    newFloatingTieredWithProrationPrice != null ->
                        visitor.visitNewFloatingTieredWithProrationPrice(
                            newFloatingTieredWithProrationPrice
                        )
                    newFloatingUnitWithProrationPrice != null ->
                        visitor.visitNewFloatingUnitWithProrationPrice(
                            newFloatingUnitWithProrationPrice
                        )
                    newFloatingGroupedAllocationPrice != null ->
                        visitor.visitNewFloatingGroupedAllocationPrice(
                            newFloatingGroupedAllocationPrice
                        )
                    newFloatingGroupedWithProratedMinimumPrice != null ->
                        visitor.visitNewFloatingGroupedWithProratedMinimumPrice(
                            newFloatingGroupedWithProratedMinimumPrice
                        )
                    newFloatingGroupedWithMeteredMinimumPrice != null ->
                        visitor.visitNewFloatingGroupedWithMeteredMinimumPrice(
                            newFloatingGroupedWithMeteredMinimumPrice
                        )
                    newFloatingMatrixWithDisplayNamePrice != null ->
                        visitor.visitNewFloatingMatrixWithDisplayNamePrice(
                            newFloatingMatrixWithDisplayNamePrice
                        )
                    newFloatingBulkWithProrationPrice != null ->
                        visitor.visitNewFloatingBulkWithProrationPrice(
                            newFloatingBulkWithProrationPrice
                        )
                    newFloatingGroupedTieredPackagePrice != null ->
                        visitor.visitNewFloatingGroupedTieredPackagePrice(
                            newFloatingGroupedTieredPackagePrice
                        )
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && newFloatingUnitPrice == other.newFloatingUnitPrice && newFloatingPackagePrice == other.newFloatingPackagePrice && newFloatingMatrixPrice == other.newFloatingMatrixPrice && newFloatingMatrixWithAllocationPrice == other.newFloatingMatrixWithAllocationPrice && newFloatingTieredPrice == other.newFloatingTieredPrice && newFloatingTieredBpsPrice == other.newFloatingTieredBpsPrice && newFloatingBpsPrice == other.newFloatingBpsPrice && newFloatingBulkBpsPrice == other.newFloatingBulkBpsPrice && newFloatingBulkPrice == other.newFloatingBulkPrice && newFloatingThresholdTotalAmountPrice == other.newFloatingThresholdTotalAmountPrice && newFloatingTieredPackagePrice == other.newFloatingTieredPackagePrice && newFloatingGroupedTieredPrice == other.newFloatingGroupedTieredPrice && newFloatingTieredWithMinimumPrice == other.newFloatingTieredWithMinimumPrice && newFloatingPackageWithAllocationPrice == other.newFloatingPackageWithAllocationPrice && newFloatingTieredPackageWithMinimumPrice == other.newFloatingTieredPackageWithMinimumPrice && newFloatingUnitWithPercentPrice == other.newFloatingUnitWithPercentPrice && newFloatingTieredWithProrationPrice == other.newFloatingTieredWithProrationPrice && newFloatingUnitWithProrationPrice == other.newFloatingUnitWithProrationPrice && newFloatingGroupedAllocationPrice == other.newFloatingGroupedAllocationPrice && newFloatingGroupedWithProratedMinimumPrice == other.newFloatingGroupedWithProratedMinimumPrice && newFloatingGroupedWithMeteredMinimumPrice == other.newFloatingGroupedWithMeteredMinimumPrice && newFloatingMatrixWithDisplayNamePrice == other.newFloatingMatrixWithDisplayNamePrice && newFloatingBulkWithProrationPrice == other.newFloatingBulkWithProrationPrice && newFloatingGroupedTieredPackagePrice == other.newFloatingGroupedTieredPackagePrice /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newFloatingUnitPrice, newFloatingPackagePrice, newFloatingMatrixPrice, newFloatingMatrixWithAllocationPrice, newFloatingTieredPrice, newFloatingTieredBpsPrice, newFloatingBpsPrice, newFloatingBulkBpsPrice, newFloatingBulkPrice, newFloatingThresholdTotalAmountPrice, newFloatingTieredPackagePrice, newFloatingGroupedTieredPrice, newFloatingTieredWithMinimumPrice, newFloatingPackageWithAllocationPrice, newFloatingTieredPackageWithMinimumPrice, newFloatingUnitWithPercentPrice, newFloatingTieredWithProrationPrice, newFloatingUnitWithProrationPrice, newFloatingGroupedAllocationPrice, newFloatingGroupedWithProratedMinimumPrice, newFloatingGroupedWithMeteredMinimumPrice, newFloatingMatrixWithDisplayNamePrice, newFloatingBulkWithProrationPrice, newFloatingGroupedTieredPackagePrice) /* spotless:on */

            override fun toString(): String =
                when {
                    newFloatingUnitPrice != null ->
                        "Price{newFloatingUnitPrice=$newFloatingUnitPrice}"
                    newFloatingPackagePrice != null ->
                        "Price{newFloatingPackagePrice=$newFloatingPackagePrice}"
                    newFloatingMatrixPrice != null ->
                        "Price{newFloatingMatrixPrice=$newFloatingMatrixPrice}"
                    newFloatingMatrixWithAllocationPrice != null ->
                        "Price{newFloatingMatrixWithAllocationPrice=$newFloatingMatrixWithAllocationPrice}"
                    newFloatingTieredPrice != null ->
                        "Price{newFloatingTieredPrice=$newFloatingTieredPrice}"
                    newFloatingTieredBpsPrice != null ->
                        "Price{newFloatingTieredBpsPrice=$newFloatingTieredBpsPrice}"
                    newFloatingBpsPrice != null -> "Price{newFloatingBpsPrice=$newFloatingBpsPrice}"
                    newFloatingBulkBpsPrice != null ->
                        "Price{newFloatingBulkBpsPrice=$newFloatingBulkBpsPrice}"
                    newFloatingBulkPrice != null ->
                        "Price{newFloatingBulkPrice=$newFloatingBulkPrice}"
                    newFloatingThresholdTotalAmountPrice != null ->
                        "Price{newFloatingThresholdTotalAmountPrice=$newFloatingThresholdTotalAmountPrice}"
                    newFloatingTieredPackagePrice != null ->
                        "Price{newFloatingTieredPackagePrice=$newFloatingTieredPackagePrice}"
                    newFloatingGroupedTieredPrice != null ->
                        "Price{newFloatingGroupedTieredPrice=$newFloatingGroupedTieredPrice}"
                    newFloatingTieredWithMinimumPrice != null ->
                        "Price{newFloatingTieredWithMinimumPrice=$newFloatingTieredWithMinimumPrice}"
                    newFloatingPackageWithAllocationPrice != null ->
                        "Price{newFloatingPackageWithAllocationPrice=$newFloatingPackageWithAllocationPrice}"
                    newFloatingTieredPackageWithMinimumPrice != null ->
                        "Price{newFloatingTieredPackageWithMinimumPrice=$newFloatingTieredPackageWithMinimumPrice}"
                    newFloatingUnitWithPercentPrice != null ->
                        "Price{newFloatingUnitWithPercentPrice=$newFloatingUnitWithPercentPrice}"
                    newFloatingTieredWithProrationPrice != null ->
                        "Price{newFloatingTieredWithProrationPrice=$newFloatingTieredWithProrationPrice}"
                    newFloatingUnitWithProrationPrice != null ->
                        "Price{newFloatingUnitWithProrationPrice=$newFloatingUnitWithProrationPrice}"
                    newFloatingGroupedAllocationPrice != null ->
                        "Price{newFloatingGroupedAllocationPrice=$newFloatingGroupedAllocationPrice}"
                    newFloatingGroupedWithProratedMinimumPrice != null ->
                        "Price{newFloatingGroupedWithProratedMinimumPrice=$newFloatingGroupedWithProratedMinimumPrice}"
                    newFloatingGroupedWithMeteredMinimumPrice != null ->
                        "Price{newFloatingGroupedWithMeteredMinimumPrice=$newFloatingGroupedWithMeteredMinimumPrice}"
                    newFloatingMatrixWithDisplayNamePrice != null ->
                        "Price{newFloatingMatrixWithDisplayNamePrice=$newFloatingMatrixWithDisplayNamePrice}"
                    newFloatingBulkWithProrationPrice != null ->
                        "Price{newFloatingBulkWithProrationPrice=$newFloatingBulkWithProrationPrice}"
                    newFloatingGroupedTieredPackagePrice != null ->
                        "Price{newFloatingGroupedTieredPackagePrice=$newFloatingGroupedTieredPackagePrice}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }

            companion object {

                @JvmStatic
                fun ofNewFloatingUnitPrice(newFloatingUnitPrice: NewFloatingUnitPrice) =
                    Price(newFloatingUnitPrice = newFloatingUnitPrice)

                @JvmStatic
                fun ofNewFloatingPackagePrice(newFloatingPackagePrice: NewFloatingPackagePrice) =
                    Price(newFloatingPackagePrice = newFloatingPackagePrice)

                @JvmStatic
                fun ofNewFloatingMatrixPrice(newFloatingMatrixPrice: NewFloatingMatrixPrice) =
                    Price(newFloatingMatrixPrice = newFloatingMatrixPrice)

                @JvmStatic
                fun ofNewFloatingMatrixWithAllocationPrice(
                    newFloatingMatrixWithAllocationPrice: NewFloatingMatrixWithAllocationPrice
                ) =
                    Price(
                        newFloatingMatrixWithAllocationPrice = newFloatingMatrixWithAllocationPrice
                    )

                @JvmStatic
                fun ofNewFloatingTieredPrice(newFloatingTieredPrice: NewFloatingTieredPrice) =
                    Price(newFloatingTieredPrice = newFloatingTieredPrice)

                @JvmStatic
                fun ofNewFloatingTieredBpsPrice(
                    newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice
                ) = Price(newFloatingTieredBpsPrice = newFloatingTieredBpsPrice)

                @JvmStatic
                fun ofNewFloatingBpsPrice(newFloatingBpsPrice: NewFloatingBpsPrice) =
                    Price(newFloatingBpsPrice = newFloatingBpsPrice)

                @JvmStatic
                fun ofNewFloatingBulkBpsPrice(newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice) =
                    Price(newFloatingBulkBpsPrice = newFloatingBulkBpsPrice)

                @JvmStatic
                fun ofNewFloatingBulkPrice(newFloatingBulkPrice: NewFloatingBulkPrice) =
                    Price(newFloatingBulkPrice = newFloatingBulkPrice)

                @JvmStatic
                fun ofNewFloatingThresholdTotalAmountPrice(
                    newFloatingThresholdTotalAmountPrice: NewFloatingThresholdTotalAmountPrice
                ) =
                    Price(
                        newFloatingThresholdTotalAmountPrice = newFloatingThresholdTotalAmountPrice
                    )

                @JvmStatic
                fun ofNewFloatingTieredPackagePrice(
                    newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice
                ) = Price(newFloatingTieredPackagePrice = newFloatingTieredPackagePrice)

                @JvmStatic
                fun ofNewFloatingGroupedTieredPrice(
                    newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice
                ) = Price(newFloatingGroupedTieredPrice = newFloatingGroupedTieredPrice)

                @JvmStatic
                fun ofNewFloatingTieredWithMinimumPrice(
                    newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice
                ) = Price(newFloatingTieredWithMinimumPrice = newFloatingTieredWithMinimumPrice)

                @JvmStatic
                fun ofNewFloatingPackageWithAllocationPrice(
                    newFloatingPackageWithAllocationPrice: NewFloatingPackageWithAllocationPrice
                ) =
                    Price(
                        newFloatingPackageWithAllocationPrice =
                            newFloatingPackageWithAllocationPrice
                    )

                @JvmStatic
                fun ofNewFloatingTieredPackageWithMinimumPrice(
                    newFloatingTieredPackageWithMinimumPrice:
                        NewFloatingTieredPackageWithMinimumPrice
                ) =
                    Price(
                        newFloatingTieredPackageWithMinimumPrice =
                            newFloatingTieredPackageWithMinimumPrice
                    )

                @JvmStatic
                fun ofNewFloatingUnitWithPercentPrice(
                    newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice
                ) = Price(newFloatingUnitWithPercentPrice = newFloatingUnitWithPercentPrice)

                @JvmStatic
                fun ofNewFloatingTieredWithProrationPrice(
                    newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice
                ) = Price(newFloatingTieredWithProrationPrice = newFloatingTieredWithProrationPrice)

                @JvmStatic
                fun ofNewFloatingUnitWithProrationPrice(
                    newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice
                ) = Price(newFloatingUnitWithProrationPrice = newFloatingUnitWithProrationPrice)

                @JvmStatic
                fun ofNewFloatingGroupedAllocationPrice(
                    newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice
                ) = Price(newFloatingGroupedAllocationPrice = newFloatingGroupedAllocationPrice)

                @JvmStatic
                fun ofNewFloatingGroupedWithProratedMinimumPrice(
                    newFloatingGroupedWithProratedMinimumPrice:
                        NewFloatingGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newFloatingGroupedWithProratedMinimumPrice =
                            newFloatingGroupedWithProratedMinimumPrice
                    )

                @JvmStatic
                fun ofNewFloatingGroupedWithMeteredMinimumPrice(
                    newFloatingGroupedWithMeteredMinimumPrice:
                        NewFloatingGroupedWithMeteredMinimumPrice
                ) =
                    Price(
                        newFloatingGroupedWithMeteredMinimumPrice =
                            newFloatingGroupedWithMeteredMinimumPrice
                    )

                @JvmStatic
                fun ofNewFloatingMatrixWithDisplayNamePrice(
                    newFloatingMatrixWithDisplayNamePrice: NewFloatingMatrixWithDisplayNamePrice
                ) =
                    Price(
                        newFloatingMatrixWithDisplayNamePrice =
                            newFloatingMatrixWithDisplayNamePrice
                    )

                @JvmStatic
                fun ofNewFloatingBulkWithProrationPrice(
                    newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice
                ) = Price(newFloatingBulkWithProrationPrice = newFloatingBulkWithProrationPrice)

                @JvmStatic
                fun ofNewFloatingGroupedTieredPackagePrice(
                    newFloatingGroupedTieredPackagePrice: NewFloatingGroupedTieredPackagePrice
                ) =
                    Price(
                        newFloatingGroupedTieredPackagePrice = newFloatingGroupedTieredPackagePrice
                    )
            }

            interface Visitor<out T> {

                fun visitNewFloatingUnitPrice(newFloatingUnitPrice: NewFloatingUnitPrice): T

                fun visitNewFloatingPackagePrice(
                    newFloatingPackagePrice: NewFloatingPackagePrice
                ): T

                fun visitNewFloatingMatrixPrice(newFloatingMatrixPrice: NewFloatingMatrixPrice): T

                fun visitNewFloatingMatrixWithAllocationPrice(
                    newFloatingMatrixWithAllocationPrice: NewFloatingMatrixWithAllocationPrice
                ): T

                fun visitNewFloatingTieredPrice(newFloatingTieredPrice: NewFloatingTieredPrice): T

                fun visitNewFloatingTieredBpsPrice(
                    newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice
                ): T

                fun visitNewFloatingBpsPrice(newFloatingBpsPrice: NewFloatingBpsPrice): T

                fun visitNewFloatingBulkBpsPrice(
                    newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice
                ): T

                fun visitNewFloatingBulkPrice(newFloatingBulkPrice: NewFloatingBulkPrice): T

                fun visitNewFloatingThresholdTotalAmountPrice(
                    newFloatingThresholdTotalAmountPrice: NewFloatingThresholdTotalAmountPrice
                ): T

                fun visitNewFloatingTieredPackagePrice(
                    newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice
                ): T

                fun visitNewFloatingGroupedTieredPrice(
                    newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice
                ): T

                fun visitNewFloatingTieredWithMinimumPrice(
                    newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice
                ): T

                fun visitNewFloatingPackageWithAllocationPrice(
                    newFloatingPackageWithAllocationPrice: NewFloatingPackageWithAllocationPrice
                ): T

                fun visitNewFloatingTieredPackageWithMinimumPrice(
                    newFloatingTieredPackageWithMinimumPrice:
                        NewFloatingTieredPackageWithMinimumPrice
                ): T

                fun visitNewFloatingUnitWithPercentPrice(
                    newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice
                ): T

                fun visitNewFloatingTieredWithProrationPrice(
                    newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice
                ): T

                fun visitNewFloatingUnitWithProrationPrice(
                    newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice
                ): T

                fun visitNewFloatingGroupedAllocationPrice(
                    newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice
                ): T

                fun visitNewFloatingGroupedWithProratedMinimumPrice(
                    newFloatingGroupedWithProratedMinimumPrice:
                        NewFloatingGroupedWithProratedMinimumPrice
                ): T

                fun visitNewFloatingGroupedWithMeteredMinimumPrice(
                    newFloatingGroupedWithMeteredMinimumPrice:
                        NewFloatingGroupedWithMeteredMinimumPrice
                ): T

                fun visitNewFloatingMatrixWithDisplayNamePrice(
                    newFloatingMatrixWithDisplayNamePrice: NewFloatingMatrixWithDisplayNamePrice
                ): T

                fun visitNewFloatingBulkWithProrationPrice(
                    newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice
                ): T

                fun visitNewFloatingGroupedTieredPackagePrice(
                    newFloatingGroupedTieredPackagePrice: NewFloatingGroupedTieredPackagePrice
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingUnitPrice>())?.let {
                                return Price(newFloatingUnitPrice = it, _json = json)
                            }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingPackagePrice>())?.let {
                                return Price(newFloatingPackagePrice = it, _json = json)
                            }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingMatrixPrice>())?.let {
                                return Price(newFloatingMatrixPrice = it, _json = json)
                            }
                        }
                        "matrix_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingMatrixWithAllocationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingMatrixWithAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredPrice>())?.let {
                                return Price(newFloatingTieredPrice = it, _json = json)
                            }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredBpsPrice>())?.let {
                                return Price(newFloatingTieredBpsPrice = it, _json = json)
                            }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBpsPrice>())?.let {
                                return Price(newFloatingBpsPrice = it, _json = json)
                            }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBulkBpsPrice>())?.let {
                                return Price(newFloatingBulkBpsPrice = it, _json = json)
                            }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBulkPrice>())?.let {
                                return Price(newFloatingBulkPrice = it, _json = json)
                            }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingThresholdTotalAmountPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingThresholdTotalAmountPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredPackagePrice>())
                                ?.let {
                                    return Price(newFloatingTieredPackagePrice = it, _json = json)
                                }
                        }
                        "grouped_tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingGroupedTieredPrice>())
                                ?.let {
                                    return Price(newFloatingGroupedTieredPrice = it, _json = json)
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredWithMinimumPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingTieredWithMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingPackageWithAllocationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingPackageWithAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_package_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredPackageWithMinimumPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingTieredPackageWithMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingUnitWithPercentPrice>())
                                ?.let {
                                    return Price(newFloatingUnitWithPercentPrice = it, _json = json)
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingTieredWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingUnitWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingUnitWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedAllocationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingGroupedAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedWithProratedMinimumPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingGroupedWithProratedMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_with_metered_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedWithMeteredMinimumPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingGroupedWithMeteredMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "matrix_with_display_name" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingMatrixWithDisplayNamePrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingMatrixWithDisplayNamePrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingBulkWithProrationPrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingBulkWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedTieredPackagePrice>()
                                )
                                ?.let {
                                    return Price(
                                        newFloatingGroupedTieredPackagePrice = it,
                                        _json = json
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newFloatingUnitPrice != null ->
                            generator.writeObject(value.newFloatingUnitPrice)
                        value.newFloatingPackagePrice != null ->
                            generator.writeObject(value.newFloatingPackagePrice)
                        value.newFloatingMatrixPrice != null ->
                            generator.writeObject(value.newFloatingMatrixPrice)
                        value.newFloatingMatrixWithAllocationPrice != null ->
                            generator.writeObject(value.newFloatingMatrixWithAllocationPrice)
                        value.newFloatingTieredPrice != null ->
                            generator.writeObject(value.newFloatingTieredPrice)
                        value.newFloatingTieredBpsPrice != null ->
                            generator.writeObject(value.newFloatingTieredBpsPrice)
                        value.newFloatingBpsPrice != null ->
                            generator.writeObject(value.newFloatingBpsPrice)
                        value.newFloatingBulkBpsPrice != null ->
                            generator.writeObject(value.newFloatingBulkBpsPrice)
                        value.newFloatingBulkPrice != null ->
                            generator.writeObject(value.newFloatingBulkPrice)
                        value.newFloatingThresholdTotalAmountPrice != null ->
                            generator.writeObject(value.newFloatingThresholdTotalAmountPrice)
                        value.newFloatingTieredPackagePrice != null ->
                            generator.writeObject(value.newFloatingTieredPackagePrice)
                        value.newFloatingGroupedTieredPrice != null ->
                            generator.writeObject(value.newFloatingGroupedTieredPrice)
                        value.newFloatingTieredWithMinimumPrice != null ->
                            generator.writeObject(value.newFloatingTieredWithMinimumPrice)
                        value.newFloatingPackageWithAllocationPrice != null ->
                            generator.writeObject(value.newFloatingPackageWithAllocationPrice)
                        value.newFloatingTieredPackageWithMinimumPrice != null ->
                            generator.writeObject(value.newFloatingTieredPackageWithMinimumPrice)
                        value.newFloatingUnitWithPercentPrice != null ->
                            generator.writeObject(value.newFloatingUnitWithPercentPrice)
                        value.newFloatingTieredWithProrationPrice != null ->
                            generator.writeObject(value.newFloatingTieredWithProrationPrice)
                        value.newFloatingUnitWithProrationPrice != null ->
                            generator.writeObject(value.newFloatingUnitWithProrationPrice)
                        value.newFloatingGroupedAllocationPrice != null ->
                            generator.writeObject(value.newFloatingGroupedAllocationPrice)
                        value.newFloatingGroupedWithProratedMinimumPrice != null ->
                            generator.writeObject(value.newFloatingGroupedWithProratedMinimumPrice)
                        value.newFloatingGroupedWithMeteredMinimumPrice != null ->
                            generator.writeObject(value.newFloatingGroupedWithMeteredMinimumPrice)
                        value.newFloatingMatrixWithDisplayNamePrice != null ->
                            generator.writeObject(value.newFloatingMatrixWithDisplayNamePrice)
                        value.newFloatingBulkWithProrationPrice != null ->
                            generator.writeObject(value.newFloatingBulkWithProrationPrice)
                        value.newFloatingGroupedTieredPackagePrice != null ->
                            generator.writeObject(value.newFloatingGroupedTieredPackagePrice)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @NoAutoDetect
            class NewFloatingUnitPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("unit_config") private val unitConfig: UnitConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("unit_config") fun unitConfig(): UnitConfig = unitConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var unitConfig: UnitConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingUnitPrice: NewFloatingUnitPrice) = apply {
                        metadata = newFloatingUnitPrice.metadata
                        externalPriceId = newFloatingUnitPrice.externalPriceId
                        name = newFloatingUnitPrice.name
                        billableMetricId = newFloatingUnitPrice.billableMetricId
                        itemId = newFloatingUnitPrice.itemId
                        billedInAdvance = newFloatingUnitPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingUnitPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitPrice.invoiceGroupingKey
                        cadence = newFloatingUnitPrice.cadence
                        billingCycleConfiguration = newFloatingUnitPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingUnitPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingUnitPrice.conversionRate
                        modelType = newFloatingUnitPrice.modelType
                        unitConfig = newFloatingUnitPrice.unitConfig
                        currency = newFloatingUnitPrice.currency
                        additionalProperties =
                            newFloatingUnitPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun unitConfig(unitConfig: UnitConfig) = apply { this.unitConfig = unitConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitPrice =
                        NewFloatingUnitPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(unitConfig) { "`unitConfig` is required but was not set" },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT = of("unit")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT,
                    }

                    enum class Value {
                        UNIT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("unit_amount") private val unitAmount: String,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Rate per unit of usage */
                    @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var unitAmount: String? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            unitAmount = unitConfig.unitAmount
                            additionalProperties = unitConfig.additionalProperties.toMutableMap()
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = apply { this.unitAmount = unitAmount }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitConfig =
                            UnitConfig(
                                checkNotNull(unitAmount) {
                                    "`unitAmount` is required but was not set"
                                },
                                additionalProperties.toImmutable()
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && unitConfig == other.unitConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitConfig=$unitConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("package_config") private val packageConfig: PackageConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("package_config") fun packageConfig(): PackageConfig = packageConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var packageConfig: PackageConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingPackagePrice: NewFloatingPackagePrice) = apply {
                        metadata = newFloatingPackagePrice.metadata
                        externalPriceId = newFloatingPackagePrice.externalPriceId
                        name = newFloatingPackagePrice.name
                        billableMetricId = newFloatingPackagePrice.billableMetricId
                        itemId = newFloatingPackagePrice.itemId
                        billedInAdvance = newFloatingPackagePrice.billedInAdvance
                        fixedPriceQuantity = newFloatingPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingPackagePrice.invoiceGroupingKey
                        cadence = newFloatingPackagePrice.cadence
                        billingCycleConfiguration =
                            newFloatingPackagePrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingPackagePrice.invoicingCycleConfiguration
                        conversionRate = newFloatingPackagePrice.conversionRate
                        modelType = newFloatingPackagePrice.modelType
                        packageConfig = newFloatingPackagePrice.packageConfig
                        currency = newFloatingPackagePrice.currency
                        additionalProperties =
                            newFloatingPackagePrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun packageConfig(packageConfig: PackageConfig) = apply {
                        this.packageConfig = packageConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingPackagePrice =
                        NewFloatingPackagePrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(packageConfig) {
                                "`packageConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE = of("package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE,
                    }

                    enum class Value {
                        PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("package_amount") private val packageAmount: String,
                    @JsonProperty("package_size") private val packageSize: Long,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** A currency amount to rate usage by */
                    @JsonProperty("package_amount") fun packageAmount(): String = packageAmount

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    @JsonProperty("package_size") fun packageSize(): Long = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var packageAmount: String? = null
                        private var packageSize: Long? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            packageAmount = packageConfig.packageAmount
                            packageSize = packageConfig.packageSize
                            additionalProperties = packageConfig.additionalProperties.toMutableMap()
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageConfig =
                            PackageConfig(
                                checkNotNull(packageAmount) {
                                    "`packageAmount` is required but was not set"
                                },
                                checkNotNull(packageSize) {
                                    "`packageSize` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingPackagePrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && packageConfig == other.packageConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, packageConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingPackagePrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, packageConfig=$packageConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("matrix_config") private val matrixConfig: MatrixConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("matrix_config") fun matrixConfig(): MatrixConfig = matrixConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var matrixConfig: MatrixConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingMatrixPrice: NewFloatingMatrixPrice) = apply {
                        metadata = newFloatingMatrixPrice.metadata
                        externalPriceId = newFloatingMatrixPrice.externalPriceId
                        name = newFloatingMatrixPrice.name
                        billableMetricId = newFloatingMatrixPrice.billableMetricId
                        itemId = newFloatingMatrixPrice.itemId
                        billedInAdvance = newFloatingMatrixPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingMatrixPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingMatrixPrice.invoiceGroupingKey
                        cadence = newFloatingMatrixPrice.cadence
                        billingCycleConfiguration = newFloatingMatrixPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingMatrixPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingMatrixPrice.conversionRate
                        modelType = newFloatingMatrixPrice.modelType
                        matrixConfig = newFloatingMatrixPrice.matrixConfig
                        currency = newFloatingMatrixPrice.currency
                        additionalProperties =
                            newFloatingMatrixPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun matrixConfig(matrixConfig: MatrixConfig) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixPrice =
                        NewFloatingMatrixPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(matrixConfig) {
                                "`matrixConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("dimensions") private val dimensions: List<String?>,
                    @JsonProperty("default_unit_amount") private val defaultUnitAmount: String,
                    @JsonProperty("matrix_values") private val matrixValues: List<MatrixValue>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions") fun dimensions(): List<String?> = dimensions

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    fun defaultUnitAmount(): String = defaultUnitAmount

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    fun matrixValues(): List<MatrixValue> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var dimensions: List<String?>? = null
                        private var defaultUnitAmount: String? = null
                        private var matrixValues: List<MatrixValue>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            dimensions = matrixConfig.dimensions.toMutableList()
                            defaultUnitAmount = matrixConfig.defaultUnitAmount
                            matrixValues = matrixConfig.matrixValues.toMutableList()
                            additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) = apply {
                            this.dimensions = dimensions
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) = apply {
                            this.matrixValues = matrixValues
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                checkNotNull(dimensions) {
                                        "`dimensions` is required but was not set"
                                    }
                                    .toImmutable(),
                                checkNotNull(defaultUnitAmount) {
                                    "`defaultUnitAmount` is required but was not set"
                                },
                                checkNotNull(matrixValues) {
                                        "`matrixValues` is required but was not set"
                                    }
                                    .toImmutable(),
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonProperty("dimension_values")
                        private val dimensionValues: List<String?>,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        fun dimensionValues(): List<String?> = dimensionValues

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var unitAmount: String? = null
                            private var dimensionValues: List<String?>? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                unitAmount = matrixValue.unitAmount
                                dimensionValues = matrixValue.dimensionValues.toMutableList()
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) = apply {
                                this.dimensionValues = dimensionValues
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    checkNotNull(dimensionValues) {
                                            "`dimensionValues` is required but was not set"
                                        }
                                        .toImmutable(),
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && unitAmount == other.unitAmount && dimensionValues == other.dimensionValues && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(unitAmount, dimensionValues, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{unitAmount=$unitAmount, dimensionValues=$dimensionValues, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && dimensions == other.dimensions && defaultUnitAmount == other.defaultUnitAmount && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(dimensions, defaultUnitAmount, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixConfig{dimensions=$dimensions, defaultUnitAmount=$defaultUnitAmount, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX = of("matrix")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX,
                    }

                    enum class Value {
                        MATRIX,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && matrixConfig == other.matrixConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, matrixConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, matrixConfig=$matrixConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("matrix_with_allocation_config")
                private val matrixWithAllocationConfig: MatrixWithAllocationConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("matrix_with_allocation_config")
                fun matrixWithAllocationConfig(): MatrixWithAllocationConfig =
                    matrixWithAllocationConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var matrixWithAllocationConfig: MatrixWithAllocationConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingMatrixWithAllocationPrice: NewFloatingMatrixWithAllocationPrice
                    ) = apply {
                        metadata = newFloatingMatrixWithAllocationPrice.metadata
                        externalPriceId = newFloatingMatrixWithAllocationPrice.externalPriceId
                        name = newFloatingMatrixWithAllocationPrice.name
                        billableMetricId = newFloatingMatrixWithAllocationPrice.billableMetricId
                        itemId = newFloatingMatrixWithAllocationPrice.itemId
                        billedInAdvance = newFloatingMatrixWithAllocationPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingMatrixWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingMatrixWithAllocationPrice.invoiceGroupingKey
                        cadence = newFloatingMatrixWithAllocationPrice.cadence
                        billingCycleConfiguration =
                            newFloatingMatrixWithAllocationPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingMatrixWithAllocationPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingMatrixWithAllocationPrice.conversionRate
                        modelType = newFloatingMatrixWithAllocationPrice.modelType
                        matrixWithAllocationConfig =
                            newFloatingMatrixWithAllocationPrice.matrixWithAllocationConfig
                        currency = newFloatingMatrixWithAllocationPrice.currency
                        additionalProperties =
                            newFloatingMatrixWithAllocationPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun matrixWithAllocationConfig(
                        matrixWithAllocationConfig: MatrixWithAllocationConfig
                    ) = apply { this.matrixWithAllocationConfig = matrixWithAllocationConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixWithAllocationPrice =
                        NewFloatingMatrixWithAllocationPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(matrixWithAllocationConfig) {
                                "`matrixWithAllocationConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("dimensions") private val dimensions: List<String?>,
                    @JsonProperty("default_unit_amount") private val defaultUnitAmount: String,
                    @JsonProperty("matrix_values") private val matrixValues: List<MatrixValue>,
                    @JsonProperty("allocation") private val allocation: Double,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions") fun dimensions(): List<String?> = dimensions

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    fun defaultUnitAmount(): String = defaultUnitAmount

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    fun matrixValues(): List<MatrixValue> = matrixValues

                    /** Allocation to be used to calculate the price */
                    @JsonProperty("allocation") fun allocation(): Double = allocation

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var dimensions: List<String?>? = null
                        private var defaultUnitAmount: String? = null
                        private var matrixValues: List<MatrixValue>? = null
                        private var allocation: Double? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixWithAllocationConfig: MatrixWithAllocationConfig) =
                            apply {
                                dimensions = matrixWithAllocationConfig.dimensions.toMutableList()
                                defaultUnitAmount = matrixWithAllocationConfig.defaultUnitAmount
                                matrixValues =
                                    matrixWithAllocationConfig.matrixValues.toMutableList()
                                allocation = matrixWithAllocationConfig.allocation
                                additionalProperties =
                                    matrixWithAllocationConfig.additionalProperties.toMutableMap()
                            }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) = apply {
                            this.dimensions = dimensions
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) = apply {
                            this.matrixValues = matrixValues
                        }

                        /** Allocation to be used to calculate the price */
                        fun allocation(allocation: Double) = apply { this.allocation = allocation }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixWithAllocationConfig =
                            MatrixWithAllocationConfig(
                                checkNotNull(dimensions) {
                                        "`dimensions` is required but was not set"
                                    }
                                    .toImmutable(),
                                checkNotNull(defaultUnitAmount) {
                                    "`defaultUnitAmount` is required but was not set"
                                },
                                checkNotNull(matrixValues) {
                                        "`matrixValues` is required but was not set"
                                    }
                                    .toImmutable(),
                                checkNotNull(allocation) {
                                    "`allocation` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonProperty("dimension_values")
                        private val dimensionValues: List<String?>,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        fun dimensionValues(): List<String?> = dimensionValues

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var unitAmount: String? = null
                            private var dimensionValues: List<String?>? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                unitAmount = matrixValue.unitAmount
                                dimensionValues = matrixValue.dimensionValues.toMutableList()
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) = apply {
                                this.dimensionValues = dimensionValues
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    checkNotNull(dimensionValues) {
                                            "`dimensionValues` is required but was not set"
                                        }
                                        .toImmutable(),
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && unitAmount == other.unitAmount && dimensionValues == other.dimensionValues && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(unitAmount, dimensionValues, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{unitAmount=$unitAmount, dimensionValues=$dimensionValues, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixWithAllocationConfig && dimensions == other.dimensions && defaultUnitAmount == other.defaultUnitAmount && matrixValues == other.matrixValues && allocation == other.allocation && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(dimensions, defaultUnitAmount, matrixValues, allocation, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixWithAllocationConfig{dimensions=$dimensions, defaultUnitAmount=$defaultUnitAmount, matrixValues=$matrixValues, allocation=$allocation, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX_WITH_ALLOCATION = of("matrix_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX_WITH_ALLOCATION,
                    }

                    enum class Value {
                        MATRIX_WITH_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX_WITH_ALLOCATION -> Value.MATRIX_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX_WITH_ALLOCATION -> Known.MATRIX_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixWithAllocationPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && matrixWithAllocationConfig == other.matrixWithAllocationConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, matrixWithAllocationConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixWithAllocationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, matrixWithAllocationConfig=$matrixWithAllocationConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("tiered_config") private val tieredConfig: TieredConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("tiered_config") fun tieredConfig(): TieredConfig = tieredConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var tieredConfig: TieredConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingTieredPrice: NewFloatingTieredPrice) = apply {
                        metadata = newFloatingTieredPrice.metadata
                        externalPriceId = newFloatingTieredPrice.externalPriceId
                        name = newFloatingTieredPrice.name
                        billableMetricId = newFloatingTieredPrice.billableMetricId
                        itemId = newFloatingTieredPrice.itemId
                        billedInAdvance = newFloatingTieredPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingTieredPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredPrice.invoiceGroupingKey
                        cadence = newFloatingTieredPrice.cadence
                        billingCycleConfiguration = newFloatingTieredPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingTieredPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingTieredPrice.conversionRate
                        modelType = newFloatingTieredPrice.modelType
                        tieredConfig = newFloatingTieredPrice.tieredConfig
                        currency = newFloatingTieredPrice.currency
                        additionalProperties =
                            newFloatingTieredPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun tieredConfig(tieredConfig: TieredConfig) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPrice =
                        NewFloatingTieredPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(tieredConfig) {
                                "`tieredConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED = of("tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED,
                    }

                    enum class Value {
                        TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: List<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            tiers = tieredConfig.tiers.toMutableList()
                            additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredConfig =
                            TieredConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("first_unit") private val firstUnit: Double,
                        @JsonProperty("last_unit") private val lastUnit: Double?,
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Inclusive tier starting value */
                        @JsonProperty("first_unit") fun firstUnit(): Double = firstUnit

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        @JsonProperty("last_unit")
                        fun lastUnit(): Optional<Double> = Optional.ofNullable(lastUnit)

                        /** Amount per unit */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var firstUnit: Double? = null
                            private var lastUnit: Double? = null
                            private var unitAmount: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                firstUnit = tier.firstUnit
                                lastUnit = tier.lastUnit
                                unitAmount = tier.unitAmount
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = apply { this.firstUnit = firstUnit }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double) = apply { this.lastUnit = lastUnit }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(firstUnit) {
                                        "`firstUnit` is required but was not set"
                                    },
                                    lastUnit,
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && lastUnit == other.lastUnit && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(firstUnit, lastUnit, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, lastUnit=$lastUnit, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && tieredConfig == other.tieredConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredConfig=$tieredConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("tiered_bps_config") private val tieredBpsConfig: TieredBpsConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("tiered_bps_config")
                fun tieredBpsConfig(): TieredBpsConfig = tieredBpsConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var tieredBpsConfig: TieredBpsConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice) =
                        apply {
                            metadata = newFloatingTieredBpsPrice.metadata
                            externalPriceId = newFloatingTieredBpsPrice.externalPriceId
                            name = newFloatingTieredBpsPrice.name
                            billableMetricId = newFloatingTieredBpsPrice.billableMetricId
                            itemId = newFloatingTieredBpsPrice.itemId
                            billedInAdvance = newFloatingTieredBpsPrice.billedInAdvance
                            fixedPriceQuantity = newFloatingTieredBpsPrice.fixedPriceQuantity
                            invoiceGroupingKey = newFloatingTieredBpsPrice.invoiceGroupingKey
                            cadence = newFloatingTieredBpsPrice.cadence
                            billingCycleConfiguration =
                                newFloatingTieredBpsPrice.billingCycleConfiguration
                            invoicingCycleConfiguration =
                                newFloatingTieredBpsPrice.invoicingCycleConfiguration
                            conversionRate = newFloatingTieredBpsPrice.conversionRate
                            modelType = newFloatingTieredBpsPrice.modelType
                            tieredBpsConfig = newFloatingTieredBpsPrice.tieredBpsConfig
                            currency = newFloatingTieredBpsPrice.currency
                            additionalProperties =
                                newFloatingTieredBpsPrice.additionalProperties.toMutableMap()
                        }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredBpsPrice =
                        NewFloatingTieredBpsPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(tieredBpsConfig) {
                                "`tieredBpsConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_BPS = of("tiered_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_BPS,
                    }

                    enum class Value {
                        TIERED_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: List<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            tiers = tieredBpsConfig.tiers.toMutableList()
                            additionalProperties =
                                tieredBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("minimum_amount") private val minimumAmount: String,
                        @JsonProperty("maximum_amount") private val maximumAmount: String?,
                        @JsonProperty("bps") private val bps: Double,
                        @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Inclusive tier starting value */
                        @JsonProperty("minimum_amount") fun minimumAmount(): String = minimumAmount

                        /** Exclusive tier ending value */
                        @JsonProperty("maximum_amount")
                        fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount)

                        /** Per-event basis point rate */
                        @JsonProperty("bps") fun bps(): Double = bps

                        /** Per unit maximum to charge */
                        @JsonProperty("per_unit_maximum")
                        fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var minimumAmount: String? = null
                            private var maximumAmount: String? = null
                            private var bps: Double? = null
                            private var perUnitMaximum: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                minimumAmount = tier.minimumAmount
                                maximumAmount = tier.maximumAmount
                                bps = tier.bps
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = apply { this.bps = bps }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkNotNull(minimumAmount) {
                                        "`minimumAmount` is required but was not set"
                                    },
                                    maximumAmount,
                                    checkNotNull(bps) { "`bps` is required but was not set" },
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(minimumAmount, maximumAmount, bps, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredBpsPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && tieredBpsConfig == other.tieredBpsConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredBpsConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredBpsConfig=$tieredBpsConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("bps_config") private val bpsConfig: BpsConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("bps_config") fun bpsConfig(): BpsConfig = bpsConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var bpsConfig: BpsConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBpsPrice: NewFloatingBpsPrice) = apply {
                        metadata = newFloatingBpsPrice.metadata
                        externalPriceId = newFloatingBpsPrice.externalPriceId
                        name = newFloatingBpsPrice.name
                        billableMetricId = newFloatingBpsPrice.billableMetricId
                        itemId = newFloatingBpsPrice.itemId
                        billedInAdvance = newFloatingBpsPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBpsPrice.invoiceGroupingKey
                        cadence = newFloatingBpsPrice.cadence
                        billingCycleConfiguration = newFloatingBpsPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingBpsPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingBpsPrice.conversionRate
                        modelType = newFloatingBpsPrice.modelType
                        bpsConfig = newFloatingBpsPrice.bpsConfig
                        currency = newFloatingBpsPrice.currency
                        additionalProperties =
                            newFloatingBpsPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun bpsConfig(bpsConfig: BpsConfig) = apply { this.bpsConfig = bpsConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBpsPrice =
                        NewFloatingBpsPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(bpsConfig) { "`bpsConfig` is required but was not set" },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("bps") private val bps: Double,
                    @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Basis point take rate per event */
                    @JsonProperty("bps") fun bps(): Double = bps

                    /** Optional currency amount maximum to cap spend per event */
                    @JsonProperty("per_unit_maximum")
                    fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var bps: Double? = null
                        private var perUnitMaximum: String? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            bps = bpsConfig.bps
                            perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BpsConfig =
                            BpsConfig(
                                checkNotNull(bps) { "`bps` is required but was not set" },
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BPS = of("bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BPS,
                    }

                    enum class Value {
                        BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBpsPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && bpsConfig == other.bpsConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bpsConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bpsConfig=$bpsConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("bulk_bps_config") private val bulkBpsConfig: BulkBpsConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("bulk_bps_config") fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var bulkBpsConfig: BulkBpsConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice) = apply {
                        metadata = newFloatingBulkBpsPrice.metadata
                        externalPriceId = newFloatingBulkBpsPrice.externalPriceId
                        name = newFloatingBulkBpsPrice.name
                        billableMetricId = newFloatingBulkBpsPrice.billableMetricId
                        itemId = newFloatingBulkBpsPrice.itemId
                        billedInAdvance = newFloatingBulkBpsPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingBulkBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkBpsPrice.invoiceGroupingKey
                        cadence = newFloatingBulkBpsPrice.cadence
                        billingCycleConfiguration =
                            newFloatingBulkBpsPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingBulkBpsPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingBulkBpsPrice.conversionRate
                        modelType = newFloatingBulkBpsPrice.modelType
                        bulkBpsConfig = newFloatingBulkBpsPrice.bulkBpsConfig
                        currency = newFloatingBulkBpsPrice.currency
                        additionalProperties =
                            newFloatingBulkBpsPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkBpsPrice =
                        NewFloatingBulkBpsPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(bulkBpsConfig) {
                                "`bulkBpsConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: List<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            tiers = bulkBpsConfig.tiers.toMutableList()
                            additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("maximum_amount") private val maximumAmount: String?,
                        @JsonProperty("bps") private val bps: Double,
                        @JsonProperty("per_unit_maximum") private val perUnitMaximum: String?,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Upper bound for tier */
                        @JsonProperty("maximum_amount")
                        fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount)

                        /** Basis points to rate on */
                        @JsonProperty("bps") fun bps(): Double = bps

                        /** The maximum amount to charge for any one event */
                        @JsonProperty("per_unit_maximum")
                        fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum)

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var maximumAmount: String? = null
                            private var bps: Double? = null
                            private var perUnitMaximum: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                maximumAmount = tier.maximumAmount
                                bps = tier.bps
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = apply { this.bps = bps }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    maximumAmount,
                                    checkNotNull(bps) { "`bps` is required but was not set" },
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && maximumAmount == other.maximumAmount && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(maximumAmount, bps, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{maximumAmount=$maximumAmount, bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_BPS = of("bulk_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_BPS,
                    }

                    enum class Value {
                        BULK_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkBpsPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && bulkBpsConfig == other.bulkBpsConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkBpsConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkBpsPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkBpsConfig=$bulkBpsConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("bulk_config") private val bulkConfig: BulkConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("bulk_config") fun bulkConfig(): BulkConfig = bulkConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var bulkConfig: BulkConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBulkPrice: NewFloatingBulkPrice) = apply {
                        metadata = newFloatingBulkPrice.metadata
                        externalPriceId = newFloatingBulkPrice.externalPriceId
                        name = newFloatingBulkPrice.name
                        billableMetricId = newFloatingBulkPrice.billableMetricId
                        itemId = newFloatingBulkPrice.itemId
                        billedInAdvance = newFloatingBulkPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkPrice.invoiceGroupingKey
                        cadence = newFloatingBulkPrice.cadence
                        billingCycleConfiguration = newFloatingBulkPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingBulkPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingBulkPrice.conversionRate
                        modelType = newFloatingBulkPrice.modelType
                        bulkConfig = newFloatingBulkPrice.bulkConfig
                        currency = newFloatingBulkPrice.currency
                        additionalProperties =
                            newFloatingBulkPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun bulkConfig(bulkConfig: BulkConfig) = apply { this.bulkConfig = bulkConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkPrice =
                        NewFloatingBulkPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(bulkConfig) { "`bulkConfig` is required but was not set" },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers") private val tiers: List<Tier>,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Bulk tiers for rating based on total usage volume */
                    @JsonProperty("tiers") fun tiers(): List<Tier> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: List<Tier>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            tiers = bulkConfig.tiers.toMutableList()
                            additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = apply { this.tiers = tiers }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkConfig =
                            BulkConfig(
                                checkNotNull(tiers) { "`tiers` is required but was not set" }
                                    .toImmutable(),
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("maximum_units") private val maximumUnits: Double?,
                        @JsonProperty("unit_amount") private val unitAmount: String,
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Upper bound for this tier */
                        @JsonProperty("maximum_units")
                        fun maximumUnits(): Optional<Double> = Optional.ofNullable(maximumUnits)

                        /** Amount per unit */
                        @JsonProperty("unit_amount") fun unitAmount(): String = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var maximumUnits: Double? = null
                            private var unitAmount: String? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                maximumUnits = tier.maximumUnits
                                unitAmount = tier.unitAmount
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    maximumUnits,
                                    checkNotNull(unitAmount) {
                                        "`unitAmount` is required but was not set"
                                    },
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && maximumUnits == other.maximumUnits && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(maximumUnits, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{maximumUnits=$maximumUnits, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK = of("bulk")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK,
                    }

                    enum class Value {
                        BULK,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && bulkConfig == other.bulkConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkConfig=$bulkConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingThresholdTotalAmountPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("threshold_total_amount_config")
                private val thresholdTotalAmountConfig: ThresholdTotalAmountConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("threshold_total_amount_config")
                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var thresholdTotalAmountConfig: ThresholdTotalAmountConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingThresholdTotalAmountPrice: NewFloatingThresholdTotalAmountPrice
                    ) = apply {
                        metadata = newFloatingThresholdTotalAmountPrice.metadata
                        externalPriceId = newFloatingThresholdTotalAmountPrice.externalPriceId
                        name = newFloatingThresholdTotalAmountPrice.name
                        billableMetricId = newFloatingThresholdTotalAmountPrice.billableMetricId
                        itemId = newFloatingThresholdTotalAmountPrice.itemId
                        billedInAdvance = newFloatingThresholdTotalAmountPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingThresholdTotalAmountPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingThresholdTotalAmountPrice.invoiceGroupingKey
                        cadence = newFloatingThresholdTotalAmountPrice.cadence
                        billingCycleConfiguration =
                            newFloatingThresholdTotalAmountPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingThresholdTotalAmountPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingThresholdTotalAmountPrice.conversionRate
                        modelType = newFloatingThresholdTotalAmountPrice.modelType
                        thresholdTotalAmountConfig =
                            newFloatingThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        currency = newFloatingThresholdTotalAmountPrice.currency
                        additionalProperties =
                            newFloatingThresholdTotalAmountPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingThresholdTotalAmountPrice =
                        NewFloatingThresholdTotalAmountPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(thresholdTotalAmountConfig) {
                                "`thresholdTotalAmountConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val THRESHOLD_TOTAL_AMOUNT = of("threshold_total_amount")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT,
                    }

                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ThresholdTotalAmountConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties =
                                    thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingThresholdTotalAmountPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, thresholdTotalAmountConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingThresholdTotalAmountPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("tiered_package_config")
                private val tieredPackageConfig: TieredPackageConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("tiered_package_config")
                fun tieredPackageConfig(): TieredPackageConfig = tieredPackageConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var tieredPackageConfig: TieredPackageConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice
                    ) = apply {
                        metadata = newFloatingTieredPackagePrice.metadata
                        externalPriceId = newFloatingTieredPackagePrice.externalPriceId
                        name = newFloatingTieredPackagePrice.name
                        billableMetricId = newFloatingTieredPackagePrice.billableMetricId
                        itemId = newFloatingTieredPackagePrice.itemId
                        billedInAdvance = newFloatingTieredPackagePrice.billedInAdvance
                        fixedPriceQuantity = newFloatingTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredPackagePrice.invoiceGroupingKey
                        cadence = newFloatingTieredPackagePrice.cadence
                        billingCycleConfiguration =
                            newFloatingTieredPackagePrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingTieredPackagePrice.invoicingCycleConfiguration
                        conversionRate = newFloatingTieredPackagePrice.conversionRate
                        modelType = newFloatingTieredPackagePrice.modelType
                        tieredPackageConfig = newFloatingTieredPackagePrice.tieredPackageConfig
                        currency = newFloatingTieredPackagePrice.currency
                        additionalProperties =
                            newFloatingTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) = apply {
                        this.tieredPackageConfig = tieredPackageConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPackagePrice =
                        NewFloatingTieredPackagePrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(tieredPackageConfig) {
                                "`tieredPackageConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_PACKAGE = of("tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_PACKAGE,
                    }

                    enum class Value {
                        TIERED_PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties =
                                tieredPackageConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPackagePrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && tieredPackageConfig == other.tieredPackageConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredPackageConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPackagePrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredPackageConfig=$tieredPackageConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("grouped_tiered_config")
                private val groupedTieredConfig: GroupedTieredConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("grouped_tiered_config")
                fun groupedTieredConfig(): GroupedTieredConfig = groupedTieredConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var groupedTieredConfig: GroupedTieredConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice
                    ) = apply {
                        metadata = newFloatingGroupedTieredPrice.metadata
                        externalPriceId = newFloatingGroupedTieredPrice.externalPriceId
                        name = newFloatingGroupedTieredPrice.name
                        billableMetricId = newFloatingGroupedTieredPrice.billableMetricId
                        itemId = newFloatingGroupedTieredPrice.itemId
                        billedInAdvance = newFloatingGroupedTieredPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingGroupedTieredPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedTieredPrice.invoiceGroupingKey
                        cadence = newFloatingGroupedTieredPrice.cadence
                        billingCycleConfiguration =
                            newFloatingGroupedTieredPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingGroupedTieredPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingGroupedTieredPrice.conversionRate
                        modelType = newFloatingGroupedTieredPrice.modelType
                        groupedTieredConfig = newFloatingGroupedTieredPrice.groupedTieredConfig
                        currency = newFloatingGroupedTieredPrice.currency
                        additionalProperties =
                            newFloatingGroupedTieredPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun groupedTieredConfig(groupedTieredConfig: GroupedTieredConfig) = apply {
                        this.groupedTieredConfig = groupedTieredConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedTieredPrice =
                        NewFloatingGroupedTieredPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(groupedTieredConfig) {
                                "`groupedTieredConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedTieredConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedTieredConfig: GroupedTieredConfig) = apply {
                            additionalProperties =
                                groupedTieredConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedTieredConfig =
                            GroupedTieredConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedTieredConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedTieredConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_TIERED = of("grouped_tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_TIERED,
                    }

                    enum class Value {
                        GROUPED_TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_TIERED -> Value.GROUPED_TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_TIERED -> Known.GROUPED_TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedTieredPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && groupedTieredConfig == other.groupedTieredConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedTieredConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedTieredPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedTieredConfig=$groupedTieredConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("tiered_with_minimum_config")
                private val tieredWithMinimumConfig: TieredWithMinimumConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("tiered_with_minimum_config")
                fun tieredWithMinimumConfig(): TieredWithMinimumConfig = tieredWithMinimumConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var tieredWithMinimumConfig: TieredWithMinimumConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice
                    ) = apply {
                        metadata = newFloatingTieredWithMinimumPrice.metadata
                        externalPriceId = newFloatingTieredWithMinimumPrice.externalPriceId
                        name = newFloatingTieredWithMinimumPrice.name
                        billableMetricId = newFloatingTieredWithMinimumPrice.billableMetricId
                        itemId = newFloatingTieredWithMinimumPrice.itemId
                        billedInAdvance = newFloatingTieredWithMinimumPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingTieredWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredWithMinimumPrice.invoiceGroupingKey
                        cadence = newFloatingTieredWithMinimumPrice.cadence
                        billingCycleConfiguration =
                            newFloatingTieredWithMinimumPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingTieredWithMinimumPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingTieredWithMinimumPrice.conversionRate
                        modelType = newFloatingTieredWithMinimumPrice.modelType
                        tieredWithMinimumConfig =
                            newFloatingTieredWithMinimumPrice.tieredWithMinimumConfig
                        currency = newFloatingTieredWithMinimumPrice.currency
                        additionalProperties =
                            newFloatingTieredWithMinimumPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        apply {
                            this.tieredWithMinimumConfig = tieredWithMinimumConfig
                        }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredWithMinimumPrice =
                        NewFloatingTieredWithMinimumPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(tieredWithMinimumConfig) {
                                "`tieredWithMinimumConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_MINIMUM = of("tiered_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_MINIMUM,
                    }

                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithMinimumConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredWithMinimumPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && tieredWithMinimumConfig == other.tieredWithMinimumConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredWithMinimumConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredWithMinimumPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredWithMinimumConfig=$tieredWithMinimumConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingPackageWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("package_with_allocation_config")
                private val packageWithAllocationConfig: PackageWithAllocationConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("package_with_allocation_config")
                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var packageWithAllocationConfig: PackageWithAllocationConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingPackageWithAllocationPrice: NewFloatingPackageWithAllocationPrice
                    ) = apply {
                        metadata = newFloatingPackageWithAllocationPrice.metadata
                        externalPriceId = newFloatingPackageWithAllocationPrice.externalPriceId
                        name = newFloatingPackageWithAllocationPrice.name
                        billableMetricId = newFloatingPackageWithAllocationPrice.billableMetricId
                        itemId = newFloatingPackageWithAllocationPrice.itemId
                        billedInAdvance = newFloatingPackageWithAllocationPrice.billedInAdvance
                        fixedPriceQuantity =
                            newFloatingPackageWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingPackageWithAllocationPrice.invoiceGroupingKey
                        cadence = newFloatingPackageWithAllocationPrice.cadence
                        billingCycleConfiguration =
                            newFloatingPackageWithAllocationPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingPackageWithAllocationPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingPackageWithAllocationPrice.conversionRate
                        modelType = newFloatingPackageWithAllocationPrice.modelType
                        packageWithAllocationConfig =
                            newFloatingPackageWithAllocationPrice.packageWithAllocationConfig
                        currency = newFloatingPackageWithAllocationPrice.currency
                        additionalProperties =
                            newFloatingPackageWithAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingPackageWithAllocationPrice =
                        NewFloatingPackageWithAllocationPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(packageWithAllocationConfig) {
                                "`packageWithAllocationConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE_WITH_ALLOCATION = of("package_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE_WITH_ALLOCATION,
                    }

                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties =
                                packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingPackageWithAllocationPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && packageWithAllocationConfig == other.packageWithAllocationConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, packageWithAllocationConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingPackageWithAllocationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, packageWithAllocationConfig=$packageWithAllocationConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPackageWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("tiered_package_with_minimum_config")
                private val tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("tiered_package_with_minimum_config")
                fun tieredPackageWithMinimumConfig(): TieredPackageWithMinimumConfig =
                    tieredPackageWithMinimumConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig? =
                        null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredPackageWithMinimumPrice:
                            NewFloatingTieredPackageWithMinimumPrice
                    ) = apply {
                        metadata = newFloatingTieredPackageWithMinimumPrice.metadata
                        externalPriceId = newFloatingTieredPackageWithMinimumPrice.externalPriceId
                        name = newFloatingTieredPackageWithMinimumPrice.name
                        billableMetricId = newFloatingTieredPackageWithMinimumPrice.billableMetricId
                        itemId = newFloatingTieredPackageWithMinimumPrice.itemId
                        billedInAdvance = newFloatingTieredPackageWithMinimumPrice.billedInAdvance
                        fixedPriceQuantity =
                            newFloatingTieredPackageWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingTieredPackageWithMinimumPrice.invoiceGroupingKey
                        cadence = newFloatingTieredPackageWithMinimumPrice.cadence
                        billingCycleConfiguration =
                            newFloatingTieredPackageWithMinimumPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingTieredPackageWithMinimumPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingTieredPackageWithMinimumPrice.conversionRate
                        modelType = newFloatingTieredPackageWithMinimumPrice.modelType
                        tieredPackageWithMinimumConfig =
                            newFloatingTieredPackageWithMinimumPrice.tieredPackageWithMinimumConfig
                        currency = newFloatingTieredPackageWithMinimumPrice.currency
                        additionalProperties =
                            newFloatingTieredPackageWithMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun tieredPackageWithMinimumConfig(
                        tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig
                    ) = apply {
                        this.tieredPackageWithMinimumConfig = tieredPackageWithMinimumConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPackageWithMinimumPrice =
                        NewFloatingTieredPackageWithMinimumPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(tieredPackageWithMinimumConfig) {
                                "`tieredPackageWithMinimumConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val TIERED_PACKAGE_WITH_MINIMUM = of("tiered_package_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_PACKAGE_WITH_MINIMUM,
                    }

                    enum class Value {
                        TIERED_PACKAGE_WITH_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE_WITH_MINIMUM -> Value.TIERED_PACKAGE_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE_WITH_MINIMUM -> Known.TIERED_PACKAGE_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig
                        ) = apply {
                            additionalProperties =
                                tieredPackageWithMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageWithMinimumConfig =
                            TieredPackageWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPackageWithMinimumPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && tieredPackageWithMinimumConfig == other.tieredPackageWithMinimumConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredPackageWithMinimumConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPackageWithMinimumPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredPackageWithMinimumConfig=$tieredPackageWithMinimumConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingUnitWithPercentPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("unit_with_percent_config")
                private val unitWithPercentConfig: UnitWithPercentConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("unit_with_percent_config")
                fun unitWithPercentConfig(): UnitWithPercentConfig = unitWithPercentConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var unitWithPercentConfig: UnitWithPercentConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice
                    ) = apply {
                        metadata = newFloatingUnitWithPercentPrice.metadata
                        externalPriceId = newFloatingUnitWithPercentPrice.externalPriceId
                        name = newFloatingUnitWithPercentPrice.name
                        billableMetricId = newFloatingUnitWithPercentPrice.billableMetricId
                        itemId = newFloatingUnitWithPercentPrice.itemId
                        billedInAdvance = newFloatingUnitWithPercentPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingUnitWithPercentPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitWithPercentPrice.invoiceGroupingKey
                        cadence = newFloatingUnitWithPercentPrice.cadence
                        billingCycleConfiguration =
                            newFloatingUnitWithPercentPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingUnitWithPercentPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingUnitWithPercentPrice.conversionRate
                        modelType = newFloatingUnitWithPercentPrice.modelType
                        unitWithPercentConfig =
                            newFloatingUnitWithPercentPrice.unitWithPercentConfig
                        currency = newFloatingUnitWithPercentPrice.currency
                        additionalProperties =
                            newFloatingUnitWithPercentPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        apply {
                            this.unitWithPercentConfig = unitWithPercentConfig
                        }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitWithPercentPrice =
                        NewFloatingUnitWithPercentPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(unitWithPercentConfig) {
                                "`unitWithPercentConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PERCENT = of("unit_with_percent")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PERCENT,
                    }

                    enum class Value {
                        UNIT_WITH_PERCENT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithPercentConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties =
                                unitWithPercentConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitWithPercentPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && unitWithPercentConfig == other.unitWithPercentConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitWithPercentConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitWithPercentPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitWithPercentConfig=$unitWithPercentConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("tiered_with_proration_config")
                private val tieredWithProrationConfig: TieredWithProrationConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("tiered_with_proration_config")
                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var tieredWithProrationConfig: TieredWithProrationConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice
                    ) = apply {
                        metadata = newFloatingTieredWithProrationPrice.metadata
                        externalPriceId = newFloatingTieredWithProrationPrice.externalPriceId
                        name = newFloatingTieredWithProrationPrice.name
                        billableMetricId = newFloatingTieredWithProrationPrice.billableMetricId
                        itemId = newFloatingTieredWithProrationPrice.itemId
                        billedInAdvance = newFloatingTieredWithProrationPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingTieredWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredWithProrationPrice.invoiceGroupingKey
                        cadence = newFloatingTieredWithProrationPrice.cadence
                        billingCycleConfiguration =
                            newFloatingTieredWithProrationPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingTieredWithProrationPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingTieredWithProrationPrice.conversionRate
                        modelType = newFloatingTieredWithProrationPrice.modelType
                        tieredWithProrationConfig =
                            newFloatingTieredWithProrationPrice.tieredWithProrationConfig
                        currency = newFloatingTieredWithProrationPrice.currency
                        additionalProperties =
                            newFloatingTieredWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredWithProrationPrice =
                        NewFloatingTieredWithProrationPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(tieredWithProrationConfig) {
                                "`tieredWithProrationConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_PRORATION = of("tiered_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_PRORATION,
                    }

                    enum class Value {
                        TIERED_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredWithProrationPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && tieredWithProrationConfig == other.tieredWithProrationConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, tieredWithProrationConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, tieredWithProrationConfig=$tieredWithProrationConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingUnitWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("unit_with_proration_config")
                private val unitWithProrationConfig: UnitWithProrationConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("unit_with_proration_config")
                fun unitWithProrationConfig(): UnitWithProrationConfig = unitWithProrationConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var unitWithProrationConfig: UnitWithProrationConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice
                    ) = apply {
                        metadata = newFloatingUnitWithProrationPrice.metadata
                        externalPriceId = newFloatingUnitWithProrationPrice.externalPriceId
                        name = newFloatingUnitWithProrationPrice.name
                        billableMetricId = newFloatingUnitWithProrationPrice.billableMetricId
                        itemId = newFloatingUnitWithProrationPrice.itemId
                        billedInAdvance = newFloatingUnitWithProrationPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingUnitWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitWithProrationPrice.invoiceGroupingKey
                        cadence = newFloatingUnitWithProrationPrice.cadence
                        billingCycleConfiguration =
                            newFloatingUnitWithProrationPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingUnitWithProrationPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingUnitWithProrationPrice.conversionRate
                        modelType = newFloatingUnitWithProrationPrice.modelType
                        unitWithProrationConfig =
                            newFloatingUnitWithProrationPrice.unitWithProrationConfig
                        currency = newFloatingUnitWithProrationPrice.currency
                        additionalProperties =
                            newFloatingUnitWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        apply {
                            this.unitWithProrationConfig = unitWithProrationConfig
                        }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitWithProrationPrice =
                        NewFloatingUnitWithProrationPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(unitWithProrationConfig) {
                                "`unitWithProrationConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PRORATION = of("unit_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PRORATION,
                    }

                    enum class Value {
                        UNIT_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    unitWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitWithProrationPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && unitWithProrationConfig == other.unitWithProrationConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, unitWithProrationConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, unitWithProrationConfig=$unitWithProrationConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("grouped_allocation_config")
                private val groupedAllocationConfig: GroupedAllocationConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("grouped_allocation_config")
                fun groupedAllocationConfig(): GroupedAllocationConfig = groupedAllocationConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var groupedAllocationConfig: GroupedAllocationConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice
                    ) = apply {
                        metadata = newFloatingGroupedAllocationPrice.metadata
                        externalPriceId = newFloatingGroupedAllocationPrice.externalPriceId
                        name = newFloatingGroupedAllocationPrice.name
                        billableMetricId = newFloatingGroupedAllocationPrice.billableMetricId
                        itemId = newFloatingGroupedAllocationPrice.itemId
                        billedInAdvance = newFloatingGroupedAllocationPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingGroupedAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedAllocationPrice.invoiceGroupingKey
                        cadence = newFloatingGroupedAllocationPrice.cadence
                        billingCycleConfiguration =
                            newFloatingGroupedAllocationPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingGroupedAllocationPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingGroupedAllocationPrice.conversionRate
                        modelType = newFloatingGroupedAllocationPrice.modelType
                        groupedAllocationConfig =
                            newFloatingGroupedAllocationPrice.groupedAllocationConfig
                        currency = newFloatingGroupedAllocationPrice.currency
                        additionalProperties =
                            newFloatingGroupedAllocationPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        apply {
                            this.groupedAllocationConfig = groupedAllocationConfig
                        }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedAllocationPrice =
                        NewFloatingGroupedAllocationPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(groupedAllocationConfig) {
                                "`groupedAllocationConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties =
                                    groupedAllocationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_ALLOCATION = of("grouped_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_ALLOCATION,
                    }

                    enum class Value {
                        GROUPED_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedAllocationPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && groupedAllocationConfig == other.groupedAllocationConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedAllocationConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedAllocationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedAllocationConfig=$groupedAllocationConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedWithProratedMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("grouped_with_prorated_minimum_config")
                private val groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("grouped_with_prorated_minimum_config")
                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var groupedWithProratedMinimumConfig:
                        GroupedWithProratedMinimumConfig? =
                        null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedWithProratedMinimumPrice:
                            NewFloatingGroupedWithProratedMinimumPrice
                    ) = apply {
                        metadata = newFloatingGroupedWithProratedMinimumPrice.metadata
                        externalPriceId = newFloatingGroupedWithProratedMinimumPrice.externalPriceId
                        name = newFloatingGroupedWithProratedMinimumPrice.name
                        billableMetricId =
                            newFloatingGroupedWithProratedMinimumPrice.billableMetricId
                        itemId = newFloatingGroupedWithProratedMinimumPrice.itemId
                        billedInAdvance = newFloatingGroupedWithProratedMinimumPrice.billedInAdvance
                        fixedPriceQuantity =
                            newFloatingGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        cadence = newFloatingGroupedWithProratedMinimumPrice.cadence
                        billingCycleConfiguration =
                            newFloatingGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingGroupedWithProratedMinimumPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingGroupedWithProratedMinimumPrice.conversionRate
                        modelType = newFloatingGroupedWithProratedMinimumPrice.modelType
                        groupedWithProratedMinimumConfig =
                            newFloatingGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        currency = newFloatingGroupedWithProratedMinimumPrice.currency
                        additionalProperties =
                            newFloatingGroupedWithProratedMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedWithProratedMinimumPrice =
                        NewFloatingGroupedWithProratedMinimumPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(groupedWithProratedMinimumConfig) {
                                "`groupedWithProratedMinimumConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM = of("grouped_with_prorated_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM,
                    }

                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedWithProratedMinimumPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedWithProratedMinimumConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedWithProratedMinimumPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedWithMeteredMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("grouped_with_metered_minimum_config")
                private val groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("grouped_with_metered_minimum_config")
                fun groupedWithMeteredMinimumConfig(): GroupedWithMeteredMinimumConfig =
                    groupedWithMeteredMinimumConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig? =
                        null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedWithMeteredMinimumPrice:
                            NewFloatingGroupedWithMeteredMinimumPrice
                    ) = apply {
                        metadata = newFloatingGroupedWithMeteredMinimumPrice.metadata
                        externalPriceId = newFloatingGroupedWithMeteredMinimumPrice.externalPriceId
                        name = newFloatingGroupedWithMeteredMinimumPrice.name
                        billableMetricId =
                            newFloatingGroupedWithMeteredMinimumPrice.billableMetricId
                        itemId = newFloatingGroupedWithMeteredMinimumPrice.itemId
                        billedInAdvance = newFloatingGroupedWithMeteredMinimumPrice.billedInAdvance
                        fixedPriceQuantity =
                            newFloatingGroupedWithMeteredMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingGroupedWithMeteredMinimumPrice.invoiceGroupingKey
                        cadence = newFloatingGroupedWithMeteredMinimumPrice.cadence
                        billingCycleConfiguration =
                            newFloatingGroupedWithMeteredMinimumPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingGroupedWithMeteredMinimumPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingGroupedWithMeteredMinimumPrice.conversionRate
                        modelType = newFloatingGroupedWithMeteredMinimumPrice.modelType
                        groupedWithMeteredMinimumConfig =
                            newFloatingGroupedWithMeteredMinimumPrice
                                .groupedWithMeteredMinimumConfig
                        currency = newFloatingGroupedWithMeteredMinimumPrice.currency
                        additionalProperties =
                            newFloatingGroupedWithMeteredMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun groupedWithMeteredMinimumConfig(
                        groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig
                    ) = apply {
                        this.groupedWithMeteredMinimumConfig = groupedWithMeteredMinimumConfig
                    }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedWithMeteredMinimumPrice =
                        NewFloatingGroupedWithMeteredMinimumPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(groupedWithMeteredMinimumConfig) {
                                "`groupedWithMeteredMinimumConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithMeteredMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithMeteredMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithMeteredMinimumConfig =
                            GroupedWithMeteredMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithMeteredMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithMeteredMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_METERED_MINIMUM = of("grouped_with_metered_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_WITH_METERED_MINIMUM,
                    }

                    enum class Value {
                        GROUPED_WITH_METERED_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_METERED_MINIMUM -> Value.GROUPED_WITH_METERED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_METERED_MINIMUM -> Known.GROUPED_WITH_METERED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedWithMeteredMinimumPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && groupedWithMeteredMinimumConfig == other.groupedWithMeteredMinimumConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedWithMeteredMinimumConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedWithMeteredMinimumPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedWithMeteredMinimumConfig=$groupedWithMeteredMinimumConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixWithDisplayNamePrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("matrix_with_display_name_config")
                private val matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("matrix_with_display_name_config")
                fun matrixWithDisplayNameConfig(): MatrixWithDisplayNameConfig =
                    matrixWithDisplayNameConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingMatrixWithDisplayNamePrice: NewFloatingMatrixWithDisplayNamePrice
                    ) = apply {
                        metadata = newFloatingMatrixWithDisplayNamePrice.metadata
                        externalPriceId = newFloatingMatrixWithDisplayNamePrice.externalPriceId
                        name = newFloatingMatrixWithDisplayNamePrice.name
                        billableMetricId = newFloatingMatrixWithDisplayNamePrice.billableMetricId
                        itemId = newFloatingMatrixWithDisplayNamePrice.itemId
                        billedInAdvance = newFloatingMatrixWithDisplayNamePrice.billedInAdvance
                        fixedPriceQuantity =
                            newFloatingMatrixWithDisplayNamePrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingMatrixWithDisplayNamePrice.invoiceGroupingKey
                        cadence = newFloatingMatrixWithDisplayNamePrice.cadence
                        billingCycleConfiguration =
                            newFloatingMatrixWithDisplayNamePrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingMatrixWithDisplayNamePrice.invoicingCycleConfiguration
                        conversionRate = newFloatingMatrixWithDisplayNamePrice.conversionRate
                        modelType = newFloatingMatrixWithDisplayNamePrice.modelType
                        matrixWithDisplayNameConfig =
                            newFloatingMatrixWithDisplayNamePrice.matrixWithDisplayNameConfig
                        currency = newFloatingMatrixWithDisplayNamePrice.currency
                        additionalProperties =
                            newFloatingMatrixWithDisplayNamePrice.additionalProperties
                                .toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun matrixWithDisplayNameConfig(
                        matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig
                    ) = apply { this.matrixWithDisplayNameConfig = matrixWithDisplayNameConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixWithDisplayNamePrice =
                        NewFloatingMatrixWithDisplayNamePrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(matrixWithDisplayNameConfig) {
                                "`matrixWithDisplayNameConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixWithDisplayNameConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig
                        ) = apply {
                            additionalProperties =
                                matrixWithDisplayNameConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixWithDisplayNameConfig =
                            MatrixWithDisplayNameConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixWithDisplayNameConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixWithDisplayNameConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX_WITH_DISPLAY_NAME = of("matrix_with_display_name")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX_WITH_DISPLAY_NAME,
                    }

                    enum class Value {
                        MATRIX_WITH_DISPLAY_NAME,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX_WITH_DISPLAY_NAME -> Value.MATRIX_WITH_DISPLAY_NAME
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX_WITH_DISPLAY_NAME -> Known.MATRIX_WITH_DISPLAY_NAME
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixWithDisplayNamePrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && matrixWithDisplayNameConfig == other.matrixWithDisplayNameConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, matrixWithDisplayNameConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixWithDisplayNamePrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, matrixWithDisplayNameConfig=$matrixWithDisplayNameConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("bulk_with_proration_config")
                private val bulkWithProrationConfig: BulkWithProrationConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("bulk_with_proration_config")
                fun bulkWithProrationConfig(): BulkWithProrationConfig = bulkWithProrationConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var bulkWithProrationConfig: BulkWithProrationConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice
                    ) = apply {
                        metadata = newFloatingBulkWithProrationPrice.metadata
                        externalPriceId = newFloatingBulkWithProrationPrice.externalPriceId
                        name = newFloatingBulkWithProrationPrice.name
                        billableMetricId = newFloatingBulkWithProrationPrice.billableMetricId
                        itemId = newFloatingBulkWithProrationPrice.itemId
                        billedInAdvance = newFloatingBulkWithProrationPrice.billedInAdvance
                        fixedPriceQuantity = newFloatingBulkWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkWithProrationPrice.invoiceGroupingKey
                        cadence = newFloatingBulkWithProrationPrice.cadence
                        billingCycleConfiguration =
                            newFloatingBulkWithProrationPrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingBulkWithProrationPrice.invoicingCycleConfiguration
                        conversionRate = newFloatingBulkWithProrationPrice.conversionRate
                        modelType = newFloatingBulkWithProrationPrice.modelType
                        bulkWithProrationConfig =
                            newFloatingBulkWithProrationPrice.bulkWithProrationConfig
                        currency = newFloatingBulkWithProrationPrice.currency
                        additionalProperties =
                            newFloatingBulkWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        apply {
                            this.bulkWithProrationConfig = bulkWithProrationConfig
                        }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkWithProrationPrice =
                        NewFloatingBulkWithProrationPrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(bulkWithProrationConfig) {
                                "`bulkWithProrationConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    bulkWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_WITH_PRORATION = of("bulk_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_WITH_PRORATION,
                    }

                    enum class Value {
                        BULK_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkWithProrationPrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && bulkWithProrationConfig == other.bulkWithProrationConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, bulkWithProrationConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkWithProrationPrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, bulkWithProrationConfig=$bulkWithProrationConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("metadata") private val metadata: Metadata?,
                @JsonProperty("external_price_id") private val externalPriceId: String?,
                @JsonProperty("name") private val name: String,
                @JsonProperty("billable_metric_id") private val billableMetricId: String?,
                @JsonProperty("item_id") private val itemId: String,
                @JsonProperty("billed_in_advance") private val billedInAdvance: Boolean?,
                @JsonProperty("fixed_price_quantity") private val fixedPriceQuantity: Double?,
                @JsonProperty("invoice_grouping_key") private val invoiceGroupingKey: String?,
                @JsonProperty("cadence") private val cadence: Cadence,
                @JsonProperty("billing_cycle_configuration")
                private val billingCycleConfiguration: BillingCycleConfiguration?,
                @JsonProperty("invoicing_cycle_configuration")
                private val invoicingCycleConfiguration: InvoicingCycleConfiguration?,
                @JsonProperty("conversion_rate") private val conversionRate: Double?,
                @JsonProperty("model_type") private val modelType: ModelType,
                @JsonProperty("grouped_tiered_package_config")
                private val groupedTieredPackageConfig: GroupedTieredPackageConfig,
                @JsonProperty("currency") private val currency: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata)

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId)

                /** The name of the price. */
                @JsonProperty("name") fun name(): String = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId)

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity)

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey)

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence") fun cadence(): Cadence = cadence

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(billingCycleConfiguration)

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(invoicingCycleConfiguration)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate)

                @JsonProperty("model_type") fun modelType(): ModelType = modelType

                @JsonProperty("grouped_tiered_package_config")
                fun groupedTieredPackageConfig(): GroupedTieredPackageConfig =
                    groupedTieredPackageConfig

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency") fun currency(): String = currency

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var metadata: Metadata? = null
                    private var externalPriceId: String? = null
                    private var name: String? = null
                    private var billableMetricId: String? = null
                    private var itemId: String? = null
                    private var billedInAdvance: Boolean? = null
                    private var fixedPriceQuantity: Double? = null
                    private var invoiceGroupingKey: String? = null
                    private var cadence: Cadence? = null
                    private var billingCycleConfiguration: BillingCycleConfiguration? = null
                    private var invoicingCycleConfiguration: InvoicingCycleConfiguration? = null
                    private var conversionRate: Double? = null
                    private var modelType: ModelType? = null
                    private var groupedTieredPackageConfig: GroupedTieredPackageConfig? = null
                    private var currency: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedTieredPackagePrice: NewFloatingGroupedTieredPackagePrice
                    ) = apply {
                        metadata = newFloatingGroupedTieredPackagePrice.metadata
                        externalPriceId = newFloatingGroupedTieredPackagePrice.externalPriceId
                        name = newFloatingGroupedTieredPackagePrice.name
                        billableMetricId = newFloatingGroupedTieredPackagePrice.billableMetricId
                        itemId = newFloatingGroupedTieredPackagePrice.itemId
                        billedInAdvance = newFloatingGroupedTieredPackagePrice.billedInAdvance
                        fixedPriceQuantity = newFloatingGroupedTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedTieredPackagePrice.invoiceGroupingKey
                        cadence = newFloatingGroupedTieredPackagePrice.cadence
                        billingCycleConfiguration =
                            newFloatingGroupedTieredPackagePrice.billingCycleConfiguration
                        invoicingCycleConfiguration =
                            newFloatingGroupedTieredPackagePrice.invoicingCycleConfiguration
                        conversionRate = newFloatingGroupedTieredPackagePrice.conversionRate
                        modelType = newFloatingGroupedTieredPackagePrice.modelType
                        groupedTieredPackageConfig =
                            newFloatingGroupedTieredPackagePrice.groupedTieredPackageConfig
                        currency = newFloatingGroupedTieredPackagePrice.currency
                        additionalProperties =
                            newFloatingGroupedTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata) = apply { this.metadata = metadata }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /** The name of the price. */
                    fun name(name: String) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = apply { this.cadence = cadence }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) = apply {
                        this.conversionRate = conversionRate
                    }

                    fun modelType(modelType: ModelType) = apply { this.modelType = modelType }

                    fun groupedTieredPackageConfig(
                        groupedTieredPackageConfig: GroupedTieredPackageConfig
                    ) = apply { this.groupedTieredPackageConfig = groupedTieredPackageConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = apply { this.currency = currency }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedTieredPackagePrice =
                        NewFloatingGroupedTieredPackagePrice(
                            metadata,
                            externalPriceId,
                            checkNotNull(name) { "`name` is required but was not set" },
                            billableMetricId,
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            billedInAdvance,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            checkNotNull(cadence) { "`cadence` is required but was not set" },
                            billingCycleConfiguration,
                            invoicingCycleConfiguration,
                            conversionRate,
                            checkNotNull(modelType) { "`modelType` is required but was not set" },
                            checkNotNull(groupedTieredPackageConfig) {
                                "`groupedTieredPackageConfig` is required but was not set"
                            },
                            checkNotNull(currency) { "`currency` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedTieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedTieredPackageConfig: GroupedTieredPackageConfig) =
                            apply {
                                additionalProperties =
                                    groupedTieredPackageConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedTieredPackageConfig =
                            GroupedTieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedTieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedTieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_TIERED_PACKAGE = of("grouped_tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_TIERED_PACKAGE,
                    }

                    enum class Value {
                        GROUPED_TIERED_PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_TIERED_PACKAGE -> Value.GROUPED_TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_TIERED_PACKAGE -> Known.GROUPED_TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration") private val duration: Long,
                    @JsonProperty("duration_unit") private val durationUnit: DurationUnit,
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    @JsonProperty("duration") fun duration(): Long = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit") fun durationUnit(): DurationUnit = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: Long? = null
                        private var durationUnit: DurationUnit? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkNotNull(duration) { "`duration` is required but was not set" },
                                checkNotNull(durationUnit) {
                                    "`durationUnit` is required but was not set"
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedTieredPackagePrice && metadata == other.metadata && externalPriceId == other.externalPriceId && name == other.name && billableMetricId == other.billableMetricId && itemId == other.itemId && billedInAdvance == other.billedInAdvance && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && cadence == other.cadence && billingCycleConfiguration == other.billingCycleConfiguration && invoicingCycleConfiguration == other.invoicingCycleConfiguration && conversionRate == other.conversionRate && modelType == other.modelType && groupedTieredPackageConfig == other.groupedTieredPackageConfig && currency == other.currency && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(metadata, externalPriceId, name, billableMetricId, itemId, billedInAdvance, fixedPriceQuantity, invoiceGroupingKey, cadence, billingCycleConfiguration, invoicingCycleConfiguration, conversionRate, modelType, groupedTieredPackageConfig, currency, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedTieredPackagePrice{metadata=$metadata, externalPriceId=$externalPriceId, name=$name, billableMetricId=$billableMetricId, itemId=$itemId, billedInAdvance=$billedInAdvance, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, cadence=$cadence, billingCycleConfiguration=$billingCycleConfiguration, invoicingCycleConfiguration=$invoicingCycleConfiguration, conversionRate=$conversionRate, modelType=$modelType, groupedTieredPackageConfig=$groupedTieredPackageConfig, currency=$currency, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Add && priceId == other.priceId && externalPriceId == other.externalPriceId && price == other.price && allocationPrice == other.allocationPrice && startDate == other.startDate && endDate == other.endDate && fixedFeeQuantityTransitions == other.fixedFeeQuantityTransitions && discounts == other.discounts && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(priceId, externalPriceId, price, allocationPrice, startDate, endDate, fixedFeeQuantityTransitions, discounts, minimumAmount, maximumAmount, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Add{priceId=$priceId, externalPriceId=$externalPriceId, price=$price, allocationPrice=$allocationPrice, startDate=$startDate, endDate=$endDate, fixedFeeQuantityTransitions=$fixedFeeQuantityTransitions, discounts=$discounts, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class AddAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment") private val adjustment: Adjustment,
        @JsonProperty("start_date") private val startDate: StartDate,
        @JsonProperty("end_date") private val endDate: EndDate?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonProperty("adjustment") fun adjustment(): Adjustment = adjustment

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription.
         */
        @JsonProperty("start_date") fun startDate(): StartDate = startDate

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription.
         */
        @JsonProperty("end_date") fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustment: Adjustment? = null
            private var startDate: StartDate? = null
            private var endDate: EndDate? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addAdjustment: AddAdjustment) = apply {
                adjustment = addAdjustment.adjustment
                startDate = addAdjustment.startDate
                endDate = addAdjustment.endDate
                additionalProperties = addAdjustment.additionalProperties.toMutableMap()
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: Adjustment) = apply { this.adjustment = adjustment }

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription.
             */
            fun startDate(startDate: StartDate) = apply { this.startDate = startDate }

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(endDate: EndDate) = apply { this.endDate = endDate }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): AddAdjustment =
                AddAdjustment(
                    checkNotNull(adjustment) { "`adjustment` is required but was not set" },
                    checkNotNull(startDate) { "`startDate` is required but was not set" },
                    endDate,
                    additionalProperties.toImmutable(),
                )
        }

        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newUsageDiscount: NewUsageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newUsageDiscount(): Optional<NewUsageDiscount> =
                Optional.ofNullable(newUsageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewUsageDiscount(): Boolean = newUsageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewUsageDiscount(): NewUsageDiscount =
                newUsageDiscount.getOrThrow("newUsageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newUsageDiscount != null -> visitor.visitNewUsageDiscount(newUsageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && newPercentageDiscount == other.newPercentageDiscount && newUsageDiscount == other.newUsageDiscount && newAmountDiscount == other.newAmountDiscount && newMinimum == other.newMinimum && newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newPercentageDiscount, newUsageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */

            override fun toString(): String =
                when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newUsageDiscount != null -> "Adjustment{newUsageDiscount=$newUsageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewUsageDiscount(newUsageDiscount: NewUsageDiscount) =
                    Adjustment(newUsageDiscount = newUsageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>())?.let {
                                return Adjustment(newPercentageDiscount = it, _json = json)
                            }
                        }
                        "usage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewUsageDiscount>())?.let {
                                return Adjustment(newUsageDiscount = it, _json = json)
                            }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>())?.let {
                                return Adjustment(newAmountDiscount = it, _json = json)
                            }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>())?.let {
                                return Adjustment(newMinimum = it, _json = json)
                            }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>())?.let {
                                return Adjustment(newMaximum = it, _json = json)
                            }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newUsageDiscount != null ->
                            generator.writeObject(value.newUsageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @NoAutoDetect
            class NewPercentageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("percentage_discount") private val percentageDiscount: Double,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                @JsonProperty("percentage_discount")
                fun percentageDiscount(): Double = percentageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: List<String>? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var adjustmentType: AdjustmentType? = null
                    private var percentageDiscount: Double? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        appliesToPriceIds = newPercentageDiscount.appliesToPriceIds.toMutableList()
                        isInvoiceLevel = newPercentageDiscount.isInvoiceLevel
                        adjustmentType = newPercentageDiscount.adjustmentType
                        percentageDiscount = newPercentageDiscount.percentageDiscount
                        additionalProperties =
                            newPercentageDiscount.additionalProperties.toMutableMap()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun percentageDiscount(percentageDiscount: Double) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            isInvoiceLevel,
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(percentageDiscount) {
                                "`percentageDiscount` is required but was not set"
                            },
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE_DISCOUNT = of("percentage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        PERCENTAGE_DISCOUNT,
                    }

                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && adjustmentType == other.adjustmentType && percentageDiscount == other.percentageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(appliesToPriceIds, isInvoiceLevel, adjustmentType, percentageDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewPercentageDiscount{appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, adjustmentType=$adjustmentType, percentageDiscount=$percentageDiscount, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewUsageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("usage_discount") private val usageDiscount: Double,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                @JsonProperty("usage_discount") fun usageDiscount(): Double = usageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: List<String>? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var adjustmentType: AdjustmentType? = null
                    private var usageDiscount: Double? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newUsageDiscount: NewUsageDiscount) = apply {
                        appliesToPriceIds = newUsageDiscount.appliesToPriceIds.toMutableList()
                        isInvoiceLevel = newUsageDiscount.isInvoiceLevel
                        adjustmentType = newUsageDiscount.adjustmentType
                        usageDiscount = newUsageDiscount.usageDiscount
                        additionalProperties = newUsageDiscount.additionalProperties.toMutableMap()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun usageDiscount(usageDiscount: Double) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewUsageDiscount =
                        NewUsageDiscount(
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            isInvoiceLevel,
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(usageDiscount) {
                                "`usageDiscount` is required but was not set"
                            },
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE_DISCOUNT = of("usage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        USAGE_DISCOUNT,
                    }

                    enum class Value {
                        USAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            USAGE_DISCOUNT -> Value.USAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            USAGE_DISCOUNT -> Known.USAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewUsageDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && adjustmentType == other.adjustmentType && usageDiscount == other.usageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(appliesToPriceIds, isInvoiceLevel, adjustmentType, usageDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewUsageDiscount{appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, adjustmentType=$adjustmentType, usageDiscount=$usageDiscount, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewAmountDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("amount_discount") private val amountDiscount: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                @JsonProperty("amount_discount") fun amountDiscount(): String = amountDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: List<String>? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var adjustmentType: AdjustmentType? = null
                    private var amountDiscount: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        appliesToPriceIds = newAmountDiscount.appliesToPriceIds.toMutableList()
                        isInvoiceLevel = newAmountDiscount.isInvoiceLevel
                        adjustmentType = newAmountDiscount.adjustmentType
                        amountDiscount = newAmountDiscount.amountDiscount
                        additionalProperties = newAmountDiscount.additionalProperties.toMutableMap()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            isInvoiceLevel,
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(amountDiscount) {
                                "`amountDiscount` is required but was not set"
                            },
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT_DISCOUNT = of("amount_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        AMOUNT_DISCOUNT,
                    }

                    enum class Value {
                        AMOUNT_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && adjustmentType == other.adjustmentType && amountDiscount == other.amountDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(appliesToPriceIds, isInvoiceLevel, adjustmentType, amountDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewAmountDiscount{appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMinimum
            @JsonCreator
            private constructor(
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("minimum_amount") private val minimumAmount: String,
                @JsonProperty("item_id") private val itemId: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                @JsonProperty("minimum_amount") fun minimumAmount(): String = minimumAmount

                /** The item ID that revenue from this minimum will be attributed to. */
                @JsonProperty("item_id") fun itemId(): String = itemId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: List<String>? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var adjustmentType: AdjustmentType? = null
                    private var minimumAmount: String? = null
                    private var itemId: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        appliesToPriceIds = newMinimum.appliesToPriceIds.toMutableList()
                        isInvoiceLevel = newMinimum.isInvoiceLevel
                        adjustmentType = newMinimum.adjustmentType
                        minimumAmount = newMinimum.minimumAmount
                        itemId = newMinimum.itemId
                        additionalProperties = newMinimum.additionalProperties.toMutableMap()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun minimumAmount(minimumAmount: String) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = apply { this.itemId = itemId }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMinimum =
                        NewMinimum(
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            isInvoiceLevel,
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(minimumAmount) {
                                "`minimumAmount` is required but was not set"
                            },
                            checkNotNull(itemId) { "`itemId` is required but was not set" },
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MINIMUM = of("minimum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MINIMUM,
                    }

                    enum class Value {
                        MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && adjustmentType == other.adjustmentType && minimumAmount == other.minimumAmount && itemId == other.itemId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(appliesToPriceIds, isInvoiceLevel, adjustmentType, minimumAmount, itemId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMinimum{appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, adjustmentType=$adjustmentType, minimumAmount=$minimumAmount, itemId=$itemId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMaximum
            @JsonCreator
            private constructor(
                @JsonProperty("applies_to_price_ids") private val appliesToPriceIds: List<String>,
                @JsonProperty("is_invoice_level") private val isInvoiceLevel: Boolean?,
                @JsonProperty("adjustment_type") private val adjustmentType: AdjustmentType,
                @JsonProperty("maximum_amount") private val maximumAmount: String,
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                fun appliesToPriceIds(): List<String> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                fun isInvoiceLevel(): Optional<Boolean> = Optional.ofNullable(isInvoiceLevel)

                @JsonProperty("adjustment_type")
                fun adjustmentType(): AdjustmentType = adjustmentType

                @JsonProperty("maximum_amount") fun maximumAmount(): String = maximumAmount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var appliesToPriceIds: List<String>? = null
                    private var isInvoiceLevel: Boolean? = null
                    private var adjustmentType: AdjustmentType? = null
                    private var maximumAmount: String? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        appliesToPriceIds = newMaximum.appliesToPriceIds.toMutableList()
                        isInvoiceLevel = newMaximum.isInvoiceLevel
                        adjustmentType = newMaximum.adjustmentType
                        maximumAmount = newMaximum.maximumAmount
                        additionalProperties = newMaximum.additionalProperties.toMutableMap()
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun maximumAmount(maximumAmount: String) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMaximum =
                        NewMaximum(
                            checkNotNull(appliesToPriceIds) {
                                    "`appliesToPriceIds` is required but was not set"
                                }
                                .toImmutable(),
                            isInvoiceLevel,
                            checkNotNull(adjustmentType) {
                                "`adjustmentType` is required but was not set"
                            },
                            checkNotNull(maximumAmount) {
                                "`maximumAmount` is required but was not set"
                            },
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAXIMUM = of("maximum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MAXIMUM,
                    }

                    enum class Value {
                        MAXIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && adjustmentType == other.adjustmentType && maximumAmount == other.maximumAmount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(appliesToPriceIds, isInvoiceLevel, adjustmentType, maximumAmount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMaximum{appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, adjustmentType=$adjustmentType, maximumAmount=$maximumAmount, additionalProperties=$additionalProperties}"
            }
        }

        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "StartDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "EndDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddAdjustment && adjustment == other.adjustment && startDate == other.startDate && endDate == other.endDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustment, startDate, endDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AddAdjustment{adjustment=$adjustment, startDate=$startDate, endDate=$endDate, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class Edit
    @JsonCreator
    private constructor(
        @JsonProperty("price_interval_id") private val priceIntervalId: String,
        @JsonProperty("start_date") private val startDate: StartDate?,
        @JsonProperty("end_date") private val endDate: EndDate?,
        @JsonProperty("fixed_fee_quantity_transitions")
        private val fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>?,
        @JsonProperty("billing_cycle_day") private val billingCycleDay: Long?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the price interval to edit. */
        @JsonProperty("price_interval_id") fun priceIntervalId(): String = priceIntervalId

        /**
         * The updated start date of this price interval. If not specified, the start date will not
         * be updated.
         */
        @JsonProperty("start_date")
        fun startDate(): Optional<StartDate> = Optional.ofNullable(startDate)

        /**
         * The updated end date of this price interval. If not specified, the start date will not be
         * updated.
         */
        @JsonProperty("end_date") fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate)

        /**
         * A list of fixed fee quantity transitions to use for this price interval. Note that this
         * list will overwrite all existing fixed fee quantity transitions on the price interval.
         */
        @JsonProperty("fixed_fee_quantity_transitions")
        fun fixedFeeQuantityTransitions(): Optional<List<FixedFeeQuantityTransition>> =
            Optional.ofNullable(fixedFeeQuantityTransitions)

        /**
         * The updated billing cycle day for this price interval. If not specified, the billing
         * cycle day will not be updated. Note that overlapping price intervals must have the same
         * billing cycle day.
         */
        @JsonProperty("billing_cycle_day")
        fun billingCycleDay(): Optional<Long> = Optional.ofNullable(billingCycleDay)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var priceIntervalId: String? = null
            private var startDate: StartDate? = null
            private var endDate: EndDate? = null
            private var fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>? = null
            private var billingCycleDay: Long? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(edit: Edit) = apply {
                priceIntervalId = edit.priceIntervalId
                startDate = edit.startDate
                endDate = edit.endDate
                fixedFeeQuantityTransitions = edit.fixedFeeQuantityTransitions?.toMutableList()
                billingCycleDay = edit.billingCycleDay
                additionalProperties = edit.additionalProperties.toMutableMap()
            }

            /** The id of the price interval to edit. */
            fun priceIntervalId(priceIntervalId: String) = apply {
                this.priceIntervalId = priceIntervalId
            }

            /**
             * The updated start date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun startDate(startDate: StartDate) = apply { this.startDate = startDate }

            /**
             * The updated end date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun endDate(endDate: EndDate) = apply { this.endDate = endDate }

            /**
             * A list of fixed fee quantity transitions to use for this price interval. Note that
             * this list will overwrite all existing fixed fee quantity transitions on the price
             * interval.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>
            ) = apply { this.fixedFeeQuantityTransitions = fixedFeeQuantityTransitions }

            /**
             * The updated billing cycle day for this price interval. If not specified, the billing
             * cycle day will not be updated. Note that overlapping price intervals must have the
             * same billing cycle day.
             */
            fun billingCycleDay(billingCycleDay: Long) = apply {
                this.billingCycleDay = billingCycleDay
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Edit =
                Edit(
                    checkNotNull(priceIntervalId) {
                        "`priceIntervalId` is required but was not set"
                    },
                    startDate,
                    endDate,
                    fixedFeeQuantityTransitions?.toImmutable(),
                    billingCycleDay,
                    additionalProperties.toImmutable(),
                )
        }

        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "EndDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        @NoAutoDetect
        class FixedFeeQuantityTransition
        @JsonCreator
        private constructor(
            @JsonProperty("quantity") private val quantity: Long,
            @JsonProperty("effective_date") private val effectiveDate: OffsetDateTime,
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** The quantity of the fixed fee quantity transition. */
            @JsonProperty("quantity") fun quantity(): Long = quantity

            /** The date that the fixed fee quantity transition should take effect. */
            @JsonProperty("effective_date") fun effectiveDate(): OffsetDateTime = effectiveDate

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var quantity: Long? = null
                private var effectiveDate: OffsetDateTime? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(fixedFeeQuantityTransition: FixedFeeQuantityTransition) = apply {
                    quantity = fixedFeeQuantityTransition.quantity
                    effectiveDate = fixedFeeQuantityTransition.effectiveDate
                    additionalProperties =
                        fixedFeeQuantityTransition.additionalProperties.toMutableMap()
                }

                /** The quantity of the fixed fee quantity transition. */
                fun quantity(quantity: Long) = apply { this.quantity = quantity }

                /** The date that the fixed fee quantity transition should take effect. */
                fun effectiveDate(effectiveDate: OffsetDateTime) = apply {
                    this.effectiveDate = effectiveDate
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): FixedFeeQuantityTransition =
                    FixedFeeQuantityTransition(
                        checkNotNull(quantity) { "`quantity` is required but was not set" },
                        checkNotNull(effectiveDate) {
                            "`effectiveDate` is required but was not set"
                        },
                        additionalProperties.toImmutable(),
                    )
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is FixedFeeQuantityTransition && quantity == other.quantity && effectiveDate == other.effectiveDate && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(quantity, effectiveDate, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "FixedFeeQuantityTransition{quantity=$quantity, effectiveDate=$effectiveDate, additionalProperties=$additionalProperties}"
        }

        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "StartDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Edit && priceIntervalId == other.priceIntervalId && startDate == other.startDate && endDate == other.endDate && fixedFeeQuantityTransitions == other.fixedFeeQuantityTransitions && billingCycleDay == other.billingCycleDay && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(priceIntervalId, startDate, endDate, fixedFeeQuantityTransitions, billingCycleDay, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Edit{priceIntervalId=$priceIntervalId, startDate=$startDate, endDate=$endDate, fixedFeeQuantityTransitions=$fixedFeeQuantityTransitions, billingCycleDay=$billingCycleDay, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class EditAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment_interval_id") private val adjustmentIntervalId: String,
        @JsonProperty("start_date") private val startDate: StartDate?,
        @JsonProperty("end_date") private val endDate: EndDate?,
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the adjustment interval to edit. */
        @JsonProperty("adjustment_interval_id")
        fun adjustmentIntervalId(): String = adjustmentIntervalId

        /**
         * The updated start date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        @JsonProperty("start_date")
        fun startDate(): Optional<StartDate> = Optional.ofNullable(startDate)

        /**
         * The updated end date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        @JsonProperty("end_date") fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate)

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustmentIntervalId: String? = null
            private var startDate: StartDate? = null
            private var endDate: EndDate? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(editAdjustment: EditAdjustment) = apply {
                adjustmentIntervalId = editAdjustment.adjustmentIntervalId
                startDate = editAdjustment.startDate
                endDate = editAdjustment.endDate
                additionalProperties = editAdjustment.additionalProperties.toMutableMap()
            }

            /** The id of the adjustment interval to edit. */
            fun adjustmentIntervalId(adjustmentIntervalId: String) = apply {
                this.adjustmentIntervalId = adjustmentIntervalId
            }

            /**
             * The updated start date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun startDate(startDate: StartDate) = apply { this.startDate = startDate }

            /**
             * The updated end date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun endDate(endDate: EndDate) = apply { this.endDate = endDate }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): EditAdjustment =
                EditAdjustment(
                    checkNotNull(adjustmentIntervalId) {
                        "`adjustmentIntervalId` is required but was not set"
                    },
                    startDate,
                    endDate,
                    additionalProperties.toImmutable(),
                )
        }

        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "EndDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "StartDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is EditAdjustment && adjustmentIntervalId == other.adjustmentIntervalId && startDate == other.startDate && endDate == other.endDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustmentIntervalId, startDate, endDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "EditAdjustment{adjustmentIntervalId=$adjustmentIntervalId, startDate=$startDate, endDate=$endDate, additionalProperties=$additionalProperties}"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is SubscriptionPriceIntervalsParams && subscriptionId == other.subscriptionId && add == other.add && addAdjustments == other.addAdjustments && edit == other.edit && editAdjustments == other.editAdjustments && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams && additionalBodyProperties == other.additionalBodyProperties /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(subscriptionId, add, addAdjustments, edit, editAdjustments, additionalHeaders, additionalQueryParams, additionalBodyProperties) /* spotless:on */

    override fun toString() =
        "SubscriptionPriceIntervalsParams{subscriptionId=$subscriptionId, add=$add, addAdjustments=$addAdjustments, edit=$edit, editAdjustments=$editAdjustments, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams, additionalBodyProperties=$additionalBodyProperties}"
}
