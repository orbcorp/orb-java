// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.Params
import com.withorb.api.core.checkKnown
import com.withorb.api.core.checkRequired
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.immutableEmptyMap
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.time.OffsetDateTime
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * This endpoint is used to add and edit subscription
 * [price intervals](/api-reference/price-interval/add-or-edit-price-intervals). By making
 * modifications to a subscription’s price intervals, you can
 * [flexibly and atomically control the billing behavior of a subscription](/product-catalog/modifying-subscriptions).
 *
 * ## Adding price intervals
 *
 * Prices can be added as price intervals to a subscription by specifying them in the `add` array. A
 * `price_id` or `external_price_id` from an add-on price or previously removed plan price can be
 * specified to reuse an existing price definition (however, please note that prices from other
 * plans cannot be added to the subscription). Additionally, a new price can be specified using the
 * `price` field — this price will be created automatically.
 *
 * A `start_date` must be specified for the price interval. This is the date when the price will
 * start billing on the subscription, so this will notably result in an immediate charge at this
 * time for any billed in advance fixed fees. The `end_date` will default to null, resulting in a
 * price interval that will bill on a continually recurring basis. Both of these dates can be set in
 * the past or the future and Orb will generate or modify invoices to ensure the subscription’s
 * invoicing behavior is correct.
 *
 * Additionally, a discount, minimum, or maximum can be specified on the price interval. This will
 * only apply to this price interval, not any other price intervals on the subscription.
 *
 * ## Adjustment intervals
 *
 * An adjustment interval represents the time period that a particular adjustment (a discount,
 * minimum, or maximum) applies to the prices on a subscription. Adjustment intervals can be added
 * to a subscription by specifying them in the `add_adjustments` array, or modified via the
 * `edit_adjustments` array. When creating an adjustment interval, you'll need to provide the
 * definition of the new adjustment (the type of adjustment, and which prices it applies to), as
 * well as the start and end dates for the adjustment interval. The start and end dates of an
 * existing adjustment interval can be edited via the `edit_adjustments` field (just like price
 * intervals). (To "change" the amount of a discount, minimum, or maximum, then, you'll need to end
 * the existing interval, and create a new adjustment interval with the new amount and a start date
 * that matches the end date of the previous interval.)
 *
 * ## Editing price intervals
 *
 * Price intervals can be adjusted by specifying edits to make in the `edit` array. A
 * `price_interval_id` to edit must be specified — this can be retrieved from the `price_intervals`
 * field on the subscription.
 *
 * A new `start_date` or `end_date` can be specified to change the range of the price interval,
 * which will modify past or future invoices to ensure correctness. If either of these dates are
 * unspecified, they will default to the existing date on the price interval. To remove a price
 * interval entirely from a subscription, set the `end_date` to be equivalent to the `start_date`.
 *
 * ## Fixed fee quantity transitions
 *
 * The fixed fee quantity transitions for a fixed fee price interval can also be specified when
 * adding or editing by passing an array for `fixed_fee_quantity_transitions`. A fixed fee quantity
 * transition must have a `quantity` and an `effective_date`, which is the date after which the new
 * quantity will be used for billing. If a fixed fee quantity transition is scheduled at a billing
 * period boundary, the full quantity will be billed on an invoice with the other prices on the
 * subscription. If the fixed fee quantity transition is scheduled mid-billing period, the
 * difference between the existing quantity and quantity specified in the transition will be
 * prorated for the rest of the billing period and billed immediately, which will generate a new
 * invoice.
 *
 * Notably, the list of fixed fee quantity transitions passed will overwrite the existing fixed fee
 * quantity transitions on the price interval, so the entire list of transitions must be specified
 * to add additional transitions. The existing list of transitions can be retrieved using the
 * `fixed_fee_quantity_transitions` property on a subscription’s serialized price intervals.
 */
class SubscriptionPriceIntervalsParams
private constructor(
    private val subscriptionId: String,
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    fun subscriptionId(): String = subscriptionId

    /**
     * A list of price intervals to add to the subscription.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun add(): Optional<List<Add>> = body.add()

    /**
     * A list of adjustments to add to the subscription.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun addAdjustments(): Optional<List<AddAdjustment>> = body.addAdjustments()

    /**
     * If false, this request will fail if it would void an issued invoice or create a credit note.
     * Consider using this as a safety mechanism if you do not expect existing invoices to be
     * changed.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun allowInvoiceCreditOrVoid(): Optional<Boolean> = body.allowInvoiceCreditOrVoid()

    /**
     * A list of price intervals to edit on the subscription.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun edit(): Optional<List<Edit>> = body.edit()

    /**
     * A list of adjustments to edit on the subscription.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun editAdjustments(): Optional<List<EditAdjustment>> = body.editAdjustments()

    /**
     * Returns the raw JSON value of [add].
     *
     * Unlike [add], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _add(): JsonField<List<Add>> = body._add()

    /**
     * Returns the raw JSON value of [addAdjustments].
     *
     * Unlike [addAdjustments], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _addAdjustments(): JsonField<List<AddAdjustment>> = body._addAdjustments()

    /**
     * Returns the raw JSON value of [allowInvoiceCreditOrVoid].
     *
     * Unlike [allowInvoiceCreditOrVoid], this method doesn't throw if the JSON field has an
     * unexpected type.
     */
    fun _allowInvoiceCreditOrVoid(): JsonField<Boolean> = body._allowInvoiceCreditOrVoid()

    /**
     * Returns the raw JSON value of [edit].
     *
     * Unlike [edit], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _edit(): JsonField<List<Edit>> = body._edit()

    /**
     * Returns the raw JSON value of [editAdjustments].
     *
     * Unlike [editAdjustments], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _editAdjustments(): JsonField<List<EditAdjustment>> = body._editAdjustments()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    @JvmSynthetic internal fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    fun getPathParam(index: Int): String {
        return when (index) {
            0 -> subscriptionId
            else -> ""
        }
    }

    @NoAutoDetect
    class Body
    @JsonCreator
    private constructor(
        @JsonProperty("add")
        @ExcludeMissing
        private val add: JsonField<List<Add>> = JsonMissing.of(),
        @JsonProperty("add_adjustments")
        @ExcludeMissing
        private val addAdjustments: JsonField<List<AddAdjustment>> = JsonMissing.of(),
        @JsonProperty("allow_invoice_credit_or_void")
        @ExcludeMissing
        private val allowInvoiceCreditOrVoid: JsonField<Boolean> = JsonMissing.of(),
        @JsonProperty("edit")
        @ExcludeMissing
        private val edit: JsonField<List<Edit>> = JsonMissing.of(),
        @JsonProperty("edit_adjustments")
        @ExcludeMissing
        private val editAdjustments: JsonField<List<EditAdjustment>> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * A list of price intervals to add to the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun add(): Optional<List<Add>> = Optional.ofNullable(add.getNullable("add"))

        /**
         * A list of adjustments to add to the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun addAdjustments(): Optional<List<AddAdjustment>> =
            Optional.ofNullable(addAdjustments.getNullable("add_adjustments"))

        /**
         * If false, this request will fail if it would void an issued invoice or create a credit
         * note. Consider using this as a safety mechanism if you do not expect existing invoices to
         * be changed.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun allowInvoiceCreditOrVoid(): Optional<Boolean> =
            Optional.ofNullable(
                allowInvoiceCreditOrVoid.getNullable("allow_invoice_credit_or_void")
            )

        /**
         * A list of price intervals to edit on the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun edit(): Optional<List<Edit>> = Optional.ofNullable(edit.getNullable("edit"))

        /**
         * A list of adjustments to edit on the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun editAdjustments(): Optional<List<EditAdjustment>> =
            Optional.ofNullable(editAdjustments.getNullable("edit_adjustments"))

        /**
         * Returns the raw JSON value of [add].
         *
         * Unlike [add], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("add") @ExcludeMissing fun _add(): JsonField<List<Add>> = add

        /**
         * Returns the raw JSON value of [addAdjustments].
         *
         * Unlike [addAdjustments], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("add_adjustments")
        @ExcludeMissing
        fun _addAdjustments(): JsonField<List<AddAdjustment>> = addAdjustments

        /**
         * Returns the raw JSON value of [allowInvoiceCreditOrVoid].
         *
         * Unlike [allowInvoiceCreditOrVoid], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("allow_invoice_credit_or_void")
        @ExcludeMissing
        fun _allowInvoiceCreditOrVoid(): JsonField<Boolean> = allowInvoiceCreditOrVoid

        /**
         * Returns the raw JSON value of [edit].
         *
         * Unlike [edit], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("edit") @ExcludeMissing fun _edit(): JsonField<List<Edit>> = edit

        /**
         * Returns the raw JSON value of [editAdjustments].
         *
         * Unlike [editAdjustments], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("edit_adjustments")
        @ExcludeMissing
        fun _editAdjustments(): JsonField<List<EditAdjustment>> = editAdjustments

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            add().ifPresent { it.forEach { it.validate() } }
            addAdjustments().ifPresent { it.forEach { it.validate() } }
            allowInvoiceCreditOrVoid()
            edit().ifPresent { it.forEach { it.validate() } }
            editAdjustments().ifPresent { it.forEach { it.validate() } }
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [Body]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var add: JsonField<MutableList<Add>>? = null
            private var addAdjustments: JsonField<MutableList<AddAdjustment>>? = null
            private var allowInvoiceCreditOrVoid: JsonField<Boolean> = JsonMissing.of()
            private var edit: JsonField<MutableList<Edit>>? = null
            private var editAdjustments: JsonField<MutableList<EditAdjustment>>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                add = body.add.map { it.toMutableList() }
                addAdjustments = body.addAdjustments.map { it.toMutableList() }
                allowInvoiceCreditOrVoid = body.allowInvoiceCreditOrVoid
                edit = body.edit.map { it.toMutableList() }
                editAdjustments = body.editAdjustments.map { it.toMutableList() }
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            /** A list of price intervals to add to the subscription. */
            fun add(add: List<Add>) = add(JsonField.of(add))

            /**
             * Sets [Builder.add] to an arbitrary JSON value.
             *
             * You should usually call [Builder.add] with a well-typed `List<Add>` value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun add(add: JsonField<List<Add>>) = apply { this.add = add.map { it.toMutableList() } }

            /**
             * Adds a single [Add] to [Builder.add].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAdd(add: Add) = apply {
                this.add =
                    (this.add ?: JsonField.of(mutableListOf())).also {
                        checkKnown("add", it).add(add)
                    }
            }

            /** A list of adjustments to add to the subscription. */
            fun addAdjustments(addAdjustments: List<AddAdjustment>) =
                addAdjustments(JsonField.of(addAdjustments))

            /**
             * Sets [Builder.addAdjustments] to an arbitrary JSON value.
             *
             * You should usually call [Builder.addAdjustments] with a well-typed
             * `List<AddAdjustment>` value instead. This method is primarily for setting the field
             * to an undocumented or not yet supported value.
             */
            fun addAdjustments(addAdjustments: JsonField<List<AddAdjustment>>) = apply {
                this.addAdjustments = addAdjustments.map { it.toMutableList() }
            }

            /**
             * Adds a single [AddAdjustment] to [addAdjustments].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
                addAdjustments =
                    (addAdjustments ?: JsonField.of(mutableListOf())).also {
                        checkKnown("addAdjustments", it).add(addAdjustment)
                    }
            }

            /**
             * If false, this request will fail if it would void an issued invoice or create a
             * credit note. Consider using this as a safety mechanism if you do not expect existing
             * invoices to be changed.
             */
            fun allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid: Boolean?) =
                allowInvoiceCreditOrVoid(JsonField.ofNullable(allowInvoiceCreditOrVoid))

            /**
             * Alias for [Builder.allowInvoiceCreditOrVoid].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid: Boolean) =
                allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid as Boolean?)

            /**
             * Alias for calling [Builder.allowInvoiceCreditOrVoid] with
             * `allowInvoiceCreditOrVoid.orElse(null)`.
             */
            fun allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid: Optional<Boolean>) =
                allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid.getOrNull())

            /**
             * Sets [Builder.allowInvoiceCreditOrVoid] to an arbitrary JSON value.
             *
             * You should usually call [Builder.allowInvoiceCreditOrVoid] with a well-typed
             * [Boolean] value instead. This method is primarily for setting the field to an
             * undocumented or not yet supported value.
             */
            fun allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid: JsonField<Boolean>) = apply {
                this.allowInvoiceCreditOrVoid = allowInvoiceCreditOrVoid
            }

            /** A list of price intervals to edit on the subscription. */
            fun edit(edit: List<Edit>) = edit(JsonField.of(edit))

            /**
             * Sets [Builder.edit] to an arbitrary JSON value.
             *
             * You should usually call [Builder.edit] with a well-typed `List<Edit>` value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun edit(edit: JsonField<List<Edit>>) = apply {
                this.edit = edit.map { it.toMutableList() }
            }

            /**
             * Adds a single [Edit] to [Builder.edit].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addEdit(edit: Edit) = apply {
                this.edit =
                    (this.edit ?: JsonField.of(mutableListOf())).also {
                        checkKnown("edit", it).add(edit)
                    }
            }

            /** A list of adjustments to edit on the subscription. */
            fun editAdjustments(editAdjustments: List<EditAdjustment>) =
                editAdjustments(JsonField.of(editAdjustments))

            /**
             * Sets [Builder.editAdjustments] to an arbitrary JSON value.
             *
             * You should usually call [Builder.editAdjustments] with a well-typed
             * `List<EditAdjustment>` value instead. This method is primarily for setting the field
             * to an undocumented or not yet supported value.
             */
            fun editAdjustments(editAdjustments: JsonField<List<EditAdjustment>>) = apply {
                this.editAdjustments = editAdjustments.map { it.toMutableList() }
            }

            /**
             * Adds a single [EditAdjustment] to [editAdjustments].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addEditAdjustment(editAdjustment: EditAdjustment) = apply {
                editAdjustments =
                    (editAdjustments ?: JsonField.of(mutableListOf())).also {
                        checkKnown("editAdjustments", it).add(editAdjustment)
                    }
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Body =
                Body(
                    (add ?: JsonMissing.of()).map { it.toImmutable() },
                    (addAdjustments ?: JsonMissing.of()).map { it.toImmutable() },
                    allowInvoiceCreditOrVoid,
                    (edit ?: JsonMissing.of()).map { it.toImmutable() },
                    (editAdjustments ?: JsonMissing.of()).map { it.toImmutable() },
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Body && add == other.add && addAdjustments == other.addAdjustments && allowInvoiceCreditOrVoid == other.allowInvoiceCreditOrVoid && edit == other.edit && editAdjustments == other.editAdjustments && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(add, addAdjustments, allowInvoiceCreditOrVoid, edit, editAdjustments, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{add=$add, addAdjustments=$addAdjustments, allowInvoiceCreditOrVoid=$allowInvoiceCreditOrVoid, edit=$edit, editAdjustments=$editAdjustments, additionalProperties=$additionalProperties}"
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of
         * [SubscriptionPriceIntervalsParams].
         *
         * The following fields are required:
         * ```java
         * .subscriptionId()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [SubscriptionPriceIntervalsParams]. */
    @NoAutoDetect
    class Builder internal constructor() {

        private var subscriptionId: String? = null
        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(subscriptionPriceIntervalsParams: SubscriptionPriceIntervalsParams) =
            apply {
                subscriptionId = subscriptionPriceIntervalsParams.subscriptionId
                body = subscriptionPriceIntervalsParams.body.toBuilder()
                additionalHeaders = subscriptionPriceIntervalsParams.additionalHeaders.toBuilder()
                additionalQueryParams =
                    subscriptionPriceIntervalsParams.additionalQueryParams.toBuilder()
            }

        fun subscriptionId(subscriptionId: String) = apply { this.subscriptionId = subscriptionId }

        /** A list of price intervals to add to the subscription. */
        fun add(add: List<Add>) = apply { body.add(add) }

        /**
         * Sets [Builder.add] to an arbitrary JSON value.
         *
         * You should usually call [Builder.add] with a well-typed `List<Add>` value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun add(add: JsonField<List<Add>>) = apply { body.add(add) }

        /**
         * Adds a single [Add] to [Builder.add].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAdd(add: Add) = apply { body.addAdd(add) }

        /** A list of adjustments to add to the subscription. */
        fun addAdjustments(addAdjustments: List<AddAdjustment>) = apply {
            body.addAdjustments(addAdjustments)
        }

        /**
         * Sets [Builder.addAdjustments] to an arbitrary JSON value.
         *
         * You should usually call [Builder.addAdjustments] with a well-typed `List<AddAdjustment>`
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun addAdjustments(addAdjustments: JsonField<List<AddAdjustment>>) = apply {
            body.addAdjustments(addAdjustments)
        }

        /**
         * Adds a single [AddAdjustment] to [addAdjustments].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
            body.addAddAdjustment(addAdjustment)
        }

        /**
         * If false, this request will fail if it would void an issued invoice or create a credit
         * note. Consider using this as a safety mechanism if you do not expect existing invoices to
         * be changed.
         */
        fun allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid: Boolean?) = apply {
            body.allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid)
        }

        /**
         * Alias for [Builder.allowInvoiceCreditOrVoid].
         *
         * This unboxed primitive overload exists for backwards compatibility.
         */
        fun allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid: Boolean) =
            allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid as Boolean?)

        /**
         * Alias for calling [Builder.allowInvoiceCreditOrVoid] with
         * `allowInvoiceCreditOrVoid.orElse(null)`.
         */
        fun allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid: Optional<Boolean>) =
            allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid.getOrNull())

        /**
         * Sets [Builder.allowInvoiceCreditOrVoid] to an arbitrary JSON value.
         *
         * You should usually call [Builder.allowInvoiceCreditOrVoid] with a well-typed [Boolean]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid: JsonField<Boolean>) = apply {
            body.allowInvoiceCreditOrVoid(allowInvoiceCreditOrVoid)
        }

        /** A list of price intervals to edit on the subscription. */
        fun edit(edit: List<Edit>) = apply { body.edit(edit) }

        /**
         * Sets [Builder.edit] to an arbitrary JSON value.
         *
         * You should usually call [Builder.edit] with a well-typed `List<Edit>` value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun edit(edit: JsonField<List<Edit>>) = apply { body.edit(edit) }

        /**
         * Adds a single [Edit] to [Builder.edit].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addEdit(edit: Edit) = apply { body.addEdit(edit) }

        /** A list of adjustments to edit on the subscription. */
        fun editAdjustments(editAdjustments: List<EditAdjustment>) = apply {
            body.editAdjustments(editAdjustments)
        }

        /**
         * Sets [Builder.editAdjustments] to an arbitrary JSON value.
         *
         * You should usually call [Builder.editAdjustments] with a well-typed
         * `List<EditAdjustment>` value instead. This method is primarily for setting the field to
         * an undocumented or not yet supported value.
         */
        fun editAdjustments(editAdjustments: JsonField<List<EditAdjustment>>) = apply {
            body.editAdjustments(editAdjustments)
        }

        /**
         * Adds a single [EditAdjustment] to [editAdjustments].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addEditAdjustment(editAdjustment: EditAdjustment) = apply {
            body.addEditAdjustment(editAdjustment)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        fun build(): SubscriptionPriceIntervalsParams =
            SubscriptionPriceIntervalsParams(
                checkRequired("subscriptionId", subscriptionId),
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    @NoAutoDetect
    class Add
    @JsonCreator
    private constructor(
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<StartDate> = JsonMissing.of(),
        @JsonProperty("allocation_price")
        @ExcludeMissing
        private val allocationPrice: JsonField<AllocationPrice> = JsonMissing.of(),
        @JsonProperty("discounts")
        @ExcludeMissing
        private val discounts: JsonField<List<Discount>> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<EndDate> = JsonMissing.of(),
        @JsonProperty("external_price_id")
        @ExcludeMissing
        private val externalPriceId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("filter")
        @ExcludeMissing
        private val filter: JsonField<String> = JsonMissing.of(),
        @JsonProperty("fixed_fee_quantity_transitions")
        @ExcludeMissing
        private val fixedFeeQuantityTransitions: JsonField<List<FixedFeeQuantityTransition>> =
            JsonMissing.of(),
        @JsonProperty("maximum_amount")
        @ExcludeMissing
        private val maximumAmount: JsonField<Double> = JsonMissing.of(),
        @JsonProperty("minimum_amount")
        @ExcludeMissing
        private val minimumAmount: JsonField<Double> = JsonMissing.of(),
        @JsonProperty("price")
        @ExcludeMissing
        private val price: JsonField<Price> = JsonMissing.of(),
        @JsonProperty("price_id")
        @ExcludeMissing
        private val priceId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("usage_customer_ids")
        @ExcludeMissing
        private val usageCustomerIds: JsonField<List<String>> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun startDate(): StartDate = startDate.getRequired("start_date")

        /**
         * The definition of a new allocation price to create and add to the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun allocationPrice(): Optional<AllocationPrice> =
            Optional.ofNullable(allocationPrice.getNullable("allocation_price"))

        /**
         * A list of discounts to initialize on the price interval.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun discounts(): Optional<List<Discount>> =
            Optional.ofNullable(discounts.getNullable("discounts"))

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate.getNullable("end_date"))

        /**
         * The external price id of the price to add to the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun externalPriceId(): Optional<String> =
            Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun filter(): Optional<String> = Optional.ofNullable(filter.getNullable("filter"))

        /**
         * A list of fixed fee quantity transitions to initialize on the price interval.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun fixedFeeQuantityTransitions(): Optional<List<FixedFeeQuantityTransition>> =
            Optional.ofNullable(
                fixedFeeQuantityTransitions.getNullable("fixed_fee_quantity_transitions")
            )

        /**
         * The maximum amount that will be billed for this price interval for a given billing
         * period.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun maximumAmount(): Optional<Double> =
            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

        /**
         * The minimum amount that will be billed for this price interval for a given billing
         * period.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun minimumAmount(): Optional<Double> =
            Optional.ofNullable(minimumAmount.getNullable("minimum_amount"))

        /**
         * The definition of a new price to create and add to the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun price(): Optional<Price> = Optional.ofNullable(price.getNullable("price"))

        /**
         * The id of the price to add to the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun priceId(): Optional<String> = Optional.ofNullable(priceId.getNullable("price_id"))

        /**
         * A list of customer IDs whose usage events will be aggregated and billed under this
         * subscription. By default, a subscription only considers usage events associated with its
         * attached customer's customer_id. When usage_customer_ids is provided, the subscription
         * includes usage events from the specified customers only. Provided usage_customer_ids must
         * be either the customer for this subscription itself, or any of that customer's children.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun usageCustomerIds(): Optional<List<String>> =
            Optional.ofNullable(usageCustomerIds.getNullable("usage_customer_ids"))

        /**
         * Returns the raw JSON value of [startDate].
         *
         * Unlike [startDate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<StartDate> = startDate

        /**
         * Returns the raw JSON value of [allocationPrice].
         *
         * Unlike [allocationPrice], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("allocation_price")
        @ExcludeMissing
        fun _allocationPrice(): JsonField<AllocationPrice> = allocationPrice

        /**
         * Returns the raw JSON value of [discounts].
         *
         * Unlike [discounts], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("discounts")
        @ExcludeMissing
        fun _discounts(): JsonField<List<Discount>> = discounts

        /**
         * Returns the raw JSON value of [endDate].
         *
         * Unlike [endDate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("end_date") @ExcludeMissing fun _endDate(): JsonField<EndDate> = endDate

        /**
         * Returns the raw JSON value of [externalPriceId].
         *
         * Unlike [externalPriceId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("external_price_id")
        @ExcludeMissing
        fun _externalPriceId(): JsonField<String> = externalPriceId

        /**
         * Returns the raw JSON value of [filter].
         *
         * Unlike [filter], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("filter") @ExcludeMissing fun _filter(): JsonField<String> = filter

        /**
         * Returns the raw JSON value of [fixedFeeQuantityTransitions].
         *
         * Unlike [fixedFeeQuantityTransitions], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("fixed_fee_quantity_transitions")
        @ExcludeMissing
        fun _fixedFeeQuantityTransitions(): JsonField<List<FixedFeeQuantityTransition>> =
            fixedFeeQuantityTransitions

        /**
         * Returns the raw JSON value of [maximumAmount].
         *
         * Unlike [maximumAmount], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("maximum_amount")
        @ExcludeMissing
        fun _maximumAmount(): JsonField<Double> = maximumAmount

        /**
         * Returns the raw JSON value of [minimumAmount].
         *
         * Unlike [minimumAmount], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("minimum_amount")
        @ExcludeMissing
        fun _minimumAmount(): JsonField<Double> = minimumAmount

        /**
         * Returns the raw JSON value of [price].
         *
         * Unlike [price], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("price") @ExcludeMissing fun _price(): JsonField<Price> = price

        /**
         * Returns the raw JSON value of [priceId].
         *
         * Unlike [priceId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("price_id") @ExcludeMissing fun _priceId(): JsonField<String> = priceId

        /**
         * Returns the raw JSON value of [usageCustomerIds].
         *
         * Unlike [usageCustomerIds], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("usage_customer_ids")
        @ExcludeMissing
        fun _usageCustomerIds(): JsonField<List<String>> = usageCustomerIds

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Add = apply {
            if (validated) {
                return@apply
            }

            startDate().validate()
            allocationPrice().ifPresent { it.validate() }
            discounts().ifPresent { it.forEach { it.validate() } }
            endDate().ifPresent { it.validate() }
            externalPriceId()
            filter()
            fixedFeeQuantityTransitions().ifPresent { it.forEach { it.validate() } }
            maximumAmount()
            minimumAmount()
            price().ifPresent { it.validate() }
            priceId()
            usageCustomerIds()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Add].
             *
             * The following fields are required:
             * ```java
             * .startDate()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Add]. */
        class Builder internal constructor() {

            private var startDate: JsonField<StartDate>? = null
            private var allocationPrice: JsonField<AllocationPrice> = JsonMissing.of()
            private var discounts: JsonField<MutableList<Discount>>? = null
            private var endDate: JsonField<EndDate> = JsonMissing.of()
            private var externalPriceId: JsonField<String> = JsonMissing.of()
            private var filter: JsonField<String> = JsonMissing.of()
            private var fixedFeeQuantityTransitions:
                JsonField<MutableList<FixedFeeQuantityTransition>>? =
                null
            private var maximumAmount: JsonField<Double> = JsonMissing.of()
            private var minimumAmount: JsonField<Double> = JsonMissing.of()
            private var price: JsonField<Price> = JsonMissing.of()
            private var priceId: JsonField<String> = JsonMissing.of()
            private var usageCustomerIds: JsonField<MutableList<String>>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(add: Add) = apply {
                startDate = add.startDate
                allocationPrice = add.allocationPrice
                discounts = add.discounts.map { it.toMutableList() }
                endDate = add.endDate
                externalPriceId = add.externalPriceId
                filter = add.filter
                fixedFeeQuantityTransitions =
                    add.fixedFeeQuantityTransitions.map { it.toMutableList() }
                maximumAmount = add.maximumAmount
                minimumAmount = add.minimumAmount
                price = add.price
                priceId = add.priceId
                usageCustomerIds = add.usageCustomerIds.map { it.toMutableList() }
                additionalProperties = add.additionalProperties.toMutableMap()
            }

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription.
             */
            fun startDate(startDate: StartDate) = startDate(JsonField.of(startDate))

            /**
             * Sets [Builder.startDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.startDate] with a well-typed [StartDate] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun startDate(startDate: JsonField<StartDate>) = apply { this.startDate = startDate }

            /** Alias for calling [startDate] with `StartDate.ofDateTime(dateTime)`. */
            fun startDate(dateTime: OffsetDateTime) = startDate(StartDate.ofDateTime(dateTime))

            /**
             * Alias for calling [startDate] with
             * `StartDate.ofBillingCycleRelative(billingCycleRelative)`.
             */
            fun startDate(billingCycleRelative: BillingCycleRelativeDate) =
                startDate(StartDate.ofBillingCycleRelative(billingCycleRelative))

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: AllocationPrice?) =
                allocationPrice(JsonField.ofNullable(allocationPrice))

            /** Alias for calling [Builder.allocationPrice] with `allocationPrice.orElse(null)`. */
            fun allocationPrice(allocationPrice: Optional<AllocationPrice>) =
                allocationPrice(allocationPrice.getOrNull())

            /**
             * Sets [Builder.allocationPrice] to an arbitrary JSON value.
             *
             * You should usually call [Builder.allocationPrice] with a well-typed [AllocationPrice]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun allocationPrice(allocationPrice: JsonField<AllocationPrice>) = apply {
                this.allocationPrice = allocationPrice
            }

            /** A list of discounts to initialize on the price interval. */
            fun discounts(discounts: List<Discount>?) = discounts(JsonField.ofNullable(discounts))

            /** Alias for calling [Builder.discounts] with `discounts.orElse(null)`. */
            fun discounts(discounts: Optional<List<Discount>>) = discounts(discounts.getOrNull())

            /**
             * Sets [Builder.discounts] to an arbitrary JSON value.
             *
             * You should usually call [Builder.discounts] with a well-typed `List<Discount>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun discounts(discounts: JsonField<List<Discount>>) = apply {
                this.discounts = discounts.map { it.toMutableList() }
            }

            /**
             * Adds a single [Discount] to [discounts].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addDiscount(discount: Discount) = apply {
                discounts =
                    (discounts ?: JsonField.of(mutableListOf())).also {
                        checkKnown("discounts", it).add(discount)
                    }
            }

            /**
             * Alias for calling [addDiscount] with
             * `Discount.ofAmountDiscountCreationParams(amountDiscountCreationParams)`.
             */
            fun addDiscount(amountDiscountCreationParams: Discount.AmountDiscountCreationParams) =
                addDiscount(Discount.ofAmountDiscountCreationParams(amountDiscountCreationParams))

            /**
             * Alias for calling [addDiscount] with the following:
             * ```java
             * Discount.AmountDiscountCreationParams.builder()
             *     .discountType(SubscriptionPriceIntervalsParams.Add.Discount.AmountDiscountCreationParams.DiscountType.AMOUNT)
             *     .amountDiscount(amountDiscount)
             *     .build()
             * ```
             */
            fun addAmountDiscountCreationParamsDiscount(amountDiscount: Double) =
                addDiscount(
                    Discount.AmountDiscountCreationParams.builder()
                        .discountType(
                            SubscriptionPriceIntervalsParams.Add.Discount
                                .AmountDiscountCreationParams
                                .DiscountType
                                .AMOUNT
                        )
                        .amountDiscount(amountDiscount)
                        .build()
                )

            /**
             * Alias for calling [addDiscount] with
             * `Discount.ofPercentageDiscountCreationParams(percentageDiscountCreationParams)`.
             */
            fun addDiscount(
                percentageDiscountCreationParams: Discount.PercentageDiscountCreationParams
            ) =
                addDiscount(
                    Discount.ofPercentageDiscountCreationParams(percentageDiscountCreationParams)
                )

            /**
             * Alias for calling [addDiscount] with the following:
             * ```java
             * Discount.PercentageDiscountCreationParams.builder()
             *     .discountType(SubscriptionPriceIntervalsParams.Add.Discount.PercentageDiscountCreationParams.DiscountType.PERCENTAGE)
             *     .percentageDiscount(percentageDiscount)
             *     .build()
             * ```
             */
            fun addPercentageDiscountCreationParamsDiscount(percentageDiscount: Double) =
                addDiscount(
                    Discount.PercentageDiscountCreationParams.builder()
                        .discountType(
                            SubscriptionPriceIntervalsParams.Add.Discount
                                .PercentageDiscountCreationParams
                                .DiscountType
                                .PERCENTAGE
                        )
                        .percentageDiscount(percentageDiscount)
                        .build()
                )

            /**
             * Alias for calling [addDiscount] with
             * `Discount.ofUsageDiscountCreationParams(usageDiscountCreationParams)`.
             */
            fun addDiscount(usageDiscountCreationParams: Discount.UsageDiscountCreationParams) =
                addDiscount(Discount.ofUsageDiscountCreationParams(usageDiscountCreationParams))

            /**
             * Alias for calling [addDiscount] with the following:
             * ```java
             * Discount.UsageDiscountCreationParams.builder()
             *     .discountType(SubscriptionPriceIntervalsParams.Add.Discount.UsageDiscountCreationParams.DiscountType.USAGE)
             *     .usageDiscount(usageDiscount)
             *     .build()
             * ```
             */
            fun addUsageDiscountCreationParamsDiscount(usageDiscount: Double) =
                addDiscount(
                    Discount.UsageDiscountCreationParams.builder()
                        .discountType(
                            SubscriptionPriceIntervalsParams.Add.Discount
                                .UsageDiscountCreationParams
                                .DiscountType
                                .USAGE
                        )
                        .usageDiscount(usageDiscount)
                        .build()
                )

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription.
             */
            fun endDate(endDate: EndDate?) = endDate(JsonField.ofNullable(endDate))

            /** Alias for calling [Builder.endDate] with `endDate.orElse(null)`. */
            fun endDate(endDate: Optional<EndDate>) = endDate(endDate.getOrNull())

            /**
             * Sets [Builder.endDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.endDate] with a well-typed [EndDate] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun endDate(endDate: JsonField<EndDate>) = apply { this.endDate = endDate }

            /** Alias for calling [endDate] with `EndDate.ofDateTime(dateTime)`. */
            fun endDate(dateTime: OffsetDateTime) = endDate(EndDate.ofDateTime(dateTime))

            /**
             * Alias for calling [endDate] with
             * `EndDate.ofBillingCycleRelative(billingCycleRelative)`.
             */
            fun endDate(billingCycleRelative: BillingCycleRelativeDate) =
                endDate(EndDate.ofBillingCycleRelative(billingCycleRelative))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: String?) =
                externalPriceId(JsonField.ofNullable(externalPriceId))

            /** Alias for calling [Builder.externalPriceId] with `externalPriceId.orElse(null)`. */
            fun externalPriceId(externalPriceId: Optional<String>) =
                externalPriceId(externalPriceId.getOrNull())

            /**
             * Sets [Builder.externalPriceId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.externalPriceId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                this.externalPriceId = externalPriceId
            }

            /**
             * An additional filter to apply to usage queries. This filter must be expressed as a
             * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
             * null, usage queries will not include any additional filter.
             */
            fun filter(filter: String?) = filter(JsonField.ofNullable(filter))

            /** Alias for calling [Builder.filter] with `filter.orElse(null)`. */
            fun filter(filter: Optional<String>) = filter(filter.getOrNull())

            /**
             * Sets [Builder.filter] to an arbitrary JSON value.
             *
             * You should usually call [Builder.filter] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun filter(filter: JsonField<String>) = apply { this.filter = filter }

            /** A list of fixed fee quantity transitions to initialize on the price interval. */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>?
            ) = fixedFeeQuantityTransitions(JsonField.ofNullable(fixedFeeQuantityTransitions))

            /**
             * Alias for calling [Builder.fixedFeeQuantityTransitions] with
             * `fixedFeeQuantityTransitions.orElse(null)`.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: Optional<List<FixedFeeQuantityTransition>>
            ) = fixedFeeQuantityTransitions(fixedFeeQuantityTransitions.getOrNull())

            /**
             * Sets [Builder.fixedFeeQuantityTransitions] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fixedFeeQuantityTransitions] with a well-typed
             * `List<FixedFeeQuantityTransition>` value instead. This method is primarily for
             * setting the field to an undocumented or not yet supported value.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: JsonField<List<FixedFeeQuantityTransition>>
            ) = apply {
                this.fixedFeeQuantityTransitions =
                    fixedFeeQuantityTransitions.map { it.toMutableList() }
            }

            /**
             * Adds a single [FixedFeeQuantityTransition] to [fixedFeeQuantityTransitions].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addFixedFeeQuantityTransition(
                fixedFeeQuantityTransition: FixedFeeQuantityTransition
            ) = apply {
                fixedFeeQuantityTransitions =
                    (fixedFeeQuantityTransitions ?: JsonField.of(mutableListOf())).also {
                        checkKnown("fixedFeeQuantityTransitions", it)
                            .add(fixedFeeQuantityTransition)
                    }
            }

            /**
             * The maximum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun maximumAmount(maximumAmount: Double?) =
                maximumAmount(JsonField.ofNullable(maximumAmount))

            /**
             * Alias for [Builder.maximumAmount].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun maximumAmount(maximumAmount: Double) = maximumAmount(maximumAmount as Double?)

            /** Alias for calling [Builder.maximumAmount] with `maximumAmount.orElse(null)`. */
            fun maximumAmount(maximumAmount: Optional<Double>) =
                maximumAmount(maximumAmount.getOrNull())

            /**
             * Sets [Builder.maximumAmount] to an arbitrary JSON value.
             *
             * You should usually call [Builder.maximumAmount] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun maximumAmount(maximumAmount: JsonField<Double>) = apply {
                this.maximumAmount = maximumAmount
            }

            /**
             * The minimum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun minimumAmount(minimumAmount: Double?) =
                minimumAmount(JsonField.ofNullable(minimumAmount))

            /**
             * Alias for [Builder.minimumAmount].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun minimumAmount(minimumAmount: Double) = minimumAmount(minimumAmount as Double?)

            /** Alias for calling [Builder.minimumAmount] with `minimumAmount.orElse(null)`. */
            fun minimumAmount(minimumAmount: Optional<Double>) =
                minimumAmount(minimumAmount.getOrNull())

            /**
             * Sets [Builder.minimumAmount] to an arbitrary JSON value.
             *
             * You should usually call [Builder.minimumAmount] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun minimumAmount(minimumAmount: JsonField<Double>) = apply {
                this.minimumAmount = minimumAmount
            }

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Price?) = price(JsonField.ofNullable(price))

            /** Alias for calling [Builder.price] with `price.orElse(null)`. */
            fun price(price: Optional<Price>) = price(price.getOrNull())

            /**
             * Sets [Builder.price] to an arbitrary JSON value.
             *
             * You should usually call [Builder.price] with a well-typed [Price] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun price(price: JsonField<Price>) = apply { this.price = price }

            /** Alias for calling [price] with `Price.ofNewFloatingUnit(newFloatingUnit)`. */
            fun price(newFloatingUnit: Price.NewFloatingUnitPrice) =
                price(Price.ofNewFloatingUnit(newFloatingUnit))

            /** Alias for calling [price] with `Price.ofNewFloatingPackage(newFloatingPackage)`. */
            fun price(newFloatingPackage: Price.NewFloatingPackagePrice) =
                price(Price.ofNewFloatingPackage(newFloatingPackage))

            /** Alias for calling [price] with `Price.ofNewFloatingMatrix(newFloatingMatrix)`. */
            fun price(newFloatingMatrix: Price.NewFloatingMatrixPrice) =
                price(Price.ofNewFloatingMatrix(newFloatingMatrix))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingMatrixWithAllocation(newFloatingMatrixWithAllocation)`.
             */
            fun price(newFloatingMatrixWithAllocation: Price.NewFloatingMatrixWithAllocationPrice) =
                price(Price.ofNewFloatingMatrixWithAllocation(newFloatingMatrixWithAllocation))

            /** Alias for calling [price] with `Price.ofNewFloatingTiered(newFloatingTiered)`. */
            fun price(newFloatingTiered: Price.NewFloatingTieredPrice) =
                price(Price.ofNewFloatingTiered(newFloatingTiered))

            /**
             * Alias for calling [price] with `Price.ofNewFloatingTieredBps(newFloatingTieredBps)`.
             */
            fun price(newFloatingTieredBps: Price.NewFloatingTieredBpsPrice) =
                price(Price.ofNewFloatingTieredBps(newFloatingTieredBps))

            /** Alias for calling [price] with `Price.ofNewFloatingBps(newFloatingBps)`. */
            fun price(newFloatingBps: Price.NewFloatingBpsPrice) =
                price(Price.ofNewFloatingBps(newFloatingBps))

            /** Alias for calling [price] with `Price.ofNewFloatingBulkBps(newFloatingBulkBps)`. */
            fun price(newFloatingBulkBps: Price.NewFloatingBulkBpsPrice) =
                price(Price.ofNewFloatingBulkBps(newFloatingBulkBps))

            /** Alias for calling [price] with `Price.ofNewFloatingBulk(newFloatingBulk)`. */
            fun price(newFloatingBulk: Price.NewFloatingBulkPrice) =
                price(Price.ofNewFloatingBulk(newFloatingBulk))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingThresholdTotalAmount(newFloatingThresholdTotalAmount)`.
             */
            fun price(newFloatingThresholdTotalAmount: Price.NewFloatingThresholdTotalAmountPrice) =
                price(Price.ofNewFloatingThresholdTotalAmount(newFloatingThresholdTotalAmount))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingTieredPackage(newFloatingTieredPackage)`.
             */
            fun price(newFloatingTieredPackage: Price.NewFloatingTieredPackagePrice) =
                price(Price.ofNewFloatingTieredPackage(newFloatingTieredPackage))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingGroupedTiered(newFloatingGroupedTiered)`.
             */
            fun price(newFloatingGroupedTiered: Price.NewFloatingGroupedTieredPrice) =
                price(Price.ofNewFloatingGroupedTiered(newFloatingGroupedTiered))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingMaxGroupTieredPackage(newFloatingMaxGroupTieredPackage)`.
             */
            fun price(
                newFloatingMaxGroupTieredPackage: Price.NewFloatingMaxGroupTieredPackagePrice
            ) = price(Price.ofNewFloatingMaxGroupTieredPackage(newFloatingMaxGroupTieredPackage))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingTieredWithMinimum(newFloatingTieredWithMinimum)`.
             */
            fun price(newFloatingTieredWithMinimum: Price.NewFloatingTieredWithMinimumPrice) =
                price(Price.ofNewFloatingTieredWithMinimum(newFloatingTieredWithMinimum))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingPackageWithAllocation(newFloatingPackageWithAllocation)`.
             */
            fun price(
                newFloatingPackageWithAllocation: Price.NewFloatingPackageWithAllocationPrice
            ) = price(Price.ofNewFloatingPackageWithAllocation(newFloatingPackageWithAllocation))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingTieredPackageWithMinimum(newFloatingTieredPackageWithMinimum)`.
             */
            fun price(
                newFloatingTieredPackageWithMinimum: Price.NewFloatingTieredPackageWithMinimumPrice
            ) =
                price(
                    Price.ofNewFloatingTieredPackageWithMinimum(newFloatingTieredPackageWithMinimum)
                )

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingUnitWithPercent(newFloatingUnitWithPercent)`.
             */
            fun price(newFloatingUnitWithPercent: Price.NewFloatingUnitWithPercentPrice) =
                price(Price.ofNewFloatingUnitWithPercent(newFloatingUnitWithPercent))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingTieredWithProration(newFloatingTieredWithProration)`.
             */
            fun price(newFloatingTieredWithProration: Price.NewFloatingTieredWithProrationPrice) =
                price(Price.ofNewFloatingTieredWithProration(newFloatingTieredWithProration))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingUnitWithProration(newFloatingUnitWithProration)`.
             */
            fun price(newFloatingUnitWithProration: Price.NewFloatingUnitWithProrationPrice) =
                price(Price.ofNewFloatingUnitWithProration(newFloatingUnitWithProration))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingGroupedAllocation(newFloatingGroupedAllocation)`.
             */
            fun price(newFloatingGroupedAllocation: Price.NewFloatingGroupedAllocationPrice) =
                price(Price.ofNewFloatingGroupedAllocation(newFloatingGroupedAllocation))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingGroupedWithProratedMinimum(newFloatingGroupedWithProratedMinimum)`.
             */
            fun price(
                newFloatingGroupedWithProratedMinimum:
                    Price.NewFloatingGroupedWithProratedMinimumPrice
            ) =
                price(
                    Price.ofNewFloatingGroupedWithProratedMinimum(
                        newFloatingGroupedWithProratedMinimum
                    )
                )

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingGroupedWithMeteredMinimum(newFloatingGroupedWithMeteredMinimum)`.
             */
            fun price(
                newFloatingGroupedWithMeteredMinimum:
                    Price.NewFloatingGroupedWithMeteredMinimumPrice
            ) =
                price(
                    Price.ofNewFloatingGroupedWithMeteredMinimum(
                        newFloatingGroupedWithMeteredMinimum
                    )
                )

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingMatrixWithDisplayName(newFloatingMatrixWithDisplayName)`.
             */
            fun price(
                newFloatingMatrixWithDisplayName: Price.NewFloatingMatrixWithDisplayNamePrice
            ) = price(Price.ofNewFloatingMatrixWithDisplayName(newFloatingMatrixWithDisplayName))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingBulkWithProration(newFloatingBulkWithProration)`.
             */
            fun price(newFloatingBulkWithProration: Price.NewFloatingBulkWithProrationPrice) =
                price(Price.ofNewFloatingBulkWithProration(newFloatingBulkWithProration))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingGroupedTieredPackage(newFloatingGroupedTieredPackage)`.
             */
            fun price(newFloatingGroupedTieredPackage: Price.NewFloatingGroupedTieredPackagePrice) =
                price(Price.ofNewFloatingGroupedTieredPackage(newFloatingGroupedTieredPackage))

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingScalableMatrixWithUnitPricing(newFloatingScalableMatrixWithUnitPricing)`.
             */
            fun price(
                newFloatingScalableMatrixWithUnitPricing:
                    Price.NewFloatingScalableMatrixWithUnitPricingPrice
            ) =
                price(
                    Price.ofNewFloatingScalableMatrixWithUnitPricing(
                        newFloatingScalableMatrixWithUnitPricing
                    )
                )

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingScalableMatrixWithTieredPricing(newFloatingScalableMatrixWithTieredPricing)`.
             */
            fun price(
                newFloatingScalableMatrixWithTieredPricing:
                    Price.NewFloatingScalableMatrixWithTieredPricingPrice
            ) =
                price(
                    Price.ofNewFloatingScalableMatrixWithTieredPricing(
                        newFloatingScalableMatrixWithTieredPricing
                    )
                )

            /**
             * Alias for calling [price] with
             * `Price.ofNewFloatingCumulativeGroupedBulk(newFloatingCumulativeGroupedBulk)`.
             */
            fun price(
                newFloatingCumulativeGroupedBulk: Price.NewFloatingCumulativeGroupedBulkPrice
            ) = price(Price.ofNewFloatingCumulativeGroupedBulk(newFloatingCumulativeGroupedBulk))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: String?) = priceId(JsonField.ofNullable(priceId))

            /** Alias for calling [Builder.priceId] with `priceId.orElse(null)`. */
            fun priceId(priceId: Optional<String>) = priceId(priceId.getOrNull())

            /**
             * Sets [Builder.priceId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.priceId] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun priceId(priceId: JsonField<String>) = apply { this.priceId = priceId }

            /**
             * A list of customer IDs whose usage events will be aggregated and billed under this
             * subscription. By default, a subscription only considers usage events associated with
             * its attached customer's customer_id. When usage_customer_ids is provided, the
             * subscription includes usage events from the specified customers only. Provided
             * usage_customer_ids must be either the customer for this subscription itself, or any
             * of that customer's children.
             */
            fun usageCustomerIds(usageCustomerIds: List<String>?) =
                usageCustomerIds(JsonField.ofNullable(usageCustomerIds))

            /**
             * Alias for calling [Builder.usageCustomerIds] with `usageCustomerIds.orElse(null)`.
             */
            fun usageCustomerIds(usageCustomerIds: Optional<List<String>>) =
                usageCustomerIds(usageCustomerIds.getOrNull())

            /**
             * Sets [Builder.usageCustomerIds] to an arbitrary JSON value.
             *
             * You should usually call [Builder.usageCustomerIds] with a well-typed `List<String>`
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun usageCustomerIds(usageCustomerIds: JsonField<List<String>>) = apply {
                this.usageCustomerIds = usageCustomerIds.map { it.toMutableList() }
            }

            /**
             * Adds a single [String] to [usageCustomerIds].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addUsageCustomerId(usageCustomerId: String) = apply {
                usageCustomerIds =
                    (usageCustomerIds ?: JsonField.of(mutableListOf())).also {
                        checkKnown("usageCustomerIds", it).add(usageCustomerId)
                    }
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Add =
                Add(
                    checkRequired("startDate", startDate),
                    allocationPrice,
                    (discounts ?: JsonMissing.of()).map { it.toImmutable() },
                    endDate,
                    externalPriceId,
                    filter,
                    (fixedFeeQuantityTransitions ?: JsonMissing.of()).map { it.toImmutable() },
                    maximumAmount,
                    minimumAmount,
                    price,
                    priceId,
                    (usageCustomerIds ?: JsonMissing.of()).map { it.toImmutable() },
                    additionalProperties.toImmutable(),
                )
        }

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription.
         */
        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelative: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelative(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelative)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelative(): Boolean = billingCycleRelative != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelative(): BillingCycleRelativeDate =
                billingCycleRelative.getOrThrow("billingCycleRelative")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelative != null ->
                        visitor.visitBillingCycleRelative(billingCycleRelative)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): StartDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelative(
                            billingCycleRelative: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelative == other.billingCycleRelative /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelative) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelative != null ->
                        "StartDate{billingCycleRelative=$billingCycleRelative}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelative = billingCycleRelative)
            }

            /**
             * An interface that defines how to map each variant of [StartDate] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate): T

                /**
                 * Maps an unknown variant of [StartDate] to a value of type [T].
                 *
                 * An instance of [StartDate] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelative = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelative != null ->
                            generator.writeObject(value.billingCycleRelative)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        /** The definition of a new allocation price to create and add to the subscription. */
        @NoAutoDetect
        class AllocationPrice
        @JsonCreator
        private constructor(
            @JsonProperty("amount")
            @ExcludeMissing
            private val amount: JsonField<String> = JsonMissing.of(),
            @JsonProperty("cadence")
            @ExcludeMissing
            private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("currency")
            @ExcludeMissing
            private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("expires_at_end_of_cadence")
            @ExcludeMissing
            private val expiresAtEndOfCadence: JsonField<Boolean> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /**
             * An amount of the currency to allocate to the customer at the specified cadence.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun amount(): String = amount.getRequired("amount")

            /**
             * The cadence at which to allocate the amount to the customer.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string or a custom pricing unit identifier in which to bill this
             * price.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * Whether the allocated amount should expire at the end of the cadence or roll over to
             * the next period.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun expiresAtEndOfCadence(): Boolean =
                expiresAtEndOfCadence.getRequired("expires_at_end_of_cadence")

            /**
             * Returns the raw JSON value of [amount].
             *
             * Unlike [amount], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("amount") @ExcludeMissing fun _amount(): JsonField<String> = amount

            /**
             * Returns the raw JSON value of [cadence].
             *
             * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected type.
             */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * Returns the raw JSON value of [currency].
             *
             * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Returns the raw JSON value of [expiresAtEndOfCadence].
             *
             * Unlike [expiresAtEndOfCadence], this method doesn't throw if the JSON field has an
             * unexpected type.
             */
            @JsonProperty("expires_at_end_of_cadence")
            @ExcludeMissing
            fun _expiresAtEndOfCadence(): JsonField<Boolean> = expiresAtEndOfCadence

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): AllocationPrice = apply {
                if (validated) {
                    return@apply
                }

                amount()
                cadence()
                currency()
                expiresAtEndOfCadence()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [AllocationPrice].
                 *
                 * The following fields are required:
                 * ```java
                 * .amount()
                 * .cadence()
                 * .currency()
                 * .expiresAtEndOfCadence()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [AllocationPrice]. */
            class Builder internal constructor() {

                private var amount: JsonField<String>? = null
                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var expiresAtEndOfCadence: JsonField<Boolean>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(allocationPrice: AllocationPrice) = apply {
                    amount = allocationPrice.amount
                    cadence = allocationPrice.cadence
                    currency = allocationPrice.currency
                    expiresAtEndOfCadence = allocationPrice.expiresAtEndOfCadence
                    additionalProperties = allocationPrice.additionalProperties.toMutableMap()
                }

                /**
                 * An amount of the currency to allocate to the customer at the specified cadence.
                 */
                fun amount(amount: String) = amount(JsonField.of(amount))

                /**
                 * Sets [Builder.amount] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.amount] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun amount(amount: JsonField<String>) = apply { this.amount = amount }

                /** The cadence at which to allocate the amount to the customer. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /**
                 * Sets [Builder.cadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /**
                 * An ISO 4217 currency string or a custom pricing unit identifier in which to bill
                 * this price.
                 */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * Sets [Builder.currency] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.currency] with a well-typed [String] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /**
                 * Whether the allocated amount should expire at the end of the cadence or roll over
                 * to the next period.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: Boolean) =
                    expiresAtEndOfCadence(JsonField.of(expiresAtEndOfCadence))

                /**
                 * Sets [Builder.expiresAtEndOfCadence] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.expiresAtEndOfCadence] with a well-typed
                 * [Boolean] value instead. This method is primarily for setting the field to an
                 * undocumented or not yet supported value.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: JsonField<Boolean>) = apply {
                    this.expiresAtEndOfCadence = expiresAtEndOfCadence
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): AllocationPrice =
                    AllocationPrice(
                        checkRequired("amount", amount),
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("expiresAtEndOfCadence", expiresAtEndOfCadence),
                        additionalProperties.toImmutable(),
                    )
            }

            /** The cadence at which to allocate the amount to the customer. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ONE_TIME -> Value.ONE_TIME
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        ANNUAL -> Value.ANNUAL
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ONE_TIME -> Known.ONE_TIME
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        ANNUAL -> Known.ANNUAL
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 *   expected primitive type.
                 */
                fun asString(): String =
                    _value().asString().orElseThrow {
                        OrbInvalidDataException("Value is not a String")
                    }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is AllocationPrice && amount == other.amount && cadence == other.cadence && currency == other.currency && expiresAtEndOfCadence == other.expiresAtEndOfCadence && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(amount, cadence, currency, expiresAtEndOfCadence, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "AllocationPrice{amount=$amount, cadence=$cadence, currency=$currency, expiresAtEndOfCadence=$expiresAtEndOfCadence, additionalProperties=$additionalProperties}"
        }

        @JsonDeserialize(using = Discount.Deserializer::class)
        @JsonSerialize(using = Discount.Serializer::class)
        class Discount
        private constructor(
            private val amountDiscountCreationParams: AmountDiscountCreationParams? = null,
            private val percentageDiscountCreationParams: PercentageDiscountCreationParams? = null,
            private val usageDiscountCreationParams: UsageDiscountCreationParams? = null,
            private val _json: JsonValue? = null,
        ) {

            fun amountDiscountCreationParams(): Optional<AmountDiscountCreationParams> =
                Optional.ofNullable(amountDiscountCreationParams)

            fun percentageDiscountCreationParams(): Optional<PercentageDiscountCreationParams> =
                Optional.ofNullable(percentageDiscountCreationParams)

            fun usageDiscountCreationParams(): Optional<UsageDiscountCreationParams> =
                Optional.ofNullable(usageDiscountCreationParams)

            fun isAmountDiscountCreationParams(): Boolean = amountDiscountCreationParams != null

            fun isPercentageDiscountCreationParams(): Boolean =
                percentageDiscountCreationParams != null

            fun isUsageDiscountCreationParams(): Boolean = usageDiscountCreationParams != null

            fun asAmountDiscountCreationParams(): AmountDiscountCreationParams =
                amountDiscountCreationParams.getOrThrow("amountDiscountCreationParams")

            fun asPercentageDiscountCreationParams(): PercentageDiscountCreationParams =
                percentageDiscountCreationParams.getOrThrow("percentageDiscountCreationParams")

            fun asUsageDiscountCreationParams(): UsageDiscountCreationParams =
                usageDiscountCreationParams.getOrThrow("usageDiscountCreationParams")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    amountDiscountCreationParams != null ->
                        visitor.visitAmountDiscountCreationParams(amountDiscountCreationParams)
                    percentageDiscountCreationParams != null ->
                        visitor.visitPercentageDiscountCreationParams(
                            percentageDiscountCreationParams
                        )
                    usageDiscountCreationParams != null ->
                        visitor.visitUsageDiscountCreationParams(usageDiscountCreationParams)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Discount = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitAmountDiscountCreationParams(
                            amountDiscountCreationParams: AmountDiscountCreationParams
                        ) {
                            amountDiscountCreationParams.validate()
                        }

                        override fun visitPercentageDiscountCreationParams(
                            percentageDiscountCreationParams: PercentageDiscountCreationParams
                        ) {
                            percentageDiscountCreationParams.validate()
                        }

                        override fun visitUsageDiscountCreationParams(
                            usageDiscountCreationParams: UsageDiscountCreationParams
                        ) {
                            usageDiscountCreationParams.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && amountDiscountCreationParams == other.amountDiscountCreationParams && percentageDiscountCreationParams == other.percentageDiscountCreationParams && usageDiscountCreationParams == other.usageDiscountCreationParams /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(amountDiscountCreationParams, percentageDiscountCreationParams, usageDiscountCreationParams) /* spotless:on */

            override fun toString(): String =
                when {
                    amountDiscountCreationParams != null ->
                        "Discount{amountDiscountCreationParams=$amountDiscountCreationParams}"
                    percentageDiscountCreationParams != null ->
                        "Discount{percentageDiscountCreationParams=$percentageDiscountCreationParams}"
                    usageDiscountCreationParams != null ->
                        "Discount{usageDiscountCreationParams=$usageDiscountCreationParams}"
                    _json != null -> "Discount{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Discount")
                }

            companion object {

                @JvmStatic
                fun ofAmountDiscountCreationParams(
                    amountDiscountCreationParams: AmountDiscountCreationParams
                ) = Discount(amountDiscountCreationParams = amountDiscountCreationParams)

                @JvmStatic
                fun ofPercentageDiscountCreationParams(
                    percentageDiscountCreationParams: PercentageDiscountCreationParams
                ) = Discount(percentageDiscountCreationParams = percentageDiscountCreationParams)

                @JvmStatic
                fun ofUsageDiscountCreationParams(
                    usageDiscountCreationParams: UsageDiscountCreationParams
                ) = Discount(usageDiscountCreationParams = usageDiscountCreationParams)
            }

            /**
             * An interface that defines how to map each variant of [Discount] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitAmountDiscountCreationParams(
                    amountDiscountCreationParams: AmountDiscountCreationParams
                ): T

                fun visitPercentageDiscountCreationParams(
                    percentageDiscountCreationParams: PercentageDiscountCreationParams
                ): T

                fun visitUsageDiscountCreationParams(
                    usageDiscountCreationParams: UsageDiscountCreationParams
                ): T

                /**
                 * Maps an unknown variant of [Discount] to a value of type [T].
                 *
                 * An instance of [Discount] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Discount: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<Discount>(Discount::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Discount {
                    val json = JsonValue.fromJsonNode(node)
                    val discountType =
                        json.asObject().getOrNull()?.get("discount_type")?.asString()?.getOrNull()

                    when (discountType) {
                        "amount" -> {
                            tryDeserialize(node, jacksonTypeRef<AmountDiscountCreationParams>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Discount(amountDiscountCreationParams = it, _json = json)
                                }
                        }
                        "percentage" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<PercentageDiscountCreationParams>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Discount(
                                        percentageDiscountCreationParams = it,
                                        _json = json,
                                    )
                                }
                        }
                        "usage" -> {
                            tryDeserialize(node, jacksonTypeRef<UsageDiscountCreationParams>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Discount(usageDiscountCreationParams = it, _json = json)
                                }
                        }
                    }

                    return Discount(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<Discount>(Discount::class) {

                override fun serialize(
                    value: Discount,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.amountDiscountCreationParams != null ->
                            generator.writeObject(value.amountDiscountCreationParams)
                        value.percentageDiscountCreationParams != null ->
                            generator.writeObject(value.percentageDiscountCreationParams)
                        value.usageDiscountCreationParams != null ->
                            generator.writeObject(value.usageDiscountCreationParams)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Discount")
                    }
                }
            }

            @NoAutoDetect
            class AmountDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("amount_discount")
                @ExcludeMissing
                private val amountDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("discount_type")
                @ExcludeMissing
                private val discountType: JsonField<DiscountType> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * Only available if discount_type is `amount`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun amountDiscount(): Double = amountDiscount.getRequired("amount_discount")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun discountType(): DiscountType = discountType.getRequired("discount_type")

                /**
                 * Returns the raw JSON value of [amountDiscount].
                 *
                 * Unlike [amountDiscount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("amount_discount")
                @ExcludeMissing
                fun _amountDiscount(): JsonField<Double> = amountDiscount

                /**
                 * Returns the raw JSON value of [discountType].
                 *
                 * Unlike [discountType], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("discount_type")
                @ExcludeMissing
                fun _discountType(): JsonField<DiscountType> = discountType

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): AmountDiscountCreationParams = apply {
                    if (validated) {
                        return@apply
                    }

                    amountDiscount()
                    discountType()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [AmountDiscountCreationParams].
                     *
                     * The following fields are required:
                     * ```java
                     * .amountDiscount()
                     * .discountType()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [AmountDiscountCreationParams]. */
                class Builder internal constructor() {

                    private var amountDiscount: JsonField<Double>? = null
                    private var discountType: JsonField<DiscountType>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(amountDiscountCreationParams: AmountDiscountCreationParams) =
                        apply {
                            amountDiscount = amountDiscountCreationParams.amountDiscount
                            discountType = amountDiscountCreationParams.discountType
                            additionalProperties =
                                amountDiscountCreationParams.additionalProperties.toMutableMap()
                        }

                    /** Only available if discount_type is `amount`. */
                    fun amountDiscount(amountDiscount: Double) =
                        amountDiscount(JsonField.of(amountDiscount))

                    /**
                     * Sets [Builder.amountDiscount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.amountDiscount] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun amountDiscount(amountDiscount: JsonField<Double>) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    fun discountType(discountType: DiscountType) =
                        discountType(JsonField.of(discountType))

                    /**
                     * Sets [Builder.discountType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.discountType] with a well-typed
                     * [DiscountType] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun discountType(discountType: JsonField<DiscountType>) = apply {
                        this.discountType = discountType
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): AmountDiscountCreationParams =
                        AmountDiscountCreationParams(
                            checkRequired("amountDiscount", amountDiscount),
                            checkRequired("discountType", discountType),
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT = of("amount")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    /** An enum containing [DiscountType]'s known values. */
                    enum class Known {
                        AMOUNT
                    }

                    /**
                     * An enum containing [DiscountType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DiscountType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        AMOUNT,
                        /**
                         * An enum member indicating that [DiscountType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            AMOUNT -> Value.AMOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            AMOUNT -> Known.AMOUNT
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is AmountDiscountCreationParams && amountDiscount == other.amountDiscount && discountType == other.discountType && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(amountDiscount, discountType, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "AmountDiscountCreationParams{amountDiscount=$amountDiscount, discountType=$discountType, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class PercentageDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("discount_type")
                @ExcludeMissing
                private val discountType: JsonField<DiscountType> = JsonMissing.of(),
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                private val percentageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun discountType(): DiscountType = discountType.getRequired("discount_type")

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun percentageDiscount(): Double =
                    percentageDiscount.getRequired("percentage_discount")

                /**
                 * Returns the raw JSON value of [discountType].
                 *
                 * Unlike [discountType], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("discount_type")
                @ExcludeMissing
                fun _discountType(): JsonField<DiscountType> = discountType

                /**
                 * Returns the raw JSON value of [percentageDiscount].
                 *
                 * Unlike [percentageDiscount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                fun _percentageDiscount(): JsonField<Double> = percentageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): PercentageDiscountCreationParams = apply {
                    if (validated) {
                        return@apply
                    }

                    discountType()
                    percentageDiscount()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [PercentageDiscountCreationParams].
                     *
                     * The following fields are required:
                     * ```java
                     * .discountType()
                     * .percentageDiscount()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [PercentageDiscountCreationParams]. */
                class Builder internal constructor() {

                    private var discountType: JsonField<DiscountType>? = null
                    private var percentageDiscount: JsonField<Double>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        percentageDiscountCreationParams: PercentageDiscountCreationParams
                    ) = apply {
                        discountType = percentageDiscountCreationParams.discountType
                        percentageDiscount = percentageDiscountCreationParams.percentageDiscount
                        additionalProperties =
                            percentageDiscountCreationParams.additionalProperties.toMutableMap()
                    }

                    fun discountType(discountType: DiscountType) =
                        discountType(JsonField.of(discountType))

                    /**
                     * Sets [Builder.discountType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.discountType] with a well-typed
                     * [DiscountType] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun discountType(discountType: JsonField<DiscountType>) = apply {
                        this.discountType = discountType
                    }

                    /**
                     * Only available if discount_type is `percentage`. This is a number between 0
                     * and 1.
                     */
                    fun percentageDiscount(percentageDiscount: Double) =
                        percentageDiscount(JsonField.of(percentageDiscount))

                    /**
                     * Sets [Builder.percentageDiscount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.percentageDiscount] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): PercentageDiscountCreationParams =
                        PercentageDiscountCreationParams(
                            checkRequired("discountType", discountType),
                            checkRequired("percentageDiscount", percentageDiscount),
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE = of("percentage")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    /** An enum containing [DiscountType]'s known values. */
                    enum class Known {
                        PERCENTAGE
                    }

                    /**
                     * An enum containing [DiscountType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DiscountType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PERCENTAGE,
                        /**
                         * An enum member indicating that [DiscountType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PERCENTAGE -> Value.PERCENTAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PERCENTAGE -> Known.PERCENTAGE
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is PercentageDiscountCreationParams && discountType == other.discountType && percentageDiscount == other.percentageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(discountType, percentageDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "PercentageDiscountCreationParams{discountType=$discountType, percentageDiscount=$percentageDiscount, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class UsageDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("discount_type")
                @ExcludeMissing
                private val discountType: JsonField<DiscountType> = JsonMissing.of(),
                @JsonProperty("usage_discount")
                @ExcludeMissing
                private val usageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun discountType(): DiscountType = discountType.getRequired("discount_type")

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun usageDiscount(): Double = usageDiscount.getRequired("usage_discount")

                /**
                 * Returns the raw JSON value of [discountType].
                 *
                 * Unlike [discountType], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("discount_type")
                @ExcludeMissing
                fun _discountType(): JsonField<DiscountType> = discountType

                /**
                 * Returns the raw JSON value of [usageDiscount].
                 *
                 * Unlike [usageDiscount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("usage_discount")
                @ExcludeMissing
                fun _usageDiscount(): JsonField<Double> = usageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): UsageDiscountCreationParams = apply {
                    if (validated) {
                        return@apply
                    }

                    discountType()
                    usageDiscount()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [UsageDiscountCreationParams].
                     *
                     * The following fields are required:
                     * ```java
                     * .discountType()
                     * .usageDiscount()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [UsageDiscountCreationParams]. */
                class Builder internal constructor() {

                    private var discountType: JsonField<DiscountType>? = null
                    private var usageDiscount: JsonField<Double>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(usageDiscountCreationParams: UsageDiscountCreationParams) =
                        apply {
                            discountType = usageDiscountCreationParams.discountType
                            usageDiscount = usageDiscountCreationParams.usageDiscount
                            additionalProperties =
                                usageDiscountCreationParams.additionalProperties.toMutableMap()
                        }

                    fun discountType(discountType: DiscountType) =
                        discountType(JsonField.of(discountType))

                    /**
                     * Sets [Builder.discountType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.discountType] with a well-typed
                     * [DiscountType] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun discountType(discountType: JsonField<DiscountType>) = apply {
                        this.discountType = discountType
                    }

                    /**
                     * Only available if discount_type is `usage`. Number of usage units that this
                     * discount is for.
                     */
                    fun usageDiscount(usageDiscount: Double) =
                        usageDiscount(JsonField.of(usageDiscount))

                    /**
                     * Sets [Builder.usageDiscount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.usageDiscount] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun usageDiscount(usageDiscount: JsonField<Double>) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): UsageDiscountCreationParams =
                        UsageDiscountCreationParams(
                            checkRequired("discountType", discountType),
                            checkRequired("usageDiscount", usageDiscount),
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE = of("usage")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    /** An enum containing [DiscountType]'s known values. */
                    enum class Known {
                        USAGE
                    }

                    /**
                     * An enum containing [DiscountType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DiscountType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        USAGE,
                        /**
                         * An enum member indicating that [DiscountType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            USAGE -> Value.USAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            USAGE -> Known.USAGE
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is UsageDiscountCreationParams && discountType == other.discountType && usageDiscount == other.usageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(discountType, usageDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "UsageDiscountCreationParams{discountType=$discountType, usageDiscount=$usageDiscount, additionalProperties=$additionalProperties}"
            }
        }

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription.
         */
        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelative: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelative(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelative)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelative(): Boolean = billingCycleRelative != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelative(): BillingCycleRelativeDate =
                billingCycleRelative.getOrThrow("billingCycleRelative")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelative != null ->
                        visitor.visitBillingCycleRelative(billingCycleRelative)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): EndDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelative(
                            billingCycleRelative: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelative == other.billingCycleRelative /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelative) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelative != null ->
                        "EndDate{billingCycleRelative=$billingCycleRelative}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelative = billingCycleRelative)
            }

            /**
             * An interface that defines how to map each variant of [EndDate] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate): T

                /**
                 * Maps an unknown variant of [EndDate] to a value of type [T].
                 *
                 * An instance of [EndDate] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelative = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelative != null ->
                            generator.writeObject(value.billingCycleRelative)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        @NoAutoDetect
        class FixedFeeQuantityTransition
        @JsonCreator
        private constructor(
            @JsonProperty("effective_date")
            @ExcludeMissing
            private val effectiveDate: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("quantity")
            @ExcludeMissing
            private val quantity: JsonField<Long> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /**
             * The date that the fixed fee quantity transition should take effect.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun effectiveDate(): OffsetDateTime = effectiveDate.getRequired("effective_date")

            /**
             * The quantity of the fixed fee quantity transition.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun quantity(): Long = quantity.getRequired("quantity")

            /**
             * Returns the raw JSON value of [effectiveDate].
             *
             * Unlike [effectiveDate], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("effective_date")
            @ExcludeMissing
            fun _effectiveDate(): JsonField<OffsetDateTime> = effectiveDate

            /**
             * Returns the raw JSON value of [quantity].
             *
             * Unlike [quantity], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("quantity") @ExcludeMissing fun _quantity(): JsonField<Long> = quantity

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): FixedFeeQuantityTransition = apply {
                if (validated) {
                    return@apply
                }

                effectiveDate()
                quantity()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [FixedFeeQuantityTransition].
                 *
                 * The following fields are required:
                 * ```java
                 * .effectiveDate()
                 * .quantity()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [FixedFeeQuantityTransition]. */
            class Builder internal constructor() {

                private var effectiveDate: JsonField<OffsetDateTime>? = null
                private var quantity: JsonField<Long>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(fixedFeeQuantityTransition: FixedFeeQuantityTransition) = apply {
                    effectiveDate = fixedFeeQuantityTransition.effectiveDate
                    quantity = fixedFeeQuantityTransition.quantity
                    additionalProperties =
                        fixedFeeQuantityTransition.additionalProperties.toMutableMap()
                }

                /** The date that the fixed fee quantity transition should take effect. */
                fun effectiveDate(effectiveDate: OffsetDateTime) =
                    effectiveDate(JsonField.of(effectiveDate))

                /**
                 * Sets [Builder.effectiveDate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.effectiveDate] with a well-typed
                 * [OffsetDateTime] value instead. This method is primarily for setting the field to
                 * an undocumented or not yet supported value.
                 */
                fun effectiveDate(effectiveDate: JsonField<OffsetDateTime>) = apply {
                    this.effectiveDate = effectiveDate
                }

                /** The quantity of the fixed fee quantity transition. */
                fun quantity(quantity: Long) = quantity(JsonField.of(quantity))

                /**
                 * Sets [Builder.quantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.quantity] with a well-typed [Long] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun quantity(quantity: JsonField<Long>) = apply { this.quantity = quantity }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): FixedFeeQuantityTransition =
                    FixedFeeQuantityTransition(
                        checkRequired("effectiveDate", effectiveDate),
                        checkRequired("quantity", quantity),
                        additionalProperties.toImmutable(),
                    )
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is FixedFeeQuantityTransition && effectiveDate == other.effectiveDate && quantity == other.quantity && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(effectiveDate, quantity, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "FixedFeeQuantityTransition{effectiveDate=$effectiveDate, quantity=$quantity, additionalProperties=$additionalProperties}"
        }

        /** The definition of a new price to create and add to the subscription. */
        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newFloatingUnit: NewFloatingUnitPrice? = null,
            private val newFloatingPackage: NewFloatingPackagePrice? = null,
            private val newFloatingMatrix: NewFloatingMatrixPrice? = null,
            private val newFloatingMatrixWithAllocation: NewFloatingMatrixWithAllocationPrice? =
                null,
            private val newFloatingTiered: NewFloatingTieredPrice? = null,
            private val newFloatingTieredBps: NewFloatingTieredBpsPrice? = null,
            private val newFloatingBps: NewFloatingBpsPrice? = null,
            private val newFloatingBulkBps: NewFloatingBulkBpsPrice? = null,
            private val newFloatingBulk: NewFloatingBulkPrice? = null,
            private val newFloatingThresholdTotalAmount: NewFloatingThresholdTotalAmountPrice? =
                null,
            private val newFloatingTieredPackage: NewFloatingTieredPackagePrice? = null,
            private val newFloatingGroupedTiered: NewFloatingGroupedTieredPrice? = null,
            private val newFloatingMaxGroupTieredPackage: NewFloatingMaxGroupTieredPackagePrice? =
                null,
            private val newFloatingTieredWithMinimum: NewFloatingTieredWithMinimumPrice? = null,
            private val newFloatingPackageWithAllocation: NewFloatingPackageWithAllocationPrice? =
                null,
            private val newFloatingTieredPackageWithMinimum:
                NewFloatingTieredPackageWithMinimumPrice? =
                null,
            private val newFloatingUnitWithPercent: NewFloatingUnitWithPercentPrice? = null,
            private val newFloatingTieredWithProration: NewFloatingTieredWithProrationPrice? = null,
            private val newFloatingUnitWithProration: NewFloatingUnitWithProrationPrice? = null,
            private val newFloatingGroupedAllocation: NewFloatingGroupedAllocationPrice? = null,
            private val newFloatingGroupedWithProratedMinimum:
                NewFloatingGroupedWithProratedMinimumPrice? =
                null,
            private val newFloatingGroupedWithMeteredMinimum:
                NewFloatingGroupedWithMeteredMinimumPrice? =
                null,
            private val newFloatingMatrixWithDisplayName: NewFloatingMatrixWithDisplayNamePrice? =
                null,
            private val newFloatingBulkWithProration: NewFloatingBulkWithProrationPrice? = null,
            private val newFloatingGroupedTieredPackage: NewFloatingGroupedTieredPackagePrice? =
                null,
            private val newFloatingScalableMatrixWithUnitPricing:
                NewFloatingScalableMatrixWithUnitPricingPrice? =
                null,
            private val newFloatingScalableMatrixWithTieredPricing:
                NewFloatingScalableMatrixWithTieredPricingPrice? =
                null,
            private val newFloatingCumulativeGroupedBulk: NewFloatingCumulativeGroupedBulkPrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            fun newFloatingUnit(): Optional<NewFloatingUnitPrice> =
                Optional.ofNullable(newFloatingUnit)

            fun newFloatingPackage(): Optional<NewFloatingPackagePrice> =
                Optional.ofNullable(newFloatingPackage)

            fun newFloatingMatrix(): Optional<NewFloatingMatrixPrice> =
                Optional.ofNullable(newFloatingMatrix)

            fun newFloatingMatrixWithAllocation(): Optional<NewFloatingMatrixWithAllocationPrice> =
                Optional.ofNullable(newFloatingMatrixWithAllocation)

            fun newFloatingTiered(): Optional<NewFloatingTieredPrice> =
                Optional.ofNullable(newFloatingTiered)

            fun newFloatingTieredBps(): Optional<NewFloatingTieredBpsPrice> =
                Optional.ofNullable(newFloatingTieredBps)

            fun newFloatingBps(): Optional<NewFloatingBpsPrice> =
                Optional.ofNullable(newFloatingBps)

            fun newFloatingBulkBps(): Optional<NewFloatingBulkBpsPrice> =
                Optional.ofNullable(newFloatingBulkBps)

            fun newFloatingBulk(): Optional<NewFloatingBulkPrice> =
                Optional.ofNullable(newFloatingBulk)

            fun newFloatingThresholdTotalAmount(): Optional<NewFloatingThresholdTotalAmountPrice> =
                Optional.ofNullable(newFloatingThresholdTotalAmount)

            fun newFloatingTieredPackage(): Optional<NewFloatingTieredPackagePrice> =
                Optional.ofNullable(newFloatingTieredPackage)

            fun newFloatingGroupedTiered(): Optional<NewFloatingGroupedTieredPrice> =
                Optional.ofNullable(newFloatingGroupedTiered)

            fun newFloatingMaxGroupTieredPackage():
                Optional<NewFloatingMaxGroupTieredPackagePrice> =
                Optional.ofNullable(newFloatingMaxGroupTieredPackage)

            fun newFloatingTieredWithMinimum(): Optional<NewFloatingTieredWithMinimumPrice> =
                Optional.ofNullable(newFloatingTieredWithMinimum)

            fun newFloatingPackageWithAllocation():
                Optional<NewFloatingPackageWithAllocationPrice> =
                Optional.ofNullable(newFloatingPackageWithAllocation)

            fun newFloatingTieredPackageWithMinimum():
                Optional<NewFloatingTieredPackageWithMinimumPrice> =
                Optional.ofNullable(newFloatingTieredPackageWithMinimum)

            fun newFloatingUnitWithPercent(): Optional<NewFloatingUnitWithPercentPrice> =
                Optional.ofNullable(newFloatingUnitWithPercent)

            fun newFloatingTieredWithProration(): Optional<NewFloatingTieredWithProrationPrice> =
                Optional.ofNullable(newFloatingTieredWithProration)

            fun newFloatingUnitWithProration(): Optional<NewFloatingUnitWithProrationPrice> =
                Optional.ofNullable(newFloatingUnitWithProration)

            fun newFloatingGroupedAllocation(): Optional<NewFloatingGroupedAllocationPrice> =
                Optional.ofNullable(newFloatingGroupedAllocation)

            fun newFloatingGroupedWithProratedMinimum():
                Optional<NewFloatingGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newFloatingGroupedWithProratedMinimum)

            fun newFloatingGroupedWithMeteredMinimum():
                Optional<NewFloatingGroupedWithMeteredMinimumPrice> =
                Optional.ofNullable(newFloatingGroupedWithMeteredMinimum)

            fun newFloatingMatrixWithDisplayName():
                Optional<NewFloatingMatrixWithDisplayNamePrice> =
                Optional.ofNullable(newFloatingMatrixWithDisplayName)

            fun newFloatingBulkWithProration(): Optional<NewFloatingBulkWithProrationPrice> =
                Optional.ofNullable(newFloatingBulkWithProration)

            fun newFloatingGroupedTieredPackage(): Optional<NewFloatingGroupedTieredPackagePrice> =
                Optional.ofNullable(newFloatingGroupedTieredPackage)

            fun newFloatingScalableMatrixWithUnitPricing():
                Optional<NewFloatingScalableMatrixWithUnitPricingPrice> =
                Optional.ofNullable(newFloatingScalableMatrixWithUnitPricing)

            fun newFloatingScalableMatrixWithTieredPricing():
                Optional<NewFloatingScalableMatrixWithTieredPricingPrice> =
                Optional.ofNullable(newFloatingScalableMatrixWithTieredPricing)

            fun newFloatingCumulativeGroupedBulk():
                Optional<NewFloatingCumulativeGroupedBulkPrice> =
                Optional.ofNullable(newFloatingCumulativeGroupedBulk)

            fun isNewFloatingUnit(): Boolean = newFloatingUnit != null

            fun isNewFloatingPackage(): Boolean = newFloatingPackage != null

            fun isNewFloatingMatrix(): Boolean = newFloatingMatrix != null

            fun isNewFloatingMatrixWithAllocation(): Boolean =
                newFloatingMatrixWithAllocation != null

            fun isNewFloatingTiered(): Boolean = newFloatingTiered != null

            fun isNewFloatingTieredBps(): Boolean = newFloatingTieredBps != null

            fun isNewFloatingBps(): Boolean = newFloatingBps != null

            fun isNewFloatingBulkBps(): Boolean = newFloatingBulkBps != null

            fun isNewFloatingBulk(): Boolean = newFloatingBulk != null

            fun isNewFloatingThresholdTotalAmount(): Boolean =
                newFloatingThresholdTotalAmount != null

            fun isNewFloatingTieredPackage(): Boolean = newFloatingTieredPackage != null

            fun isNewFloatingGroupedTiered(): Boolean = newFloatingGroupedTiered != null

            fun isNewFloatingMaxGroupTieredPackage(): Boolean =
                newFloatingMaxGroupTieredPackage != null

            fun isNewFloatingTieredWithMinimum(): Boolean = newFloatingTieredWithMinimum != null

            fun isNewFloatingPackageWithAllocation(): Boolean =
                newFloatingPackageWithAllocation != null

            fun isNewFloatingTieredPackageWithMinimum(): Boolean =
                newFloatingTieredPackageWithMinimum != null

            fun isNewFloatingUnitWithPercent(): Boolean = newFloatingUnitWithPercent != null

            fun isNewFloatingTieredWithProration(): Boolean = newFloatingTieredWithProration != null

            fun isNewFloatingUnitWithProration(): Boolean = newFloatingUnitWithProration != null

            fun isNewFloatingGroupedAllocation(): Boolean = newFloatingGroupedAllocation != null

            fun isNewFloatingGroupedWithProratedMinimum(): Boolean =
                newFloatingGroupedWithProratedMinimum != null

            fun isNewFloatingGroupedWithMeteredMinimum(): Boolean =
                newFloatingGroupedWithMeteredMinimum != null

            fun isNewFloatingMatrixWithDisplayName(): Boolean =
                newFloatingMatrixWithDisplayName != null

            fun isNewFloatingBulkWithProration(): Boolean = newFloatingBulkWithProration != null

            fun isNewFloatingGroupedTieredPackage(): Boolean =
                newFloatingGroupedTieredPackage != null

            fun isNewFloatingScalableMatrixWithUnitPricing(): Boolean =
                newFloatingScalableMatrixWithUnitPricing != null

            fun isNewFloatingScalableMatrixWithTieredPricing(): Boolean =
                newFloatingScalableMatrixWithTieredPricing != null

            fun isNewFloatingCumulativeGroupedBulk(): Boolean =
                newFloatingCumulativeGroupedBulk != null

            fun asNewFloatingUnit(): NewFloatingUnitPrice =
                newFloatingUnit.getOrThrow("newFloatingUnit")

            fun asNewFloatingPackage(): NewFloatingPackagePrice =
                newFloatingPackage.getOrThrow("newFloatingPackage")

            fun asNewFloatingMatrix(): NewFloatingMatrixPrice =
                newFloatingMatrix.getOrThrow("newFloatingMatrix")

            fun asNewFloatingMatrixWithAllocation(): NewFloatingMatrixWithAllocationPrice =
                newFloatingMatrixWithAllocation.getOrThrow("newFloatingMatrixWithAllocation")

            fun asNewFloatingTiered(): NewFloatingTieredPrice =
                newFloatingTiered.getOrThrow("newFloatingTiered")

            fun asNewFloatingTieredBps(): NewFloatingTieredBpsPrice =
                newFloatingTieredBps.getOrThrow("newFloatingTieredBps")

            fun asNewFloatingBps(): NewFloatingBpsPrice =
                newFloatingBps.getOrThrow("newFloatingBps")

            fun asNewFloatingBulkBps(): NewFloatingBulkBpsPrice =
                newFloatingBulkBps.getOrThrow("newFloatingBulkBps")

            fun asNewFloatingBulk(): NewFloatingBulkPrice =
                newFloatingBulk.getOrThrow("newFloatingBulk")

            fun asNewFloatingThresholdTotalAmount(): NewFloatingThresholdTotalAmountPrice =
                newFloatingThresholdTotalAmount.getOrThrow("newFloatingThresholdTotalAmount")

            fun asNewFloatingTieredPackage(): NewFloatingTieredPackagePrice =
                newFloatingTieredPackage.getOrThrow("newFloatingTieredPackage")

            fun asNewFloatingGroupedTiered(): NewFloatingGroupedTieredPrice =
                newFloatingGroupedTiered.getOrThrow("newFloatingGroupedTiered")

            fun asNewFloatingMaxGroupTieredPackage(): NewFloatingMaxGroupTieredPackagePrice =
                newFloatingMaxGroupTieredPackage.getOrThrow("newFloatingMaxGroupTieredPackage")

            fun asNewFloatingTieredWithMinimum(): NewFloatingTieredWithMinimumPrice =
                newFloatingTieredWithMinimum.getOrThrow("newFloatingTieredWithMinimum")

            fun asNewFloatingPackageWithAllocation(): NewFloatingPackageWithAllocationPrice =
                newFloatingPackageWithAllocation.getOrThrow("newFloatingPackageWithAllocation")

            fun asNewFloatingTieredPackageWithMinimum(): NewFloatingTieredPackageWithMinimumPrice =
                newFloatingTieredPackageWithMinimum.getOrThrow(
                    "newFloatingTieredPackageWithMinimum"
                )

            fun asNewFloatingUnitWithPercent(): NewFloatingUnitWithPercentPrice =
                newFloatingUnitWithPercent.getOrThrow("newFloatingUnitWithPercent")

            fun asNewFloatingTieredWithProration(): NewFloatingTieredWithProrationPrice =
                newFloatingTieredWithProration.getOrThrow("newFloatingTieredWithProration")

            fun asNewFloatingUnitWithProration(): NewFloatingUnitWithProrationPrice =
                newFloatingUnitWithProration.getOrThrow("newFloatingUnitWithProration")

            fun asNewFloatingGroupedAllocation(): NewFloatingGroupedAllocationPrice =
                newFloatingGroupedAllocation.getOrThrow("newFloatingGroupedAllocation")

            fun asNewFloatingGroupedWithProratedMinimum():
                NewFloatingGroupedWithProratedMinimumPrice =
                newFloatingGroupedWithProratedMinimum.getOrThrow(
                    "newFloatingGroupedWithProratedMinimum"
                )

            fun asNewFloatingGroupedWithMeteredMinimum():
                NewFloatingGroupedWithMeteredMinimumPrice =
                newFloatingGroupedWithMeteredMinimum.getOrThrow(
                    "newFloatingGroupedWithMeteredMinimum"
                )

            fun asNewFloatingMatrixWithDisplayName(): NewFloatingMatrixWithDisplayNamePrice =
                newFloatingMatrixWithDisplayName.getOrThrow("newFloatingMatrixWithDisplayName")

            fun asNewFloatingBulkWithProration(): NewFloatingBulkWithProrationPrice =
                newFloatingBulkWithProration.getOrThrow("newFloatingBulkWithProration")

            fun asNewFloatingGroupedTieredPackage(): NewFloatingGroupedTieredPackagePrice =
                newFloatingGroupedTieredPackage.getOrThrow("newFloatingGroupedTieredPackage")

            fun asNewFloatingScalableMatrixWithUnitPricing():
                NewFloatingScalableMatrixWithUnitPricingPrice =
                newFloatingScalableMatrixWithUnitPricing.getOrThrow(
                    "newFloatingScalableMatrixWithUnitPricing"
                )

            fun asNewFloatingScalableMatrixWithTieredPricing():
                NewFloatingScalableMatrixWithTieredPricingPrice =
                newFloatingScalableMatrixWithTieredPricing.getOrThrow(
                    "newFloatingScalableMatrixWithTieredPricing"
                )

            fun asNewFloatingCumulativeGroupedBulk(): NewFloatingCumulativeGroupedBulkPrice =
                newFloatingCumulativeGroupedBulk.getOrThrow("newFloatingCumulativeGroupedBulk")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newFloatingUnit != null -> visitor.visitNewFloatingUnit(newFloatingUnit)
                    newFloatingPackage != null ->
                        visitor.visitNewFloatingPackage(newFloatingPackage)
                    newFloatingMatrix != null -> visitor.visitNewFloatingMatrix(newFloatingMatrix)
                    newFloatingMatrixWithAllocation != null ->
                        visitor.visitNewFloatingMatrixWithAllocation(
                            newFloatingMatrixWithAllocation
                        )
                    newFloatingTiered != null -> visitor.visitNewFloatingTiered(newFloatingTiered)
                    newFloatingTieredBps != null ->
                        visitor.visitNewFloatingTieredBps(newFloatingTieredBps)
                    newFloatingBps != null -> visitor.visitNewFloatingBps(newFloatingBps)
                    newFloatingBulkBps != null ->
                        visitor.visitNewFloatingBulkBps(newFloatingBulkBps)
                    newFloatingBulk != null -> visitor.visitNewFloatingBulk(newFloatingBulk)
                    newFloatingThresholdTotalAmount != null ->
                        visitor.visitNewFloatingThresholdTotalAmount(
                            newFloatingThresholdTotalAmount
                        )
                    newFloatingTieredPackage != null ->
                        visitor.visitNewFloatingTieredPackage(newFloatingTieredPackage)
                    newFloatingGroupedTiered != null ->
                        visitor.visitNewFloatingGroupedTiered(newFloatingGroupedTiered)
                    newFloatingMaxGroupTieredPackage != null ->
                        visitor.visitNewFloatingMaxGroupTieredPackage(
                            newFloatingMaxGroupTieredPackage
                        )
                    newFloatingTieredWithMinimum != null ->
                        visitor.visitNewFloatingTieredWithMinimum(newFloatingTieredWithMinimum)
                    newFloatingPackageWithAllocation != null ->
                        visitor.visitNewFloatingPackageWithAllocation(
                            newFloatingPackageWithAllocation
                        )
                    newFloatingTieredPackageWithMinimum != null ->
                        visitor.visitNewFloatingTieredPackageWithMinimum(
                            newFloatingTieredPackageWithMinimum
                        )
                    newFloatingUnitWithPercent != null ->
                        visitor.visitNewFloatingUnitWithPercent(newFloatingUnitWithPercent)
                    newFloatingTieredWithProration != null ->
                        visitor.visitNewFloatingTieredWithProration(newFloatingTieredWithProration)
                    newFloatingUnitWithProration != null ->
                        visitor.visitNewFloatingUnitWithProration(newFloatingUnitWithProration)
                    newFloatingGroupedAllocation != null ->
                        visitor.visitNewFloatingGroupedAllocation(newFloatingGroupedAllocation)
                    newFloatingGroupedWithProratedMinimum != null ->
                        visitor.visitNewFloatingGroupedWithProratedMinimum(
                            newFloatingGroupedWithProratedMinimum
                        )
                    newFloatingGroupedWithMeteredMinimum != null ->
                        visitor.visitNewFloatingGroupedWithMeteredMinimum(
                            newFloatingGroupedWithMeteredMinimum
                        )
                    newFloatingMatrixWithDisplayName != null ->
                        visitor.visitNewFloatingMatrixWithDisplayName(
                            newFloatingMatrixWithDisplayName
                        )
                    newFloatingBulkWithProration != null ->
                        visitor.visitNewFloatingBulkWithProration(newFloatingBulkWithProration)
                    newFloatingGroupedTieredPackage != null ->
                        visitor.visitNewFloatingGroupedTieredPackage(
                            newFloatingGroupedTieredPackage
                        )
                    newFloatingScalableMatrixWithUnitPricing != null ->
                        visitor.visitNewFloatingScalableMatrixWithUnitPricing(
                            newFloatingScalableMatrixWithUnitPricing
                        )
                    newFloatingScalableMatrixWithTieredPricing != null ->
                        visitor.visitNewFloatingScalableMatrixWithTieredPricing(
                            newFloatingScalableMatrixWithTieredPricing
                        )
                    newFloatingCumulativeGroupedBulk != null ->
                        visitor.visitNewFloatingCumulativeGroupedBulk(
                            newFloatingCumulativeGroupedBulk
                        )
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Price = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitNewFloatingUnit(newFloatingUnit: NewFloatingUnitPrice) {
                            newFloatingUnit.validate()
                        }

                        override fun visitNewFloatingPackage(
                            newFloatingPackage: NewFloatingPackagePrice
                        ) {
                            newFloatingPackage.validate()
                        }

                        override fun visitNewFloatingMatrix(
                            newFloatingMatrix: NewFloatingMatrixPrice
                        ) {
                            newFloatingMatrix.validate()
                        }

                        override fun visitNewFloatingMatrixWithAllocation(
                            newFloatingMatrixWithAllocation: NewFloatingMatrixWithAllocationPrice
                        ) {
                            newFloatingMatrixWithAllocation.validate()
                        }

                        override fun visitNewFloatingTiered(
                            newFloatingTiered: NewFloatingTieredPrice
                        ) {
                            newFloatingTiered.validate()
                        }

                        override fun visitNewFloatingTieredBps(
                            newFloatingTieredBps: NewFloatingTieredBpsPrice
                        ) {
                            newFloatingTieredBps.validate()
                        }

                        override fun visitNewFloatingBps(newFloatingBps: NewFloatingBpsPrice) {
                            newFloatingBps.validate()
                        }

                        override fun visitNewFloatingBulkBps(
                            newFloatingBulkBps: NewFloatingBulkBpsPrice
                        ) {
                            newFloatingBulkBps.validate()
                        }

                        override fun visitNewFloatingBulk(newFloatingBulk: NewFloatingBulkPrice) {
                            newFloatingBulk.validate()
                        }

                        override fun visitNewFloatingThresholdTotalAmount(
                            newFloatingThresholdTotalAmount: NewFloatingThresholdTotalAmountPrice
                        ) {
                            newFloatingThresholdTotalAmount.validate()
                        }

                        override fun visitNewFloatingTieredPackage(
                            newFloatingTieredPackage: NewFloatingTieredPackagePrice
                        ) {
                            newFloatingTieredPackage.validate()
                        }

                        override fun visitNewFloatingGroupedTiered(
                            newFloatingGroupedTiered: NewFloatingGroupedTieredPrice
                        ) {
                            newFloatingGroupedTiered.validate()
                        }

                        override fun visitNewFloatingMaxGroupTieredPackage(
                            newFloatingMaxGroupTieredPackage: NewFloatingMaxGroupTieredPackagePrice
                        ) {
                            newFloatingMaxGroupTieredPackage.validate()
                        }

                        override fun visitNewFloatingTieredWithMinimum(
                            newFloatingTieredWithMinimum: NewFloatingTieredWithMinimumPrice
                        ) {
                            newFloatingTieredWithMinimum.validate()
                        }

                        override fun visitNewFloatingPackageWithAllocation(
                            newFloatingPackageWithAllocation: NewFloatingPackageWithAllocationPrice
                        ) {
                            newFloatingPackageWithAllocation.validate()
                        }

                        override fun visitNewFloatingTieredPackageWithMinimum(
                            newFloatingTieredPackageWithMinimum:
                                NewFloatingTieredPackageWithMinimumPrice
                        ) {
                            newFloatingTieredPackageWithMinimum.validate()
                        }

                        override fun visitNewFloatingUnitWithPercent(
                            newFloatingUnitWithPercent: NewFloatingUnitWithPercentPrice
                        ) {
                            newFloatingUnitWithPercent.validate()
                        }

                        override fun visitNewFloatingTieredWithProration(
                            newFloatingTieredWithProration: NewFloatingTieredWithProrationPrice
                        ) {
                            newFloatingTieredWithProration.validate()
                        }

                        override fun visitNewFloatingUnitWithProration(
                            newFloatingUnitWithProration: NewFloatingUnitWithProrationPrice
                        ) {
                            newFloatingUnitWithProration.validate()
                        }

                        override fun visitNewFloatingGroupedAllocation(
                            newFloatingGroupedAllocation: NewFloatingGroupedAllocationPrice
                        ) {
                            newFloatingGroupedAllocation.validate()
                        }

                        override fun visitNewFloatingGroupedWithProratedMinimum(
                            newFloatingGroupedWithProratedMinimum:
                                NewFloatingGroupedWithProratedMinimumPrice
                        ) {
                            newFloatingGroupedWithProratedMinimum.validate()
                        }

                        override fun visitNewFloatingGroupedWithMeteredMinimum(
                            newFloatingGroupedWithMeteredMinimum:
                                NewFloatingGroupedWithMeteredMinimumPrice
                        ) {
                            newFloatingGroupedWithMeteredMinimum.validate()
                        }

                        override fun visitNewFloatingMatrixWithDisplayName(
                            newFloatingMatrixWithDisplayName: NewFloatingMatrixWithDisplayNamePrice
                        ) {
                            newFloatingMatrixWithDisplayName.validate()
                        }

                        override fun visitNewFloatingBulkWithProration(
                            newFloatingBulkWithProration: NewFloatingBulkWithProrationPrice
                        ) {
                            newFloatingBulkWithProration.validate()
                        }

                        override fun visitNewFloatingGroupedTieredPackage(
                            newFloatingGroupedTieredPackage: NewFloatingGroupedTieredPackagePrice
                        ) {
                            newFloatingGroupedTieredPackage.validate()
                        }

                        override fun visitNewFloatingScalableMatrixWithUnitPricing(
                            newFloatingScalableMatrixWithUnitPricing:
                                NewFloatingScalableMatrixWithUnitPricingPrice
                        ) {
                            newFloatingScalableMatrixWithUnitPricing.validate()
                        }

                        override fun visitNewFloatingScalableMatrixWithTieredPricing(
                            newFloatingScalableMatrixWithTieredPricing:
                                NewFloatingScalableMatrixWithTieredPricingPrice
                        ) {
                            newFloatingScalableMatrixWithTieredPricing.validate()
                        }

                        override fun visitNewFloatingCumulativeGroupedBulk(
                            newFloatingCumulativeGroupedBulk: NewFloatingCumulativeGroupedBulkPrice
                        ) {
                            newFloatingCumulativeGroupedBulk.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && newFloatingUnit == other.newFloatingUnit && newFloatingPackage == other.newFloatingPackage && newFloatingMatrix == other.newFloatingMatrix && newFloatingMatrixWithAllocation == other.newFloatingMatrixWithAllocation && newFloatingTiered == other.newFloatingTiered && newFloatingTieredBps == other.newFloatingTieredBps && newFloatingBps == other.newFloatingBps && newFloatingBulkBps == other.newFloatingBulkBps && newFloatingBulk == other.newFloatingBulk && newFloatingThresholdTotalAmount == other.newFloatingThresholdTotalAmount && newFloatingTieredPackage == other.newFloatingTieredPackage && newFloatingGroupedTiered == other.newFloatingGroupedTiered && newFloatingMaxGroupTieredPackage == other.newFloatingMaxGroupTieredPackage && newFloatingTieredWithMinimum == other.newFloatingTieredWithMinimum && newFloatingPackageWithAllocation == other.newFloatingPackageWithAllocation && newFloatingTieredPackageWithMinimum == other.newFloatingTieredPackageWithMinimum && newFloatingUnitWithPercent == other.newFloatingUnitWithPercent && newFloatingTieredWithProration == other.newFloatingTieredWithProration && newFloatingUnitWithProration == other.newFloatingUnitWithProration && newFloatingGroupedAllocation == other.newFloatingGroupedAllocation && newFloatingGroupedWithProratedMinimum == other.newFloatingGroupedWithProratedMinimum && newFloatingGroupedWithMeteredMinimum == other.newFloatingGroupedWithMeteredMinimum && newFloatingMatrixWithDisplayName == other.newFloatingMatrixWithDisplayName && newFloatingBulkWithProration == other.newFloatingBulkWithProration && newFloatingGroupedTieredPackage == other.newFloatingGroupedTieredPackage && newFloatingScalableMatrixWithUnitPricing == other.newFloatingScalableMatrixWithUnitPricing && newFloatingScalableMatrixWithTieredPricing == other.newFloatingScalableMatrixWithTieredPricing && newFloatingCumulativeGroupedBulk == other.newFloatingCumulativeGroupedBulk /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newFloatingUnit, newFloatingPackage, newFloatingMatrix, newFloatingMatrixWithAllocation, newFloatingTiered, newFloatingTieredBps, newFloatingBps, newFloatingBulkBps, newFloatingBulk, newFloatingThresholdTotalAmount, newFloatingTieredPackage, newFloatingGroupedTiered, newFloatingMaxGroupTieredPackage, newFloatingTieredWithMinimum, newFloatingPackageWithAllocation, newFloatingTieredPackageWithMinimum, newFloatingUnitWithPercent, newFloatingTieredWithProration, newFloatingUnitWithProration, newFloatingGroupedAllocation, newFloatingGroupedWithProratedMinimum, newFloatingGroupedWithMeteredMinimum, newFloatingMatrixWithDisplayName, newFloatingBulkWithProration, newFloatingGroupedTieredPackage, newFloatingScalableMatrixWithUnitPricing, newFloatingScalableMatrixWithTieredPricing, newFloatingCumulativeGroupedBulk) /* spotless:on */

            override fun toString(): String =
                when {
                    newFloatingUnit != null -> "Price{newFloatingUnit=$newFloatingUnit}"
                    newFloatingPackage != null -> "Price{newFloatingPackage=$newFloatingPackage}"
                    newFloatingMatrix != null -> "Price{newFloatingMatrix=$newFloatingMatrix}"
                    newFloatingMatrixWithAllocation != null ->
                        "Price{newFloatingMatrixWithAllocation=$newFloatingMatrixWithAllocation}"
                    newFloatingTiered != null -> "Price{newFloatingTiered=$newFloatingTiered}"
                    newFloatingTieredBps != null ->
                        "Price{newFloatingTieredBps=$newFloatingTieredBps}"
                    newFloatingBps != null -> "Price{newFloatingBps=$newFloatingBps}"
                    newFloatingBulkBps != null -> "Price{newFloatingBulkBps=$newFloatingBulkBps}"
                    newFloatingBulk != null -> "Price{newFloatingBulk=$newFloatingBulk}"
                    newFloatingThresholdTotalAmount != null ->
                        "Price{newFloatingThresholdTotalAmount=$newFloatingThresholdTotalAmount}"
                    newFloatingTieredPackage != null ->
                        "Price{newFloatingTieredPackage=$newFloatingTieredPackage}"
                    newFloatingGroupedTiered != null ->
                        "Price{newFloatingGroupedTiered=$newFloatingGroupedTiered}"
                    newFloatingMaxGroupTieredPackage != null ->
                        "Price{newFloatingMaxGroupTieredPackage=$newFloatingMaxGroupTieredPackage}"
                    newFloatingTieredWithMinimum != null ->
                        "Price{newFloatingTieredWithMinimum=$newFloatingTieredWithMinimum}"
                    newFloatingPackageWithAllocation != null ->
                        "Price{newFloatingPackageWithAllocation=$newFloatingPackageWithAllocation}"
                    newFloatingTieredPackageWithMinimum != null ->
                        "Price{newFloatingTieredPackageWithMinimum=$newFloatingTieredPackageWithMinimum}"
                    newFloatingUnitWithPercent != null ->
                        "Price{newFloatingUnitWithPercent=$newFloatingUnitWithPercent}"
                    newFloatingTieredWithProration != null ->
                        "Price{newFloatingTieredWithProration=$newFloatingTieredWithProration}"
                    newFloatingUnitWithProration != null ->
                        "Price{newFloatingUnitWithProration=$newFloatingUnitWithProration}"
                    newFloatingGroupedAllocation != null ->
                        "Price{newFloatingGroupedAllocation=$newFloatingGroupedAllocation}"
                    newFloatingGroupedWithProratedMinimum != null ->
                        "Price{newFloatingGroupedWithProratedMinimum=$newFloatingGroupedWithProratedMinimum}"
                    newFloatingGroupedWithMeteredMinimum != null ->
                        "Price{newFloatingGroupedWithMeteredMinimum=$newFloatingGroupedWithMeteredMinimum}"
                    newFloatingMatrixWithDisplayName != null ->
                        "Price{newFloatingMatrixWithDisplayName=$newFloatingMatrixWithDisplayName}"
                    newFloatingBulkWithProration != null ->
                        "Price{newFloatingBulkWithProration=$newFloatingBulkWithProration}"
                    newFloatingGroupedTieredPackage != null ->
                        "Price{newFloatingGroupedTieredPackage=$newFloatingGroupedTieredPackage}"
                    newFloatingScalableMatrixWithUnitPricing != null ->
                        "Price{newFloatingScalableMatrixWithUnitPricing=$newFloatingScalableMatrixWithUnitPricing}"
                    newFloatingScalableMatrixWithTieredPricing != null ->
                        "Price{newFloatingScalableMatrixWithTieredPricing=$newFloatingScalableMatrixWithTieredPricing}"
                    newFloatingCumulativeGroupedBulk != null ->
                        "Price{newFloatingCumulativeGroupedBulk=$newFloatingCumulativeGroupedBulk}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }

            companion object {

                @JvmStatic
                fun ofNewFloatingUnit(newFloatingUnit: NewFloatingUnitPrice) =
                    Price(newFloatingUnit = newFloatingUnit)

                @JvmStatic
                fun ofNewFloatingPackage(newFloatingPackage: NewFloatingPackagePrice) =
                    Price(newFloatingPackage = newFloatingPackage)

                @JvmStatic
                fun ofNewFloatingMatrix(newFloatingMatrix: NewFloatingMatrixPrice) =
                    Price(newFloatingMatrix = newFloatingMatrix)

                @JvmStatic
                fun ofNewFloatingMatrixWithAllocation(
                    newFloatingMatrixWithAllocation: NewFloatingMatrixWithAllocationPrice
                ) = Price(newFloatingMatrixWithAllocation = newFloatingMatrixWithAllocation)

                @JvmStatic
                fun ofNewFloatingTiered(newFloatingTiered: NewFloatingTieredPrice) =
                    Price(newFloatingTiered = newFloatingTiered)

                @JvmStatic
                fun ofNewFloatingTieredBps(newFloatingTieredBps: NewFloatingTieredBpsPrice) =
                    Price(newFloatingTieredBps = newFloatingTieredBps)

                @JvmStatic
                fun ofNewFloatingBps(newFloatingBps: NewFloatingBpsPrice) =
                    Price(newFloatingBps = newFloatingBps)

                @JvmStatic
                fun ofNewFloatingBulkBps(newFloatingBulkBps: NewFloatingBulkBpsPrice) =
                    Price(newFloatingBulkBps = newFloatingBulkBps)

                @JvmStatic
                fun ofNewFloatingBulk(newFloatingBulk: NewFloatingBulkPrice) =
                    Price(newFloatingBulk = newFloatingBulk)

                @JvmStatic
                fun ofNewFloatingThresholdTotalAmount(
                    newFloatingThresholdTotalAmount: NewFloatingThresholdTotalAmountPrice
                ) = Price(newFloatingThresholdTotalAmount = newFloatingThresholdTotalAmount)

                @JvmStatic
                fun ofNewFloatingTieredPackage(
                    newFloatingTieredPackage: NewFloatingTieredPackagePrice
                ) = Price(newFloatingTieredPackage = newFloatingTieredPackage)

                @JvmStatic
                fun ofNewFloatingGroupedTiered(
                    newFloatingGroupedTiered: NewFloatingGroupedTieredPrice
                ) = Price(newFloatingGroupedTiered = newFloatingGroupedTiered)

                @JvmStatic
                fun ofNewFloatingMaxGroupTieredPackage(
                    newFloatingMaxGroupTieredPackage: NewFloatingMaxGroupTieredPackagePrice
                ) = Price(newFloatingMaxGroupTieredPackage = newFloatingMaxGroupTieredPackage)

                @JvmStatic
                fun ofNewFloatingTieredWithMinimum(
                    newFloatingTieredWithMinimum: NewFloatingTieredWithMinimumPrice
                ) = Price(newFloatingTieredWithMinimum = newFloatingTieredWithMinimum)

                @JvmStatic
                fun ofNewFloatingPackageWithAllocation(
                    newFloatingPackageWithAllocation: NewFloatingPackageWithAllocationPrice
                ) = Price(newFloatingPackageWithAllocation = newFloatingPackageWithAllocation)

                @JvmStatic
                fun ofNewFloatingTieredPackageWithMinimum(
                    newFloatingTieredPackageWithMinimum: NewFloatingTieredPackageWithMinimumPrice
                ) = Price(newFloatingTieredPackageWithMinimum = newFloatingTieredPackageWithMinimum)

                @JvmStatic
                fun ofNewFloatingUnitWithPercent(
                    newFloatingUnitWithPercent: NewFloatingUnitWithPercentPrice
                ) = Price(newFloatingUnitWithPercent = newFloatingUnitWithPercent)

                @JvmStatic
                fun ofNewFloatingTieredWithProration(
                    newFloatingTieredWithProration: NewFloatingTieredWithProrationPrice
                ) = Price(newFloatingTieredWithProration = newFloatingTieredWithProration)

                @JvmStatic
                fun ofNewFloatingUnitWithProration(
                    newFloatingUnitWithProration: NewFloatingUnitWithProrationPrice
                ) = Price(newFloatingUnitWithProration = newFloatingUnitWithProration)

                @JvmStatic
                fun ofNewFloatingGroupedAllocation(
                    newFloatingGroupedAllocation: NewFloatingGroupedAllocationPrice
                ) = Price(newFloatingGroupedAllocation = newFloatingGroupedAllocation)

                @JvmStatic
                fun ofNewFloatingGroupedWithProratedMinimum(
                    newFloatingGroupedWithProratedMinimum:
                        NewFloatingGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newFloatingGroupedWithProratedMinimum =
                            newFloatingGroupedWithProratedMinimum
                    )

                @JvmStatic
                fun ofNewFloatingGroupedWithMeteredMinimum(
                    newFloatingGroupedWithMeteredMinimum: NewFloatingGroupedWithMeteredMinimumPrice
                ) =
                    Price(
                        newFloatingGroupedWithMeteredMinimum = newFloatingGroupedWithMeteredMinimum
                    )

                @JvmStatic
                fun ofNewFloatingMatrixWithDisplayName(
                    newFloatingMatrixWithDisplayName: NewFloatingMatrixWithDisplayNamePrice
                ) = Price(newFloatingMatrixWithDisplayName = newFloatingMatrixWithDisplayName)

                @JvmStatic
                fun ofNewFloatingBulkWithProration(
                    newFloatingBulkWithProration: NewFloatingBulkWithProrationPrice
                ) = Price(newFloatingBulkWithProration = newFloatingBulkWithProration)

                @JvmStatic
                fun ofNewFloatingGroupedTieredPackage(
                    newFloatingGroupedTieredPackage: NewFloatingGroupedTieredPackagePrice
                ) = Price(newFloatingGroupedTieredPackage = newFloatingGroupedTieredPackage)

                @JvmStatic
                fun ofNewFloatingScalableMatrixWithUnitPricing(
                    newFloatingScalableMatrixWithUnitPricing:
                        NewFloatingScalableMatrixWithUnitPricingPrice
                ) =
                    Price(
                        newFloatingScalableMatrixWithUnitPricing =
                            newFloatingScalableMatrixWithUnitPricing
                    )

                @JvmStatic
                fun ofNewFloatingScalableMatrixWithTieredPricing(
                    newFloatingScalableMatrixWithTieredPricing:
                        NewFloatingScalableMatrixWithTieredPricingPrice
                ) =
                    Price(
                        newFloatingScalableMatrixWithTieredPricing =
                            newFloatingScalableMatrixWithTieredPricing
                    )

                @JvmStatic
                fun ofNewFloatingCumulativeGroupedBulk(
                    newFloatingCumulativeGroupedBulk: NewFloatingCumulativeGroupedBulkPrice
                ) = Price(newFloatingCumulativeGroupedBulk = newFloatingCumulativeGroupedBulk)
            }

            /**
             * An interface that defines how to map each variant of [Price] to a value of type [T].
             */
            interface Visitor<out T> {

                fun visitNewFloatingUnit(newFloatingUnit: NewFloatingUnitPrice): T

                fun visitNewFloatingPackage(newFloatingPackage: NewFloatingPackagePrice): T

                fun visitNewFloatingMatrix(newFloatingMatrix: NewFloatingMatrixPrice): T

                fun visitNewFloatingMatrixWithAllocation(
                    newFloatingMatrixWithAllocation: NewFloatingMatrixWithAllocationPrice
                ): T

                fun visitNewFloatingTiered(newFloatingTiered: NewFloatingTieredPrice): T

                fun visitNewFloatingTieredBps(newFloatingTieredBps: NewFloatingTieredBpsPrice): T

                fun visitNewFloatingBps(newFloatingBps: NewFloatingBpsPrice): T

                fun visitNewFloatingBulkBps(newFloatingBulkBps: NewFloatingBulkBpsPrice): T

                fun visitNewFloatingBulk(newFloatingBulk: NewFloatingBulkPrice): T

                fun visitNewFloatingThresholdTotalAmount(
                    newFloatingThresholdTotalAmount: NewFloatingThresholdTotalAmountPrice
                ): T

                fun visitNewFloatingTieredPackage(
                    newFloatingTieredPackage: NewFloatingTieredPackagePrice
                ): T

                fun visitNewFloatingGroupedTiered(
                    newFloatingGroupedTiered: NewFloatingGroupedTieredPrice
                ): T

                fun visitNewFloatingMaxGroupTieredPackage(
                    newFloatingMaxGroupTieredPackage: NewFloatingMaxGroupTieredPackagePrice
                ): T

                fun visitNewFloatingTieredWithMinimum(
                    newFloatingTieredWithMinimum: NewFloatingTieredWithMinimumPrice
                ): T

                fun visitNewFloatingPackageWithAllocation(
                    newFloatingPackageWithAllocation: NewFloatingPackageWithAllocationPrice
                ): T

                fun visitNewFloatingTieredPackageWithMinimum(
                    newFloatingTieredPackageWithMinimum: NewFloatingTieredPackageWithMinimumPrice
                ): T

                fun visitNewFloatingUnitWithPercent(
                    newFloatingUnitWithPercent: NewFloatingUnitWithPercentPrice
                ): T

                fun visitNewFloatingTieredWithProration(
                    newFloatingTieredWithProration: NewFloatingTieredWithProrationPrice
                ): T

                fun visitNewFloatingUnitWithProration(
                    newFloatingUnitWithProration: NewFloatingUnitWithProrationPrice
                ): T

                fun visitNewFloatingGroupedAllocation(
                    newFloatingGroupedAllocation: NewFloatingGroupedAllocationPrice
                ): T

                fun visitNewFloatingGroupedWithProratedMinimum(
                    newFloatingGroupedWithProratedMinimum:
                        NewFloatingGroupedWithProratedMinimumPrice
                ): T

                fun visitNewFloatingGroupedWithMeteredMinimum(
                    newFloatingGroupedWithMeteredMinimum: NewFloatingGroupedWithMeteredMinimumPrice
                ): T

                fun visitNewFloatingMatrixWithDisplayName(
                    newFloatingMatrixWithDisplayName: NewFloatingMatrixWithDisplayNamePrice
                ): T

                fun visitNewFloatingBulkWithProration(
                    newFloatingBulkWithProration: NewFloatingBulkWithProrationPrice
                ): T

                fun visitNewFloatingGroupedTieredPackage(
                    newFloatingGroupedTieredPackage: NewFloatingGroupedTieredPackagePrice
                ): T

                fun visitNewFloatingScalableMatrixWithUnitPricing(
                    newFloatingScalableMatrixWithUnitPricing:
                        NewFloatingScalableMatrixWithUnitPricingPrice
                ): T

                fun visitNewFloatingScalableMatrixWithTieredPricing(
                    newFloatingScalableMatrixWithTieredPricing:
                        NewFloatingScalableMatrixWithTieredPricingPrice
                ): T

                fun visitNewFloatingCumulativeGroupedBulk(
                    newFloatingCumulativeGroupedBulk: NewFloatingCumulativeGroupedBulkPrice
                ): T

                /**
                 * Maps an unknown variant of [Price] to a value of type [T].
                 *
                 * An instance of [Price] can contain an unknown variant if it was deserialized from
                 * data that doesn't match any known variant. For example, if the SDK is on an older
                 * version than the API, then the API may respond with new variants that the SDK is
                 * unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingUnitPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingUnit = it, _json = json)
                                }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingPackagePrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingPackage = it, _json = json)
                                }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingMatrixPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingMatrix = it, _json = json)
                                }
                        }
                        "matrix_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingMatrixWithAllocationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingMatrixWithAllocation = it, _json = json)
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingTiered = it, _json = json)
                                }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingTieredBps = it, _json = json)
                                }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingBps = it, _json = json)
                                }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBulkBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingBulkBps = it, _json = json)
                                }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBulkPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingBulk = it, _json = json)
                                }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingThresholdTotalAmountPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingThresholdTotalAmount = it, _json = json)
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredPackagePrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingTieredPackage = it, _json = json)
                                }
                        }
                        "grouped_tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingGroupedTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingGroupedTiered = it, _json = json)
                                }
                        }
                        "max_group_tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingMaxGroupTieredPackagePrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingMaxGroupTieredPackage = it,
                                        _json = json,
                                    )
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredWithMinimumPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingTieredWithMinimum = it, _json = json)
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingPackageWithAllocationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingPackageWithAllocation = it,
                                        _json = json,
                                    )
                                }
                        }
                        "tiered_package_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredPackageWithMinimumPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingTieredPackageWithMinimum = it,
                                        _json = json,
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingUnitWithPercentPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingUnitWithPercent = it, _json = json)
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingTieredWithProration = it, _json = json)
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingUnitWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingUnitWithProration = it, _json = json)
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedAllocationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingGroupedAllocation = it, _json = json)
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedWithProratedMinimumPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingGroupedWithProratedMinimum = it,
                                        _json = json,
                                    )
                                }
                        }
                        "grouped_with_metered_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedWithMeteredMinimumPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingGroupedWithMeteredMinimum = it,
                                        _json = json,
                                    )
                                }
                        }
                        "matrix_with_display_name" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingMatrixWithDisplayNamePrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingMatrixWithDisplayName = it,
                                        _json = json,
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingBulkWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingBulkWithProration = it, _json = json)
                                }
                        }
                        "grouped_tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedTieredPackagePrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingGroupedTieredPackage = it, _json = json)
                                }
                        }
                        "scalable_matrix_with_unit_pricing" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingScalableMatrixWithUnitPricingPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingScalableMatrixWithUnitPricing = it,
                                        _json = json,
                                    )
                                }
                        }
                        "scalable_matrix_with_tiered_pricing" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<
                                        NewFloatingScalableMatrixWithTieredPricingPrice
                                    >(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingScalableMatrixWithTieredPricing = it,
                                        _json = json,
                                    )
                                }
                        }
                        "cumulative_grouped_bulk" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingCumulativeGroupedBulkPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingCumulativeGroupedBulk = it,
                                        _json = json,
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.newFloatingUnit != null ->
                            generator.writeObject(value.newFloatingUnit)
                        value.newFloatingPackage != null ->
                            generator.writeObject(value.newFloatingPackage)
                        value.newFloatingMatrix != null ->
                            generator.writeObject(value.newFloatingMatrix)
                        value.newFloatingMatrixWithAllocation != null ->
                            generator.writeObject(value.newFloatingMatrixWithAllocation)
                        value.newFloatingTiered != null ->
                            generator.writeObject(value.newFloatingTiered)
                        value.newFloatingTieredBps != null ->
                            generator.writeObject(value.newFloatingTieredBps)
                        value.newFloatingBps != null -> generator.writeObject(value.newFloatingBps)
                        value.newFloatingBulkBps != null ->
                            generator.writeObject(value.newFloatingBulkBps)
                        value.newFloatingBulk != null ->
                            generator.writeObject(value.newFloatingBulk)
                        value.newFloatingThresholdTotalAmount != null ->
                            generator.writeObject(value.newFloatingThresholdTotalAmount)
                        value.newFloatingTieredPackage != null ->
                            generator.writeObject(value.newFloatingTieredPackage)
                        value.newFloatingGroupedTiered != null ->
                            generator.writeObject(value.newFloatingGroupedTiered)
                        value.newFloatingMaxGroupTieredPackage != null ->
                            generator.writeObject(value.newFloatingMaxGroupTieredPackage)
                        value.newFloatingTieredWithMinimum != null ->
                            generator.writeObject(value.newFloatingTieredWithMinimum)
                        value.newFloatingPackageWithAllocation != null ->
                            generator.writeObject(value.newFloatingPackageWithAllocation)
                        value.newFloatingTieredPackageWithMinimum != null ->
                            generator.writeObject(value.newFloatingTieredPackageWithMinimum)
                        value.newFloatingUnitWithPercent != null ->
                            generator.writeObject(value.newFloatingUnitWithPercent)
                        value.newFloatingTieredWithProration != null ->
                            generator.writeObject(value.newFloatingTieredWithProration)
                        value.newFloatingUnitWithProration != null ->
                            generator.writeObject(value.newFloatingUnitWithProration)
                        value.newFloatingGroupedAllocation != null ->
                            generator.writeObject(value.newFloatingGroupedAllocation)
                        value.newFloatingGroupedWithProratedMinimum != null ->
                            generator.writeObject(value.newFloatingGroupedWithProratedMinimum)
                        value.newFloatingGroupedWithMeteredMinimum != null ->
                            generator.writeObject(value.newFloatingGroupedWithMeteredMinimum)
                        value.newFloatingMatrixWithDisplayName != null ->
                            generator.writeObject(value.newFloatingMatrixWithDisplayName)
                        value.newFloatingBulkWithProration != null ->
                            generator.writeObject(value.newFloatingBulkWithProration)
                        value.newFloatingGroupedTieredPackage != null ->
                            generator.writeObject(value.newFloatingGroupedTieredPackage)
                        value.newFloatingScalableMatrixWithUnitPricing != null ->
                            generator.writeObject(value.newFloatingScalableMatrixWithUnitPricing)
                        value.newFloatingScalableMatrixWithTieredPricing != null ->
                            generator.writeObject(value.newFloatingScalableMatrixWithTieredPricing)
                        value.newFloatingCumulativeGroupedBulk != null ->
                            generator.writeObject(value.newFloatingCumulativeGroupedBulk)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @NoAutoDetect
            class NewFloatingUnitPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_config")
                @ExcludeMissing
                private val unitConfig: JsonField<UnitConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun unitConfig(): UnitConfig = unitConfig.getRequired("unit_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [unitConfig].
                 *
                 * Unlike [unitConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("unit_config")
                @ExcludeMissing
                fun _unitConfig(): JsonField<UnitConfig> = unitConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingUnitPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    unitConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingUnitPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .unitConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingUnitPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitConfig: JsonField<UnitConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingUnitPrice: NewFloatingUnitPrice) = apply {
                        cadence = newFloatingUnitPrice.cadence
                        currency = newFloatingUnitPrice.currency
                        itemId = newFloatingUnitPrice.itemId
                        modelType = newFloatingUnitPrice.modelType
                        name = newFloatingUnitPrice.name
                        unitConfig = newFloatingUnitPrice.unitConfig
                        billableMetricId = newFloatingUnitPrice.billableMetricId
                        billedInAdvance = newFloatingUnitPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingUnitPrice.billingCycleConfiguration
                        conversionRate = newFloatingUnitPrice.conversionRate
                        externalPriceId = newFloatingUnitPrice.externalPriceId
                        fixedPriceQuantity = newFloatingUnitPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingUnitPrice.invoicingCycleConfiguration
                        metadata = newFloatingUnitPrice.metadata
                        additionalProperties =
                            newFloatingUnitPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitConfig(unitConfig: UnitConfig) = unitConfig(JsonField.of(unitConfig))

                    /**
                     * Sets [Builder.unitConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.unitConfig] with a well-typed [UnitConfig]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun unitConfig(unitConfig: JsonField<UnitConfig>) = apply {
                        this.unitConfig = unitConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitPrice =
                        NewFloatingUnitPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitConfig", unitConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT = of("unit")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    private val unitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Rate per unit of usage
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /**
                     * Returns the raw JSON value of [unitAmount].
                     *
                     * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        unitAmount()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [UnitConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .unitAmount()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitConfig]. */
                    class Builder internal constructor() {

                        private var unitAmount: JsonField<String>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            unitAmount = unitConfig.unitAmount
                            additionalProperties = unitConfig.additionalProperties.toMutableMap()
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /**
                         * Sets [Builder.unitAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.unitAmount] with a well-typed [String]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitConfig =
                            UnitConfig(
                                checkRequired("unitAmount", unitAmount),
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitConfig == other.unitConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitConfig=$unitConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_config")
                @ExcludeMissing
                private val packageConfig: JsonField<PackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun packageConfig(): PackageConfig = packageConfig.getRequired("package_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [packageConfig].
                 *
                 * Unlike [packageConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("package_config")
                @ExcludeMissing
                fun _packageConfig(): JsonField<PackageConfig> = packageConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    packageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingPackagePrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .packageConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingPackagePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var packageConfig: JsonField<PackageConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingPackagePrice: NewFloatingPackagePrice) = apply {
                        cadence = newFloatingPackagePrice.cadence
                        currency = newFloatingPackagePrice.currency
                        itemId = newFloatingPackagePrice.itemId
                        modelType = newFloatingPackagePrice.modelType
                        name = newFloatingPackagePrice.name
                        packageConfig = newFloatingPackagePrice.packageConfig
                        billableMetricId = newFloatingPackagePrice.billableMetricId
                        billedInAdvance = newFloatingPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingPackagePrice.billingCycleConfiguration
                        conversionRate = newFloatingPackagePrice.conversionRate
                        externalPriceId = newFloatingPackagePrice.externalPriceId
                        fixedPriceQuantity = newFloatingPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingPackagePrice.invoicingCycleConfiguration
                        metadata = newFloatingPackagePrice.metadata
                        additionalProperties =
                            newFloatingPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun packageConfig(packageConfig: PackageConfig) =
                        packageConfig(JsonField.of(packageConfig))

                    /**
                     * Sets [Builder.packageConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.packageConfig] with a well-typed
                     * [PackageConfig] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun packageConfig(packageConfig: JsonField<PackageConfig>) = apply {
                        this.packageConfig = packageConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingPackagePrice =
                        NewFloatingPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("packageConfig", packageConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE = of("package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        PACKAGE
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PACKAGE,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    private val packageAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    private val packageSize: JsonField<Long> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * A currency amount to rate usage by
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun packageAmount(): String = packageAmount.getRequired("package_amount")

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun packageSize(): Long = packageSize.getRequired("package_size")

                    /**
                     * Returns the raw JSON value of [packageAmount].
                     *
                     * Unlike [packageAmount], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    fun _packageAmount(): JsonField<String> = packageAmount

                    /**
                     * Returns the raw JSON value of [packageSize].
                     *
                     * Unlike [packageSize], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    fun _packageSize(): JsonField<Long> = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): PackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        packageAmount()
                        packageSize()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [PackageConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .packageAmount()
                         * .packageSize()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [PackageConfig]. */
                    class Builder internal constructor() {

                        private var packageAmount: JsonField<String>? = null
                        private var packageSize: JsonField<Long>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            packageAmount = packageConfig.packageAmount
                            packageSize = packageConfig.packageSize
                            additionalProperties = packageConfig.additionalProperties.toMutableMap()
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) =
                            packageAmount(JsonField.of(packageAmount))

                        /**
                         * Sets [Builder.packageAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.packageAmount] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun packageAmount(packageAmount: JsonField<String>) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = packageSize(JsonField.of(packageSize))

                        /**
                         * Sets [Builder.packageSize] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.packageSize] with a well-typed [Long]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun packageSize(packageSize: JsonField<Long>) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageConfig =
                            PackageConfig(
                                checkRequired("packageAmount", packageAmount),
                                checkRequired("packageSize", packageSize),
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingPackagePrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && packageConfig == other.packageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, packageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingPackagePrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, packageConfig=$packageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_config")
                @ExcludeMissing
                private val matrixConfig: JsonField<MatrixConfig> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun matrixConfig(): MatrixConfig = matrixConfig.getRequired("matrix_config")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [matrixConfig].
                 *
                 * Unlike [matrixConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("matrix_config")
                @ExcludeMissing
                fun _matrixConfig(): JsonField<MatrixConfig> = matrixConfig

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingMatrixPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    matrixConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingMatrixPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .matrixConfig()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingMatrixPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var matrixConfig: JsonField<MatrixConfig>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingMatrixPrice: NewFloatingMatrixPrice) = apply {
                        cadence = newFloatingMatrixPrice.cadence
                        currency = newFloatingMatrixPrice.currency
                        itemId = newFloatingMatrixPrice.itemId
                        matrixConfig = newFloatingMatrixPrice.matrixConfig
                        modelType = newFloatingMatrixPrice.modelType
                        name = newFloatingMatrixPrice.name
                        billableMetricId = newFloatingMatrixPrice.billableMetricId
                        billedInAdvance = newFloatingMatrixPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingMatrixPrice.billingCycleConfiguration
                        conversionRate = newFloatingMatrixPrice.conversionRate
                        externalPriceId = newFloatingMatrixPrice.externalPriceId
                        fixedPriceQuantity = newFloatingMatrixPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingMatrixPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingMatrixPrice.invoicingCycleConfiguration
                        metadata = newFloatingMatrixPrice.metadata
                        additionalProperties =
                            newFloatingMatrixPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun matrixConfig(matrixConfig: MatrixConfig) =
                        matrixConfig(JsonField.of(matrixConfig))

                    /**
                     * Sets [Builder.matrixConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.matrixConfig] with a well-typed
                     * [MatrixConfig] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun matrixConfig(matrixConfig: JsonField<MatrixConfig>) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixPrice =
                        NewFloatingMatrixPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("matrixConfig", matrixConfig),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    private val defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    private val dimensions: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    private val matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun defaultUnitAmount(): String =
                        defaultUnitAmount.getRequired("default_unit_amount")

                    /**
                     * One or two event property values to evaluate matrix groups by
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                    /**
                     * Matrix values for specified matrix grouping keys
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun matrixValues(): List<MatrixValue> =
                        matrixValues.getRequired("matrix_values")

                    /**
                     * Returns the raw JSON value of [defaultUnitAmount].
                     *
                     * Unlike [defaultUnitAmount], this method doesn't throw if the JSON field has
                     * an unexpected type.
                     */
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                    /**
                     * Returns the raw JSON value of [dimensions].
                     *
                     * Unlike [dimensions], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    fun _dimensions(): JsonField<List<String?>> = dimensions

                    /**
                     * Returns the raw JSON value of [matrixValues].
                     *
                     * Unlike [matrixValues], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        defaultUnitAmount()
                        dimensions()
                        matrixValues().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [MatrixConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .defaultUnitAmount()
                         * .dimensions()
                         * .matrixValues()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [MatrixConfig]. */
                    class Builder internal constructor() {

                        private var defaultUnitAmount: JsonField<String>? = null
                        private var dimensions: JsonField<MutableList<String?>>? = null
                        private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            defaultUnitAmount = matrixConfig.defaultUnitAmount
                            dimensions = matrixConfig.dimensions.map { it.toMutableList() }
                            matrixValues = matrixConfig.matrixValues.map { it.toMutableList() }
                            additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) =
                            defaultUnitAmount(JsonField.of(defaultUnitAmount))

                        /**
                         * Sets [Builder.defaultUnitAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.defaultUnitAmount] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) =
                            dimensions(JsonField.of(dimensions))

                        /**
                         * Sets [Builder.dimensions] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.dimensions] with a well-typed
                         * `List<String?>` value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                            this.dimensions = dimensions.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [String] to [dimensions].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addDimension(dimension: String) = apply {
                            dimensions =
                                (dimensions ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("dimensions", it).add(dimension)
                                }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) =
                            matrixValues(JsonField.of(matrixValues))

                        /**
                         * Sets [Builder.matrixValues] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.matrixValues] with a well-typed
                         * `List<MatrixValue>` value instead. This method is primarily for setting
                         * the field to an undocumented or not yet supported value.
                         */
                        fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                            this.matrixValues = matrixValues.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [MatrixValue] to [matrixValues].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addMatrixValue(matrixValue: MatrixValue) = apply {
                            matrixValues =
                                (matrixValues ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("matrixValues", it).add(matrixValue)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                checkRequired("defaultUnitAmount", defaultUnitAmount),
                                checkRequired("dimensions", dimensions).map { it.toImmutable() },
                                checkRequired("matrixValues", matrixValues).map {
                                    it.toImmutable()
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        private val dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun dimensionValues(): List<String?> =
                            dimensionValues.getRequired("dimension_values")

                        /**
                         * Unit price for the specified dimension_values
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * Returns the raw JSON value of [dimensionValues].
                         *
                         * Unlike [dimensionValues], this method doesn't throw if the JSON field has
                         * an unexpected type.
                         */
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                        /**
                         * Returns the raw JSON value of [unitAmount].
                         *
                         * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): MatrixValue = apply {
                            if (validated) {
                                return@apply
                            }

                            dimensionValues()
                            unitAmount()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            /**
                             * Returns a mutable builder for constructing an instance of
                             * [MatrixValue].
                             *
                             * The following fields are required:
                             * ```java
                             * .dimensionValues()
                             * .unitAmount()
                             * ```
                             */
                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [MatrixValue]. */
                        class Builder internal constructor() {

                            private var dimensionValues: JsonField<MutableList<String?>>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                dimensionValues =
                                    matrixValue.dimensionValues.map { it.toMutableList() }
                                unitAmount = matrixValue.unitAmount
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) =
                                dimensionValues(JsonField.of(dimensionValues))

                            /**
                             * Sets [Builder.dimensionValues] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.dimensionValues] with a well-typed
                             * `List<String?>` value instead. This method is primarily for setting
                             * the field to an undocumented or not yet supported value.
                             */
                            fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                                this.dimensionValues = dimensionValues.map { it.toMutableList() }
                            }

                            /**
                             * Adds a single [String] to [dimensionValues].
                             *
                             * @throws IllegalStateException if the field was previously set to a
                             *   non-list.
                             */
                            fun addDimensionValue(dimensionValue: String) = apply {
                                dimensionValues =
                                    (dimensionValues ?: JsonField.of(mutableListOf())).also {
                                        checkKnown("dimensionValues", it).add(dimensionValue)
                                    }
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /**
                             * Sets [Builder.unitAmount] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.unitAmount] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkRequired("dimensionValues", dimensionValues).map {
                                        it.toImmutable()
                                    },
                                    checkRequired("unitAmount", unitAmount),
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixConfig{defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX = of("matrix")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        MATRIX
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MATRIX,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixConfig == other.matrixConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixPrice{cadence=$cadence, currency=$currency, itemId=$itemId, matrixConfig=$matrixConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_with_allocation_config")
                @ExcludeMissing
                private val matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun matrixWithAllocationConfig(): MatrixWithAllocationConfig =
                    matrixWithAllocationConfig.getRequired("matrix_with_allocation_config")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [matrixWithAllocationConfig].
                 *
                 * Unlike [matrixWithAllocationConfig], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("matrix_with_allocation_config")
                @ExcludeMissing
                fun _matrixWithAllocationConfig(): JsonField<MatrixWithAllocationConfig> =
                    matrixWithAllocationConfig

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingMatrixWithAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    matrixWithAllocationConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingMatrixWithAllocationPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .matrixWithAllocationConfig()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingMatrixWithAllocationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig>? =
                        null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingMatrixWithAllocationPrice: NewFloatingMatrixWithAllocationPrice
                    ) = apply {
                        cadence = newFloatingMatrixWithAllocationPrice.cadence
                        currency = newFloatingMatrixWithAllocationPrice.currency
                        itemId = newFloatingMatrixWithAllocationPrice.itemId
                        matrixWithAllocationConfig =
                            newFloatingMatrixWithAllocationPrice.matrixWithAllocationConfig
                        modelType = newFloatingMatrixWithAllocationPrice.modelType
                        name = newFloatingMatrixWithAllocationPrice.name
                        billableMetricId = newFloatingMatrixWithAllocationPrice.billableMetricId
                        billedInAdvance = newFloatingMatrixWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingMatrixWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newFloatingMatrixWithAllocationPrice.conversionRate
                        externalPriceId = newFloatingMatrixWithAllocationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingMatrixWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingMatrixWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingMatrixWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newFloatingMatrixWithAllocationPrice.metadata
                        additionalProperties =
                            newFloatingMatrixWithAllocationPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun matrixWithAllocationConfig(
                        matrixWithAllocationConfig: MatrixWithAllocationConfig
                    ) = matrixWithAllocationConfig(JsonField.of(matrixWithAllocationConfig))

                    /**
                     * Sets [Builder.matrixWithAllocationConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.matrixWithAllocationConfig] with a
                     * well-typed [MatrixWithAllocationConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun matrixWithAllocationConfig(
                        matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig>
                    ) = apply { this.matrixWithAllocationConfig = matrixWithAllocationConfig }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixWithAllocationPrice =
                        NewFloatingMatrixWithAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("matrixWithAllocationConfig", matrixWithAllocationConfig),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("allocation")
                    @ExcludeMissing
                    private val allocation: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    private val defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    private val dimensions: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    private val matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Allocation to be used to calculate the price
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun allocation(): Double = allocation.getRequired("allocation")

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun defaultUnitAmount(): String =
                        defaultUnitAmount.getRequired("default_unit_amount")

                    /**
                     * One or two event property values to evaluate matrix groups by
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                    /**
                     * Matrix values for specified matrix grouping keys
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun matrixValues(): List<MatrixValue> =
                        matrixValues.getRequired("matrix_values")

                    /**
                     * Returns the raw JSON value of [allocation].
                     *
                     * Unlike [allocation], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("allocation")
                    @ExcludeMissing
                    fun _allocation(): JsonField<Double> = allocation

                    /**
                     * Returns the raw JSON value of [defaultUnitAmount].
                     *
                     * Unlike [defaultUnitAmount], this method doesn't throw if the JSON field has
                     * an unexpected type.
                     */
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                    /**
                     * Returns the raw JSON value of [dimensions].
                     *
                     * Unlike [dimensions], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    fun _dimensions(): JsonField<List<String?>> = dimensions

                    /**
                     * Returns the raw JSON value of [matrixValues].
                     *
                     * Unlike [matrixValues], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixWithAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        allocation()
                        defaultUnitAmount()
                        dimensions()
                        matrixValues().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [MatrixWithAllocationConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .allocation()
                         * .defaultUnitAmount()
                         * .dimensions()
                         * .matrixValues()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [MatrixWithAllocationConfig]. */
                    class Builder internal constructor() {

                        private var allocation: JsonField<Double>? = null
                        private var defaultUnitAmount: JsonField<String>? = null
                        private var dimensions: JsonField<MutableList<String?>>? = null
                        private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixWithAllocationConfig: MatrixWithAllocationConfig) =
                            apply {
                                allocation = matrixWithAllocationConfig.allocation
                                defaultUnitAmount = matrixWithAllocationConfig.defaultUnitAmount
                                dimensions =
                                    matrixWithAllocationConfig.dimensions.map { it.toMutableList() }
                                matrixValues =
                                    matrixWithAllocationConfig.matrixValues.map {
                                        it.toMutableList()
                                    }
                                additionalProperties =
                                    matrixWithAllocationConfig.additionalProperties.toMutableMap()
                            }

                        /** Allocation to be used to calculate the price */
                        fun allocation(allocation: Double) = allocation(JsonField.of(allocation))

                        /**
                         * Sets [Builder.allocation] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.allocation] with a well-typed [Double]
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun allocation(allocation: JsonField<Double>) = apply {
                            this.allocation = allocation
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) =
                            defaultUnitAmount(JsonField.of(defaultUnitAmount))

                        /**
                         * Sets [Builder.defaultUnitAmount] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.defaultUnitAmount] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) =
                            dimensions(JsonField.of(dimensions))

                        /**
                         * Sets [Builder.dimensions] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.dimensions] with a well-typed
                         * `List<String?>` value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                            this.dimensions = dimensions.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [String] to [dimensions].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addDimension(dimension: String) = apply {
                            dimensions =
                                (dimensions ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("dimensions", it).add(dimension)
                                }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) =
                            matrixValues(JsonField.of(matrixValues))

                        /**
                         * Sets [Builder.matrixValues] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.matrixValues] with a well-typed
                         * `List<MatrixValue>` value instead. This method is primarily for setting
                         * the field to an undocumented or not yet supported value.
                         */
                        fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                            this.matrixValues = matrixValues.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [MatrixValue] to [matrixValues].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addMatrixValue(matrixValue: MatrixValue) = apply {
                            matrixValues =
                                (matrixValues ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("matrixValues", it).add(matrixValue)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixWithAllocationConfig =
                            MatrixWithAllocationConfig(
                                checkRequired("allocation", allocation),
                                checkRequired("defaultUnitAmount", defaultUnitAmount),
                                checkRequired("dimensions", dimensions).map { it.toImmutable() },
                                checkRequired("matrixValues", matrixValues).map {
                                    it.toImmutable()
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        private val dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun dimensionValues(): List<String?> =
                            dimensionValues.getRequired("dimension_values")

                        /**
                         * Unit price for the specified dimension_values
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * Returns the raw JSON value of [dimensionValues].
                         *
                         * Unlike [dimensionValues], this method doesn't throw if the JSON field has
                         * an unexpected type.
                         */
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                        /**
                         * Returns the raw JSON value of [unitAmount].
                         *
                         * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): MatrixValue = apply {
                            if (validated) {
                                return@apply
                            }

                            dimensionValues()
                            unitAmount()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            /**
                             * Returns a mutable builder for constructing an instance of
                             * [MatrixValue].
                             *
                             * The following fields are required:
                             * ```java
                             * .dimensionValues()
                             * .unitAmount()
                             * ```
                             */
                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [MatrixValue]. */
                        class Builder internal constructor() {

                            private var dimensionValues: JsonField<MutableList<String?>>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                dimensionValues =
                                    matrixValue.dimensionValues.map { it.toMutableList() }
                                unitAmount = matrixValue.unitAmount
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) =
                                dimensionValues(JsonField.of(dimensionValues))

                            /**
                             * Sets [Builder.dimensionValues] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.dimensionValues] with a well-typed
                             * `List<String?>` value instead. This method is primarily for setting
                             * the field to an undocumented or not yet supported value.
                             */
                            fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                                this.dimensionValues = dimensionValues.map { it.toMutableList() }
                            }

                            /**
                             * Adds a single [String] to [dimensionValues].
                             *
                             * @throws IllegalStateException if the field was previously set to a
                             *   non-list.
                             */
                            fun addDimensionValue(dimensionValue: String) = apply {
                                dimensionValues =
                                    (dimensionValues ?: JsonField.of(mutableListOf())).also {
                                        checkKnown("dimensionValues", it).add(dimensionValue)
                                    }
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /**
                             * Sets [Builder.unitAmount] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.unitAmount] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkRequired("dimensionValues", dimensionValues).map {
                                        it.toImmutable()
                                    },
                                    checkRequired("unitAmount", unitAmount),
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixWithAllocationConfig && allocation == other.allocation && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(allocation, defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixWithAllocationConfig{allocation=$allocation, defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX_WITH_ALLOCATION = of("matrix_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        MATRIX_WITH_ALLOCATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MATRIX_WITH_ALLOCATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MATRIX_WITH_ALLOCATION -> Value.MATRIX_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MATRIX_WITH_ALLOCATION -> Known.MATRIX_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixWithAllocationPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixWithAllocationConfig == other.matrixWithAllocationConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixWithAllocationConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixWithAllocationPrice{cadence=$cadence, currency=$currency, itemId=$itemId, matrixWithAllocationConfig=$matrixWithAllocationConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_config")
                @ExcludeMissing
                private val tieredConfig: JsonField<TieredConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tieredConfig(): TieredConfig = tieredConfig.getRequired("tiered_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [tieredConfig].
                 *
                 * Unlike [tieredConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("tiered_config")
                @ExcludeMissing
                fun _tieredConfig(): JsonField<TieredConfig> = tieredConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingTieredPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .tieredConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingTieredPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredConfig: JsonField<TieredConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingTieredPrice: NewFloatingTieredPrice) = apply {
                        cadence = newFloatingTieredPrice.cadence
                        currency = newFloatingTieredPrice.currency
                        itemId = newFloatingTieredPrice.itemId
                        modelType = newFloatingTieredPrice.modelType
                        name = newFloatingTieredPrice.name
                        tieredConfig = newFloatingTieredPrice.tieredConfig
                        billableMetricId = newFloatingTieredPrice.billableMetricId
                        billedInAdvance = newFloatingTieredPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingTieredPrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredPrice.conversionRate
                        externalPriceId = newFloatingTieredPrice.externalPriceId
                        fixedPriceQuantity = newFloatingTieredPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredPrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredPrice.metadata
                        additionalProperties =
                            newFloatingTieredPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredConfig(tieredConfig: TieredConfig) =
                        tieredConfig(JsonField.of(tieredConfig))

                    /**
                     * Sets [Builder.tieredConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tieredConfig] with a well-typed
                     * [TieredConfig] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun tieredConfig(tieredConfig: JsonField<TieredConfig>) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPrice =
                        NewFloatingTieredPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredConfig", tieredConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED = of("tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for rating based on total usage quantities into the specified tier
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Returns the raw JSON value of [tiers].
                     *
                     * Unlike [tiers], this method doesn't throw if the JSON field has an unexpected
                     * type.
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [TieredConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .tiers()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            tiers = tieredConfig.tiers.map { it.toMutableList() }
                            additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Sets [Builder.tiers] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.tiers] with a well-typed `List<Tier>`
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [Tier] to [tiers].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("tiers", it).add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredConfig =
                            TieredConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        private val firstUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        private val lastUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * Inclusive tier starting value
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun firstUnit(): Double = firstUnit.getRequired("first_unit")

                        /**
                         * Amount per unit
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   (e.g. if the server responded with an unexpected value).
                         */
                        fun lastUnit(): Optional<Double> =
                            Optional.ofNullable(lastUnit.getNullable("last_unit"))

                        /**
                         * Returns the raw JSON value of [firstUnit].
                         *
                         * Unlike [firstUnit], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        fun _firstUnit(): JsonField<Double> = firstUnit

                        /**
                         * Returns the raw JSON value of [unitAmount].
                         *
                         * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        /**
                         * Returns the raw JSON value of [lastUnit].
                         *
                         * Unlike [lastUnit], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        fun _lastUnit(): JsonField<Double> = lastUnit

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            firstUnit()
                            unitAmount()
                            lastUnit()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            /**
                             * Returns a mutable builder for constructing an instance of [Tier].
                             *
                             * The following fields are required:
                             * ```java
                             * .firstUnit()
                             * .unitAmount()
                             * ```
                             */
                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var firstUnit: JsonField<Double>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var lastUnit: JsonField<Double> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                firstUnit = tier.firstUnit
                                unitAmount = tier.unitAmount
                                lastUnit = tier.lastUnit
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = firstUnit(JsonField.of(firstUnit))

                            /**
                             * Sets [Builder.firstUnit] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.firstUnit] with a well-typed
                             * [Double] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun firstUnit(firstUnit: JsonField<Double>) = apply {
                                this.firstUnit = firstUnit
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /**
                             * Sets [Builder.unitAmount] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.unitAmount] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double?) =
                                lastUnit(JsonField.ofNullable(lastUnit))

                            /**
                             * Alias for [Builder.lastUnit].
                             *
                             * This unboxed primitive overload exists for backwards compatibility.
                             */
                            fun lastUnit(lastUnit: Double) = lastUnit(lastUnit as Double?)

                            /**
                             * Alias for calling [Builder.lastUnit] with `lastUnit.orElse(null)`.
                             */
                            fun lastUnit(lastUnit: Optional<Double>) =
                                lastUnit(lastUnit.getOrNull())

                            /**
                             * Sets [Builder.lastUnit] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.lastUnit] with a well-typed [Double]
                             * value instead. This method is primarily for setting the field to an
                             * undocumented or not yet supported value.
                             */
                            fun lastUnit(lastUnit: JsonField<Double>) = apply {
                                this.lastUnit = lastUnit
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("firstUnit", firstUnit),
                                    checkRequired("unitAmount", unitAmount),
                                    lastUnit,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && unitAmount == other.unitAmount && lastUnit == other.lastUnit && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(firstUnit, unitAmount, lastUnit, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, unitAmount=$unitAmount, lastUnit=$lastUnit, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredConfig == other.tieredConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredConfig=$tieredConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                private val tieredBpsConfig: JsonField<TieredBpsConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tieredBpsConfig(): TieredBpsConfig =
                    tieredBpsConfig.getRequired("tiered_bps_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [tieredBpsConfig].
                 *
                 * Unlike [tieredBpsConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                fun _tieredBpsConfig(): JsonField<TieredBpsConfig> = tieredBpsConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredBpsConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingTieredBpsPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .tieredBpsConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingTieredBpsPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredBpsConfig: JsonField<TieredBpsConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice) =
                        apply {
                            cadence = newFloatingTieredBpsPrice.cadence
                            currency = newFloatingTieredBpsPrice.currency
                            itemId = newFloatingTieredBpsPrice.itemId
                            modelType = newFloatingTieredBpsPrice.modelType
                            name = newFloatingTieredBpsPrice.name
                            tieredBpsConfig = newFloatingTieredBpsPrice.tieredBpsConfig
                            billableMetricId = newFloatingTieredBpsPrice.billableMetricId
                            billedInAdvance = newFloatingTieredBpsPrice.billedInAdvance
                            billingCycleConfiguration =
                                newFloatingTieredBpsPrice.billingCycleConfiguration
                            conversionRate = newFloatingTieredBpsPrice.conversionRate
                            externalPriceId = newFloatingTieredBpsPrice.externalPriceId
                            fixedPriceQuantity = newFloatingTieredBpsPrice.fixedPriceQuantity
                            invoiceGroupingKey = newFloatingTieredBpsPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newFloatingTieredBpsPrice.invoicingCycleConfiguration
                            metadata = newFloatingTieredBpsPrice.metadata
                            additionalProperties =
                                newFloatingTieredBpsPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) =
                        tieredBpsConfig(JsonField.of(tieredBpsConfig))

                    /**
                     * Sets [Builder.tieredBpsConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tieredBpsConfig] with a well-typed
                     * [TieredBpsConfig] value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun tieredBpsConfig(tieredBpsConfig: JsonField<TieredBpsConfig>) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredBpsPrice =
                        NewFloatingTieredBpsPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredBpsConfig", tieredBpsConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_BPS = of("tiered_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Returns the raw JSON value of [tiers].
                     *
                     * Unlike [tiers], this method doesn't throw if the JSON field has an unexpected
                     * type.
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredBpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [TieredBpsConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .tiers()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredBpsConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            tiers = tieredBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties =
                                tieredBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Sets [Builder.tiers] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.tiers] with a well-typed `List<Tier>`
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [Tier] to [tiers].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("tiers", it).add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        private val bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        private val minimumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        private val maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * Per-event basis point rate
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun bps(): Double = bps.getRequired("bps")

                        /**
                         * Inclusive tier starting value
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                        /**
                         * Exclusive tier ending value
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   (e.g. if the server responded with an unexpected value).
                         */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /**
                         * Per unit maximum to charge
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   (e.g. if the server responded with an unexpected value).
                         */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /**
                         * Returns the raw JSON value of [bps].
                         *
                         * Unlike [bps], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                        /**
                         * Returns the raw JSON value of [minimumAmount].
                         *
                         * Unlike [minimumAmount], this method doesn't throw if the JSON field has
                         * an unexpected type.
                         */
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        fun _minimumAmount(): JsonField<String> = minimumAmount

                        /**
                         * Returns the raw JSON value of [maximumAmount].
                         *
                         * Unlike [maximumAmount], this method doesn't throw if the JSON field has
                         * an unexpected type.
                         */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount(): JsonField<String> = maximumAmount

                        /**
                         * Returns the raw JSON value of [perUnitMaximum].
                         *
                         * Unlike [perUnitMaximum], this method doesn't throw if the JSON field has
                         * an unexpected type.
                         */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            bps()
                            minimumAmount()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            /**
                             * Returns a mutable builder for constructing an instance of [Tier].
                             *
                             * The following fields are required:
                             * ```java
                             * .bps()
                             * .minimumAmount()
                             * ```
                             */
                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var bps: JsonField<Double>? = null
                            private var minimumAmount: JsonField<String>? = null
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                minimumAmount = tier.minimumAmount
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /**
                             * Sets [Builder.bps] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.bps] with a well-typed [Double]
                             * value instead. This method is primarily for setting the field to an
                             * undocumented or not yet supported value.
                             */
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) =
                                minimumAmount(JsonField.of(minimumAmount))

                            /**
                             * Sets [Builder.minimumAmount] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.minimumAmount] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String?) =
                                maximumAmount(JsonField.ofNullable(maximumAmount))

                            /**
                             * Alias for calling [Builder.maximumAmount] with
                             * `maximumAmount.orElse(null)`.
                             */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.getOrNull())

                            /**
                             * Sets [Builder.maximumAmount] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.maximumAmount] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String?) =
                                perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                            /**
                             * Alias for calling [Builder.perUnitMaximum] with
                             * `perUnitMaximum.orElse(null)`.
                             */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.getOrNull())

                            /**
                             * Sets [Builder.perUnitMaximum] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.perUnitMaximum] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("bps", bps),
                                    checkRequired("minimumAmount", minimumAmount),
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, minimumAmount, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredBpsPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredBpsConfig == other.tieredBpsConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredBpsConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredBpsPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredBpsConfig=$tieredBpsConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bps_config")
                @ExcludeMissing
                private val bpsConfig: JsonField<BpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun bpsConfig(): BpsConfig = bpsConfig.getRequired("bps_config")

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [bpsConfig].
                 *
                 * Unlike [bpsConfig], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("bps_config")
                @ExcludeMissing
                fun _bpsConfig(): JsonField<BpsConfig> = bpsConfig

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bpsConfig().validate()
                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingBpsPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .bpsConfig()
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingBpsPrice]. */
                class Builder internal constructor() {

                    private var bpsConfig: JsonField<BpsConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBpsPrice: NewFloatingBpsPrice) = apply {
                        bpsConfig = newFloatingBpsPrice.bpsConfig
                        cadence = newFloatingBpsPrice.cadence
                        currency = newFloatingBpsPrice.currency
                        itemId = newFloatingBpsPrice.itemId
                        modelType = newFloatingBpsPrice.modelType
                        name = newFloatingBpsPrice.name
                        billableMetricId = newFloatingBpsPrice.billableMetricId
                        billedInAdvance = newFloatingBpsPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingBpsPrice.billingCycleConfiguration
                        conversionRate = newFloatingBpsPrice.conversionRate
                        externalPriceId = newFloatingBpsPrice.externalPriceId
                        fixedPriceQuantity = newFloatingBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingBpsPrice.invoicingCycleConfiguration
                        metadata = newFloatingBpsPrice.metadata
                        additionalProperties =
                            newFloatingBpsPrice.additionalProperties.toMutableMap()
                    }

                    fun bpsConfig(bpsConfig: BpsConfig) = bpsConfig(JsonField.of(bpsConfig))

                    /**
                     * Sets [Builder.bpsConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.bpsConfig] with a well-typed [BpsConfig]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun bpsConfig(bpsConfig: JsonField<BpsConfig>) = apply {
                        this.bpsConfig = bpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBpsPrice =
                        NewFloatingBpsPrice(
                            checkRequired("bpsConfig", bpsConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("bps")
                    @ExcludeMissing
                    private val bps: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Basis point take rate per event
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun bps(): Double = bps.getRequired("bps")

                    /**
                     * Optional currency amount maximum to cap spend per event
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type
                     *   (e.g. if the server responded with an unexpected value).
                     */
                    fun perUnitMaximum(): Optional<String> =
                        Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                    /**
                     * Returns the raw JSON value of [bps].
                     *
                     * Unlike [bps], this method doesn't throw if the JSON field has an unexpected
                     * type.
                     */
                    @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                    /**
                     * Returns the raw JSON value of [perUnitMaximum].
                     *
                     * Unlike [perUnitMaximum], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        bps()
                        perUnitMaximum()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [BpsConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .bps()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BpsConfig]. */
                    class Builder internal constructor() {

                        private var bps: JsonField<Double>? = null
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            bps = bpsConfig.bps
                            perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /**
                         * Sets [Builder.bps] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.bps] with a well-typed [Double] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String?) =
                            perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                        /**
                         * Alias for calling [Builder.perUnitMaximum] with
                         * `perUnitMaximum.orElse(null)`.
                         */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                            perUnitMaximum(perUnitMaximum.getOrNull())

                        /**
                         * Sets [Builder.perUnitMaximum] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.perUnitMaximum] with a well-typed
                         * [String] value instead. This method is primarily for setting the field to
                         * an undocumented or not yet supported value.
                         */
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BpsConfig =
                            BpsConfig(
                                checkRequired("bps", bps),
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BPS = of("bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBpsPrice && bpsConfig == other.bpsConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bpsConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBpsPrice{bpsConfig=$bpsConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                private val bulkBpsConfig: JsonField<BulkBpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig.getRequired("bulk_bps_config")

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [bulkBpsConfig].
                 *
                 * Unlike [bulkBpsConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                fun _bulkBpsConfig(): JsonField<BulkBpsConfig> = bulkBpsConfig

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingBulkBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkBpsConfig().validate()
                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingBulkBpsPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .bulkBpsConfig()
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingBulkBpsPrice]. */
                class Builder internal constructor() {

                    private var bulkBpsConfig: JsonField<BulkBpsConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice) = apply {
                        bulkBpsConfig = newFloatingBulkBpsPrice.bulkBpsConfig
                        cadence = newFloatingBulkBpsPrice.cadence
                        currency = newFloatingBulkBpsPrice.currency
                        itemId = newFloatingBulkBpsPrice.itemId
                        modelType = newFloatingBulkBpsPrice.modelType
                        name = newFloatingBulkBpsPrice.name
                        billableMetricId = newFloatingBulkBpsPrice.billableMetricId
                        billedInAdvance = newFloatingBulkBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingBulkBpsPrice.billingCycleConfiguration
                        conversionRate = newFloatingBulkBpsPrice.conversionRate
                        externalPriceId = newFloatingBulkBpsPrice.externalPriceId
                        fixedPriceQuantity = newFloatingBulkBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingBulkBpsPrice.invoicingCycleConfiguration
                        metadata = newFloatingBulkBpsPrice.metadata
                        additionalProperties =
                            newFloatingBulkBpsPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) =
                        bulkBpsConfig(JsonField.of(bulkBpsConfig))

                    /**
                     * Sets [Builder.bulkBpsConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.bulkBpsConfig] with a well-typed
                     * [BulkBpsConfig] value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun bulkBpsConfig(bulkBpsConfig: JsonField<BulkBpsConfig>) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkBpsPrice =
                        NewFloatingBulkBpsPrice(
                            checkRequired("bulkBpsConfig", bulkBpsConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Returns the raw JSON value of [tiers].
                     *
                     * Unlike [tiers], this method doesn't throw if the JSON field has an unexpected
                     * type.
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkBpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BulkBpsConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .tiers()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkBpsConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            tiers = bulkBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Sets [Builder.tiers] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.tiers] with a well-typed `List<Tier>`
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [Tier] to [tiers].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("tiers", it).add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        private val bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        private val maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * Basis points to rate on
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun bps(): Double = bps.getRequired("bps")

                        /**
                         * Upper bound for tier
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   (e.g. if the server responded with an unexpected value).
                         */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /**
                         * The maximum amount to charge for any one event
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   (e.g. if the server responded with an unexpected value).
                         */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /**
                         * Returns the raw JSON value of [bps].
                         *
                         * Unlike [bps], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                        /**
                         * Returns the raw JSON value of [maximumAmount].
                         *
                         * Unlike [maximumAmount], this method doesn't throw if the JSON field has
                         * an unexpected type.
                         */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount(): JsonField<String> = maximumAmount

                        /**
                         * Returns the raw JSON value of [perUnitMaximum].
                         *
                         * Unlike [perUnitMaximum], this method doesn't throw if the JSON field has
                         * an unexpected type.
                         */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            bps()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            /**
                             * Returns a mutable builder for constructing an instance of [Tier].
                             *
                             * The following fields are required:
                             * ```java
                             * .bps()
                             * ```
                             */
                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var bps: JsonField<Double>? = null
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /**
                             * Sets [Builder.bps] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.bps] with a well-typed [Double]
                             * value instead. This method is primarily for setting the field to an
                             * undocumented or not yet supported value.
                             */
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String?) =
                                maximumAmount(JsonField.ofNullable(maximumAmount))

                            /**
                             * Alias for calling [Builder.maximumAmount] with
                             * `maximumAmount.orElse(null)`.
                             */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.getOrNull())

                            /**
                             * Sets [Builder.maximumAmount] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.maximumAmount] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String?) =
                                perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                            /**
                             * Alias for calling [Builder.perUnitMaximum] with
                             * `perUnitMaximum.orElse(null)`.
                             */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.getOrNull())

                            /**
                             * Sets [Builder.perUnitMaximum] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.perUnitMaximum] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("bps", bps),
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_BPS = of("bulk_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK_BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK_BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkBpsPrice && bulkBpsConfig == other.bulkBpsConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkBpsConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkBpsPrice{bulkBpsConfig=$bulkBpsConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_config")
                @ExcludeMissing
                private val bulkConfig: JsonField<BulkConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun bulkConfig(): BulkConfig = bulkConfig.getRequired("bulk_config")

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [bulkConfig].
                 *
                 * Unlike [bulkConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("bulk_config")
                @ExcludeMissing
                fun _bulkConfig(): JsonField<BulkConfig> = bulkConfig

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingBulkPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkConfig().validate()
                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingBulkPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .bulkConfig()
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingBulkPrice]. */
                class Builder internal constructor() {

                    private var bulkConfig: JsonField<BulkConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBulkPrice: NewFloatingBulkPrice) = apply {
                        bulkConfig = newFloatingBulkPrice.bulkConfig
                        cadence = newFloatingBulkPrice.cadence
                        currency = newFloatingBulkPrice.currency
                        itemId = newFloatingBulkPrice.itemId
                        modelType = newFloatingBulkPrice.modelType
                        name = newFloatingBulkPrice.name
                        billableMetricId = newFloatingBulkPrice.billableMetricId
                        billedInAdvance = newFloatingBulkPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingBulkPrice.billingCycleConfiguration
                        conversionRate = newFloatingBulkPrice.conversionRate
                        externalPriceId = newFloatingBulkPrice.externalPriceId
                        fixedPriceQuantity = newFloatingBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingBulkPrice.invoicingCycleConfiguration
                        metadata = newFloatingBulkPrice.metadata
                        additionalProperties =
                            newFloatingBulkPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkConfig(bulkConfig: BulkConfig) = bulkConfig(JsonField.of(bulkConfig))

                    /**
                     * Sets [Builder.bulkConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.bulkConfig] with a well-typed [BulkConfig]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun bulkConfig(bulkConfig: JsonField<BulkConfig>) = apply {
                        this.bulkConfig = bulkConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkPrice =
                        NewFloatingBulkPrice(
                            checkRequired("bulkConfig", bulkConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Bulk tiers for rating based on total usage volume
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Returns the raw JSON value of [tiers].
                     *
                     * Unlike [tiers], this method doesn't throw if the JSON field has an unexpected
                     * type.
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [BulkConfig].
                         *
                         * The following fields are required:
                         * ```java
                         * .tiers()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            tiers = bulkConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Sets [Builder.tiers] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.tiers] with a well-typed `List<Tier>`
                         * value instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Adds a single [Tier] to [tiers].
                         *
                         * @throws IllegalStateException if the field was previously set to a
                         *   non-list.
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("tiers", it).add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkConfig =
                            BulkConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        private val maximumUnits: JsonField<Double> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * Amount per unit
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   or is unexpectedly missing or null (e.g. if the server responded with
                         *   an unexpected value).
                         */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * Upper bound for this tier
                         *
                         * @throws OrbInvalidDataException if the JSON field has an unexpected type
                         *   (e.g. if the server responded with an unexpected value).
                         */
                        fun maximumUnits(): Optional<Double> =
                            Optional.ofNullable(maximumUnits.getNullable("maximum_units"))

                        /**
                         * Returns the raw JSON value of [unitAmount].
                         *
                         * Unlike [unitAmount], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        /**
                         * Returns the raw JSON value of [maximumUnits].
                         *
                         * Unlike [maximumUnits], this method doesn't throw if the JSON field has an
                         * unexpected type.
                         */
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        fun _maximumUnits(): JsonField<Double> = maximumUnits

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            unitAmount()
                            maximumUnits()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            /**
                             * Returns a mutable builder for constructing an instance of [Tier].
                             *
                             * The following fields are required:
                             * ```java
                             * .unitAmount()
                             * ```
                             */
                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var unitAmount: JsonField<String>? = null
                            private var maximumUnits: JsonField<Double> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                unitAmount = tier.unitAmount
                                maximumUnits = tier.maximumUnits
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /**
                             * Sets [Builder.unitAmount] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.unitAmount] with a well-typed
                             * [String] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double?) =
                                maximumUnits(JsonField.ofNullable(maximumUnits))

                            /**
                             * Alias for [Builder.maximumUnits].
                             *
                             * This unboxed primitive overload exists for backwards compatibility.
                             */
                            fun maximumUnits(maximumUnits: Double) =
                                maximumUnits(maximumUnits as Double?)

                            /**
                             * Alias for calling [Builder.maximumUnits] with
                             * `maximumUnits.orElse(null)`.
                             */
                            fun maximumUnits(maximumUnits: Optional<Double>) =
                                maximumUnits(maximumUnits.getOrNull())

                            /**
                             * Sets [Builder.maximumUnits] to an arbitrary JSON value.
                             *
                             * You should usually call [Builder.maximumUnits] with a well-typed
                             * [Double] value instead. This method is primarily for setting the
                             * field to an undocumented or not yet supported value.
                             */
                            fun maximumUnits(maximumUnits: JsonField<Double>) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("unitAmount", unitAmount),
                                    maximumUnits,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && unitAmount == other.unitAmount && maximumUnits == other.maximumUnits && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(unitAmount, maximumUnits, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{unitAmount=$unitAmount, maximumUnits=$maximumUnits, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK = of("bulk")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkPrice && bulkConfig == other.bulkConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkPrice{bulkConfig=$bulkConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingThresholdTotalAmountPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                private val thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig.getRequired("threshold_total_amount_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [thresholdTotalAmountConfig].
                 *
                 * Unlike [thresholdTotalAmountConfig], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                fun _thresholdTotalAmountConfig(): JsonField<ThresholdTotalAmountConfig> =
                    thresholdTotalAmountConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingThresholdTotalAmountPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    thresholdTotalAmountConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingThresholdTotalAmountPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .thresholdTotalAmountConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingThresholdTotalAmountPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingThresholdTotalAmountPrice: NewFloatingThresholdTotalAmountPrice
                    ) = apply {
                        cadence = newFloatingThresholdTotalAmountPrice.cadence
                        currency = newFloatingThresholdTotalAmountPrice.currency
                        itemId = newFloatingThresholdTotalAmountPrice.itemId
                        modelType = newFloatingThresholdTotalAmountPrice.modelType
                        name = newFloatingThresholdTotalAmountPrice.name
                        thresholdTotalAmountConfig =
                            newFloatingThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        billableMetricId = newFloatingThresholdTotalAmountPrice.billableMetricId
                        billedInAdvance = newFloatingThresholdTotalAmountPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingThresholdTotalAmountPrice.billingCycleConfiguration
                        conversionRate = newFloatingThresholdTotalAmountPrice.conversionRate
                        externalPriceId = newFloatingThresholdTotalAmountPrice.externalPriceId
                        fixedPriceQuantity = newFloatingThresholdTotalAmountPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingThresholdTotalAmountPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingThresholdTotalAmountPrice.invoicingCycleConfiguration
                        metadata = newFloatingThresholdTotalAmountPrice.metadata
                        additionalProperties =
                            newFloatingThresholdTotalAmountPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = thresholdTotalAmountConfig(JsonField.of(thresholdTotalAmountConfig))

                    /**
                     * Sets [Builder.thresholdTotalAmountConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.thresholdTotalAmountConfig] with a
                     * well-typed [ThresholdTotalAmountConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingThresholdTotalAmountPrice =
                        NewFloatingThresholdTotalAmountPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("thresholdTotalAmountConfig", thresholdTotalAmountConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val THRESHOLD_TOTAL_AMOUNT = of("threshold_total_amount")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ThresholdTotalAmountConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): ThresholdTotalAmountConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [ThresholdTotalAmountConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [ThresholdTotalAmountConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties =
                                    thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingThresholdTotalAmountPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, thresholdTotalAmountConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingThresholdTotalAmountPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                private val tieredPackageConfig: JsonField<TieredPackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tieredPackageConfig(): TieredPackageConfig =
                    tieredPackageConfig.getRequired("tiered_package_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [tieredPackageConfig].
                 *
                 * Unlike [tieredPackageConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                fun _tieredPackageConfig(): JsonField<TieredPackageConfig> = tieredPackageConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredPackageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingTieredPackagePrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .tieredPackageConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingTieredPackagePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredPackageConfig: JsonField<TieredPackageConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice
                    ) = apply {
                        cadence = newFloatingTieredPackagePrice.cadence
                        currency = newFloatingTieredPackagePrice.currency
                        itemId = newFloatingTieredPackagePrice.itemId
                        modelType = newFloatingTieredPackagePrice.modelType
                        name = newFloatingTieredPackagePrice.name
                        tieredPackageConfig = newFloatingTieredPackagePrice.tieredPackageConfig
                        billableMetricId = newFloatingTieredPackagePrice.billableMetricId
                        billedInAdvance = newFloatingTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredPackagePrice.conversionRate
                        externalPriceId = newFloatingTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newFloatingTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredPackagePrice.metadata
                        additionalProperties =
                            newFloatingTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) =
                        tieredPackageConfig(JsonField.of(tieredPackageConfig))

                    /**
                     * Sets [Builder.tieredPackageConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tieredPackageConfig] with a well-typed
                     * [TieredPackageConfig] value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun tieredPackageConfig(tieredPackageConfig: JsonField<TieredPackageConfig>) =
                        apply {
                            this.tieredPackageConfig = tieredPackageConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPackagePrice =
                        NewFloatingTieredPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredPackageConfig", tieredPackageConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_PACKAGE = of("tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_PACKAGE
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_PACKAGE,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredPackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [TieredPackageConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredPackageConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties =
                                tieredPackageConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPackagePrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageConfig == other.tieredPackageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredPackageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPackagePrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageConfig=$tieredPackageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_tiered_config")
                @ExcludeMissing
                private val groupedTieredConfig: JsonField<GroupedTieredConfig> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun groupedTieredConfig(): GroupedTieredConfig =
                    groupedTieredConfig.getRequired("grouped_tiered_config")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [groupedTieredConfig].
                 *
                 * Unlike [groupedTieredConfig], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("grouped_tiered_config")
                @ExcludeMissing
                fun _groupedTieredConfig(): JsonField<GroupedTieredConfig> = groupedTieredConfig

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedTieredPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedTieredConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingGroupedTieredPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .groupedTieredConfig()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingGroupedTieredPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedTieredConfig: JsonField<GroupedTieredConfig>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice
                    ) = apply {
                        cadence = newFloatingGroupedTieredPrice.cadence
                        currency = newFloatingGroupedTieredPrice.currency
                        groupedTieredConfig = newFloatingGroupedTieredPrice.groupedTieredConfig
                        itemId = newFloatingGroupedTieredPrice.itemId
                        modelType = newFloatingGroupedTieredPrice.modelType
                        name = newFloatingGroupedTieredPrice.name
                        billableMetricId = newFloatingGroupedTieredPrice.billableMetricId
                        billedInAdvance = newFloatingGroupedTieredPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedTieredPrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedTieredPrice.conversionRate
                        externalPriceId = newFloatingGroupedTieredPrice.externalPriceId
                        fixedPriceQuantity = newFloatingGroupedTieredPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedTieredPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedTieredPrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedTieredPrice.metadata
                        additionalProperties =
                            newFloatingGroupedTieredPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedTieredConfig(groupedTieredConfig: GroupedTieredConfig) =
                        groupedTieredConfig(JsonField.of(groupedTieredConfig))

                    /**
                     * Sets [Builder.groupedTieredConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.groupedTieredConfig] with a well-typed
                     * [GroupedTieredConfig] value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun groupedTieredConfig(groupedTieredConfig: JsonField<GroupedTieredConfig>) =
                        apply {
                            this.groupedTieredConfig = groupedTieredConfig
                        }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedTieredPrice =
                        NewFloatingGroupedTieredPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("groupedTieredConfig", groupedTieredConfig),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedTieredConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedTieredConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [GroupedTieredConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedTieredConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedTieredConfig: GroupedTieredConfig) = apply {
                            additionalProperties =
                                groupedTieredConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedTieredConfig =
                            GroupedTieredConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedTieredConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedTieredConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_TIERED = of("grouped_tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_TIERED
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_TIERED,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_TIERED -> Value.GROUPED_TIERED
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_TIERED -> Known.GROUPED_TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedTieredPrice && cadence == other.cadence && currency == other.currency && groupedTieredConfig == other.groupedTieredConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedTieredConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedTieredPrice{cadence=$cadence, currency=$currency, groupedTieredConfig=$groupedTieredConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMaxGroupTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("max_group_tiered_package_config")
                @ExcludeMissing
                private val maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun maxGroupTieredPackageConfig(): MaxGroupTieredPackageConfig =
                    maxGroupTieredPackageConfig.getRequired("max_group_tiered_package_config")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [maxGroupTieredPackageConfig].
                 *
                 * Unlike [maxGroupTieredPackageConfig], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("max_group_tiered_package_config")
                @ExcludeMissing
                fun _maxGroupTieredPackageConfig(): JsonField<MaxGroupTieredPackageConfig> =
                    maxGroupTieredPackageConfig

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingMaxGroupTieredPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    maxGroupTieredPackageConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingMaxGroupTieredPackagePrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .maxGroupTieredPackageConfig()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingMaxGroupTieredPackagePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var maxGroupTieredPackageConfig:
                        JsonField<MaxGroupTieredPackageConfig>? =
                        null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingMaxGroupTieredPackagePrice: NewFloatingMaxGroupTieredPackagePrice
                    ) = apply {
                        cadence = newFloatingMaxGroupTieredPackagePrice.cadence
                        currency = newFloatingMaxGroupTieredPackagePrice.currency
                        itemId = newFloatingMaxGroupTieredPackagePrice.itemId
                        maxGroupTieredPackageConfig =
                            newFloatingMaxGroupTieredPackagePrice.maxGroupTieredPackageConfig
                        modelType = newFloatingMaxGroupTieredPackagePrice.modelType
                        name = newFloatingMaxGroupTieredPackagePrice.name
                        billableMetricId = newFloatingMaxGroupTieredPackagePrice.billableMetricId
                        billedInAdvance = newFloatingMaxGroupTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingMaxGroupTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newFloatingMaxGroupTieredPackagePrice.conversionRate
                        externalPriceId = newFloatingMaxGroupTieredPackagePrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingMaxGroupTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingMaxGroupTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingMaxGroupTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newFloatingMaxGroupTieredPackagePrice.metadata
                        additionalProperties =
                            newFloatingMaxGroupTieredPackagePrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun maxGroupTieredPackageConfig(
                        maxGroupTieredPackageConfig: MaxGroupTieredPackageConfig
                    ) = maxGroupTieredPackageConfig(JsonField.of(maxGroupTieredPackageConfig))

                    /**
                     * Sets [Builder.maxGroupTieredPackageConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.maxGroupTieredPackageConfig] with a
                     * well-typed [MaxGroupTieredPackageConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun maxGroupTieredPackageConfig(
                        maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig>
                    ) = apply { this.maxGroupTieredPackageConfig = maxGroupTieredPackageConfig }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMaxGroupTieredPackagePrice =
                        NewFloatingMaxGroupTieredPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired(
                                "maxGroupTieredPackageConfig",
                                maxGroupTieredPackageConfig,
                            ),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MaxGroupTieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MaxGroupTieredPackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [MaxGroupTieredPackageConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [MaxGroupTieredPackageConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            maxGroupTieredPackageConfig: MaxGroupTieredPackageConfig
                        ) = apply {
                            additionalProperties =
                                maxGroupTieredPackageConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MaxGroupTieredPackageConfig =
                            MaxGroupTieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MaxGroupTieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MaxGroupTieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAX_GROUP_TIERED_PACKAGE = of("max_group_tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        MAX_GROUP_TIERED_PACKAGE
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MAX_GROUP_TIERED_PACKAGE,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MAX_GROUP_TIERED_PACKAGE -> Value.MAX_GROUP_TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MAX_GROUP_TIERED_PACKAGE -> Known.MAX_GROUP_TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMaxGroupTieredPackagePrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && maxGroupTieredPackageConfig == other.maxGroupTieredPackageConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, maxGroupTieredPackageConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMaxGroupTieredPackagePrice{cadence=$cadence, currency=$currency, itemId=$itemId, maxGroupTieredPackageConfig=$maxGroupTieredPackageConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                private val tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tieredWithMinimumConfig(): TieredWithMinimumConfig =
                    tieredWithMinimumConfig.getRequired("tiered_with_minimum_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [tieredWithMinimumConfig].
                 *
                 * Unlike [tieredWithMinimumConfig], this method doesn't throw if the JSON field has
                 * an unexpected type.
                 */
                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                fun _tieredWithMinimumConfig(): JsonField<TieredWithMinimumConfig> =
                    tieredWithMinimumConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredWithMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredWithMinimumConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingTieredWithMinimumPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .tieredWithMinimumConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingTieredWithMinimumPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice
                    ) = apply {
                        cadence = newFloatingTieredWithMinimumPrice.cadence
                        currency = newFloatingTieredWithMinimumPrice.currency
                        itemId = newFloatingTieredWithMinimumPrice.itemId
                        modelType = newFloatingTieredWithMinimumPrice.modelType
                        name = newFloatingTieredWithMinimumPrice.name
                        tieredWithMinimumConfig =
                            newFloatingTieredWithMinimumPrice.tieredWithMinimumConfig
                        billableMetricId = newFloatingTieredWithMinimumPrice.billableMetricId
                        billedInAdvance = newFloatingTieredWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingTieredWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredWithMinimumPrice.conversionRate
                        externalPriceId = newFloatingTieredWithMinimumPrice.externalPriceId
                        fixedPriceQuantity = newFloatingTieredWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredWithMinimumPrice.metadata
                        additionalProperties =
                            newFloatingTieredWithMinimumPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        tieredWithMinimumConfig(JsonField.of(tieredWithMinimumConfig))

                    /**
                     * Sets [Builder.tieredWithMinimumConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tieredWithMinimumConfig] with a well-typed
                     * [TieredWithMinimumConfig] value instead. This method is primarily for setting
                     * the field to an undocumented or not yet supported value.
                     */
                    fun tieredWithMinimumConfig(
                        tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>
                    ) = apply { this.tieredWithMinimumConfig = tieredWithMinimumConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredWithMinimumPrice =
                        NewFloatingTieredWithMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredWithMinimumConfig", tieredWithMinimumConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_MINIMUM = of("tiered_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_WITH_MINIMUM
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredWithMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [TieredWithMinimumConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredWithMinimumConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithMinimumConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredWithMinimumPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithMinimumConfig == other.tieredWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredWithMinimumPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredWithMinimumConfig=$tieredWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingPackageWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                private val packageWithAllocationConfig: JsonField<PackageWithAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig.getRequired("package_with_allocation_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [packageWithAllocationConfig].
                 *
                 * Unlike [packageWithAllocationConfig], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                fun _packageWithAllocationConfig(): JsonField<PackageWithAllocationConfig> =
                    packageWithAllocationConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingPackageWithAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    packageWithAllocationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingPackageWithAllocationPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .packageWithAllocationConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingPackageWithAllocationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var packageWithAllocationConfig:
                        JsonField<PackageWithAllocationConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingPackageWithAllocationPrice: NewFloatingPackageWithAllocationPrice
                    ) = apply {
                        cadence = newFloatingPackageWithAllocationPrice.cadence
                        currency = newFloatingPackageWithAllocationPrice.currency
                        itemId = newFloatingPackageWithAllocationPrice.itemId
                        modelType = newFloatingPackageWithAllocationPrice.modelType
                        name = newFloatingPackageWithAllocationPrice.name
                        packageWithAllocationConfig =
                            newFloatingPackageWithAllocationPrice.packageWithAllocationConfig
                        billableMetricId = newFloatingPackageWithAllocationPrice.billableMetricId
                        billedInAdvance = newFloatingPackageWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingPackageWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newFloatingPackageWithAllocationPrice.conversionRate
                        externalPriceId = newFloatingPackageWithAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingPackageWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingPackageWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingPackageWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newFloatingPackageWithAllocationPrice.metadata
                        additionalProperties =
                            newFloatingPackageWithAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = packageWithAllocationConfig(JsonField.of(packageWithAllocationConfig))

                    /**
                     * Sets [Builder.packageWithAllocationConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.packageWithAllocationConfig] with a
                     * well-typed [PackageWithAllocationConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingPackageWithAllocationPrice =
                        NewFloatingPackageWithAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired(
                                "packageWithAllocationConfig",
                                packageWithAllocationConfig,
                            ),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE_WITH_ALLOCATION = of("package_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        PACKAGE_WITH_ALLOCATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): PackageWithAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [PackageWithAllocationConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [PackageWithAllocationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties =
                                packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingPackageWithAllocationPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && packageWithAllocationConfig == other.packageWithAllocationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, packageWithAllocationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingPackageWithAllocationPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, packageWithAllocationConfig=$packageWithAllocationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPackageWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_package_with_minimum_config")
                @ExcludeMissing
                private val tieredPackageWithMinimumConfig:
                    JsonField<TieredPackageWithMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tieredPackageWithMinimumConfig(): TieredPackageWithMinimumConfig =
                    tieredPackageWithMinimumConfig.getRequired("tiered_package_with_minimum_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [tieredPackageWithMinimumConfig].
                 *
                 * Unlike [tieredPackageWithMinimumConfig], this method doesn't throw if the JSON
                 * field has an unexpected type.
                 */
                @JsonProperty("tiered_package_with_minimum_config")
                @ExcludeMissing
                fun _tieredPackageWithMinimumConfig(): JsonField<TieredPackageWithMinimumConfig> =
                    tieredPackageWithMinimumConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredPackageWithMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredPackageWithMinimumConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingTieredPackageWithMinimumPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .tieredPackageWithMinimumConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingTieredPackageWithMinimumPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredPackageWithMinimumConfig:
                        JsonField<TieredPackageWithMinimumConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredPackageWithMinimumPrice:
                            NewFloatingTieredPackageWithMinimumPrice
                    ) = apply {
                        cadence = newFloatingTieredPackageWithMinimumPrice.cadence
                        currency = newFloatingTieredPackageWithMinimumPrice.currency
                        itemId = newFloatingTieredPackageWithMinimumPrice.itemId
                        modelType = newFloatingTieredPackageWithMinimumPrice.modelType
                        name = newFloatingTieredPackageWithMinimumPrice.name
                        tieredPackageWithMinimumConfig =
                            newFloatingTieredPackageWithMinimumPrice.tieredPackageWithMinimumConfig
                        billableMetricId = newFloatingTieredPackageWithMinimumPrice.billableMetricId
                        billedInAdvance = newFloatingTieredPackageWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingTieredPackageWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredPackageWithMinimumPrice.conversionRate
                        externalPriceId = newFloatingTieredPackageWithMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingTieredPackageWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingTieredPackageWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredPackageWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredPackageWithMinimumPrice.metadata
                        additionalProperties =
                            newFloatingTieredPackageWithMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredPackageWithMinimumConfig(
                        tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig
                    ) = tieredPackageWithMinimumConfig(JsonField.of(tieredPackageWithMinimumConfig))

                    /**
                     * Sets [Builder.tieredPackageWithMinimumConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tieredPackageWithMinimumConfig] with a
                     * well-typed [TieredPackageWithMinimumConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun tieredPackageWithMinimumConfig(
                        tieredPackageWithMinimumConfig: JsonField<TieredPackageWithMinimumConfig>
                    ) = apply {
                        this.tieredPackageWithMinimumConfig = tieredPackageWithMinimumConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPackageWithMinimumPrice =
                        NewFloatingTieredPackageWithMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired(
                                "tieredPackageWithMinimumConfig",
                                tieredPackageWithMinimumConfig,
                            ),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val TIERED_PACKAGE_WITH_MINIMUM = of("tiered_package_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_PACKAGE_WITH_MINIMUM
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_PACKAGE_WITH_MINIMUM,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE_WITH_MINIMUM -> Value.TIERED_PACKAGE_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE_WITH_MINIMUM -> Known.TIERED_PACKAGE_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredPackageWithMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [TieredPackageWithMinimumConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredPackageWithMinimumConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig
                        ) = apply {
                            additionalProperties =
                                tieredPackageWithMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageWithMinimumConfig =
                            TieredPackageWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPackageWithMinimumPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageWithMinimumConfig == other.tieredPackageWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredPackageWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPackageWithMinimumPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageWithMinimumConfig=$tieredPackageWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingUnitWithPercentPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                private val unitWithPercentConfig: JsonField<UnitWithPercentConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun unitWithPercentConfig(): UnitWithPercentConfig =
                    unitWithPercentConfig.getRequired("unit_with_percent_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [unitWithPercentConfig].
                 *
                 * Unlike [unitWithPercentConfig], this method doesn't throw if the JSON field has
                 * an unexpected type.
                 */
                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                fun _unitWithPercentConfig(): JsonField<UnitWithPercentConfig> =
                    unitWithPercentConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingUnitWithPercentPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    unitWithPercentConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingUnitWithPercentPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .unitWithPercentConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingUnitWithPercentPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitWithPercentConfig: JsonField<UnitWithPercentConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice
                    ) = apply {
                        cadence = newFloatingUnitWithPercentPrice.cadence
                        currency = newFloatingUnitWithPercentPrice.currency
                        itemId = newFloatingUnitWithPercentPrice.itemId
                        modelType = newFloatingUnitWithPercentPrice.modelType
                        name = newFloatingUnitWithPercentPrice.name
                        unitWithPercentConfig =
                            newFloatingUnitWithPercentPrice.unitWithPercentConfig
                        billableMetricId = newFloatingUnitWithPercentPrice.billableMetricId
                        billedInAdvance = newFloatingUnitWithPercentPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingUnitWithPercentPrice.billingCycleConfiguration
                        conversionRate = newFloatingUnitWithPercentPrice.conversionRate
                        externalPriceId = newFloatingUnitWithPercentPrice.externalPriceId
                        fixedPriceQuantity = newFloatingUnitWithPercentPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitWithPercentPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingUnitWithPercentPrice.invoicingCycleConfiguration
                        metadata = newFloatingUnitWithPercentPrice.metadata
                        additionalProperties =
                            newFloatingUnitWithPercentPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        unitWithPercentConfig(JsonField.of(unitWithPercentConfig))

                    /**
                     * Sets [Builder.unitWithPercentConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.unitWithPercentConfig] with a well-typed
                     * [UnitWithPercentConfig] value instead. This method is primarily for setting
                     * the field to an undocumented or not yet supported value.
                     */
                    fun unitWithPercentConfig(
                        unitWithPercentConfig: JsonField<UnitWithPercentConfig>
                    ) = apply { this.unitWithPercentConfig = unitWithPercentConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitWithPercentPrice =
                        NewFloatingUnitWithPercentPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitWithPercentConfig", unitWithPercentConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PERCENT = of("unit_with_percent")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT_WITH_PERCENT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT_WITH_PERCENT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithPercentConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitWithPercentConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [UnitWithPercentConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitWithPercentConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties =
                                unitWithPercentConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitWithPercentPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithPercentConfig == other.unitWithPercentConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitWithPercentConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitWithPercentPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitWithPercentConfig=$unitWithPercentConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                private val tieredWithProrationConfig: JsonField<TieredWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig.getRequired("tiered_with_proration_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [tieredWithProrationConfig].
                 *
                 * Unlike [tieredWithProrationConfig], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                fun _tieredWithProrationConfig(): JsonField<TieredWithProrationConfig> =
                    tieredWithProrationConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingTieredWithProrationPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .tieredWithProrationConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingTieredWithProrationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredWithProrationConfig: JsonField<TieredWithProrationConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice
                    ) = apply {
                        cadence = newFloatingTieredWithProrationPrice.cadence
                        currency = newFloatingTieredWithProrationPrice.currency
                        itemId = newFloatingTieredWithProrationPrice.itemId
                        modelType = newFloatingTieredWithProrationPrice.modelType
                        name = newFloatingTieredWithProrationPrice.name
                        tieredWithProrationConfig =
                            newFloatingTieredWithProrationPrice.tieredWithProrationConfig
                        billableMetricId = newFloatingTieredWithProrationPrice.billableMetricId
                        billedInAdvance = newFloatingTieredWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingTieredWithProrationPrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredWithProrationPrice.conversionRate
                        externalPriceId = newFloatingTieredWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingTieredWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredWithProrationPrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredWithProrationPrice.metadata
                        additionalProperties =
                            newFloatingTieredWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = tieredWithProrationConfig(JsonField.of(tieredWithProrationConfig))

                    /**
                     * Sets [Builder.tieredWithProrationConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.tieredWithProrationConfig] with a well-typed
                     * [TieredWithProrationConfig] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: JsonField<TieredWithProrationConfig>
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredWithProrationPrice =
                        NewFloatingTieredWithProrationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredWithProrationConfig", tieredWithProrationConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_PRORATION = of("tiered_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [TieredWithProrationConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredWithProrationPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithProrationConfig == other.tieredWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredWithProrationPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredWithProrationConfig=$tieredWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingUnitWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                private val unitWithProrationConfig: JsonField<UnitWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun unitWithProrationConfig(): UnitWithProrationConfig =
                    unitWithProrationConfig.getRequired("unit_with_proration_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [unitWithProrationConfig].
                 *
                 * Unlike [unitWithProrationConfig], this method doesn't throw if the JSON field has
                 * an unexpected type.
                 */
                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                fun _unitWithProrationConfig(): JsonField<UnitWithProrationConfig> =
                    unitWithProrationConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingUnitWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    unitWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingUnitWithProrationPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .unitWithProrationConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingUnitWithProrationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitWithProrationConfig: JsonField<UnitWithProrationConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice
                    ) = apply {
                        cadence = newFloatingUnitWithProrationPrice.cadence
                        currency = newFloatingUnitWithProrationPrice.currency
                        itemId = newFloatingUnitWithProrationPrice.itemId
                        modelType = newFloatingUnitWithProrationPrice.modelType
                        name = newFloatingUnitWithProrationPrice.name
                        unitWithProrationConfig =
                            newFloatingUnitWithProrationPrice.unitWithProrationConfig
                        billableMetricId = newFloatingUnitWithProrationPrice.billableMetricId
                        billedInAdvance = newFloatingUnitWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingUnitWithProrationPrice.billingCycleConfiguration
                        conversionRate = newFloatingUnitWithProrationPrice.conversionRate
                        externalPriceId = newFloatingUnitWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingUnitWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingUnitWithProrationPrice.invoicingCycleConfiguration
                        metadata = newFloatingUnitWithProrationPrice.metadata
                        additionalProperties =
                            newFloatingUnitWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        unitWithProrationConfig(JsonField.of(unitWithProrationConfig))

                    /**
                     * Sets [Builder.unitWithProrationConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.unitWithProrationConfig] with a well-typed
                     * [UnitWithProrationConfig] value instead. This method is primarily for setting
                     * the field to an undocumented or not yet supported value.
                     */
                    fun unitWithProrationConfig(
                        unitWithProrationConfig: JsonField<UnitWithProrationConfig>
                    ) = apply { this.unitWithProrationConfig = unitWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitWithProrationPrice =
                        NewFloatingUnitWithProrationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitWithProrationConfig", unitWithProrationConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PRORATION = of("unit_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [UnitWithProrationConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    unitWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitWithProrationPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithProrationConfig == other.unitWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitWithProrationPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitWithProrationConfig=$unitWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                private val groupedAllocationConfig: JsonField<GroupedAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun groupedAllocationConfig(): GroupedAllocationConfig =
                    groupedAllocationConfig.getRequired("grouped_allocation_config")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [groupedAllocationConfig].
                 *
                 * Unlike [groupedAllocationConfig], this method doesn't throw if the JSON field has
                 * an unexpected type.
                 */
                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                fun _groupedAllocationConfig(): JsonField<GroupedAllocationConfig> =
                    groupedAllocationConfig

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedAllocationConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingGroupedAllocationPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .groupedAllocationConfig()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingGroupedAllocationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedAllocationConfig: JsonField<GroupedAllocationConfig>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice
                    ) = apply {
                        cadence = newFloatingGroupedAllocationPrice.cadence
                        currency = newFloatingGroupedAllocationPrice.currency
                        groupedAllocationConfig =
                            newFloatingGroupedAllocationPrice.groupedAllocationConfig
                        itemId = newFloatingGroupedAllocationPrice.itemId
                        modelType = newFloatingGroupedAllocationPrice.modelType
                        name = newFloatingGroupedAllocationPrice.name
                        billableMetricId = newFloatingGroupedAllocationPrice.billableMetricId
                        billedInAdvance = newFloatingGroupedAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedAllocationPrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedAllocationPrice.conversionRate
                        externalPriceId = newFloatingGroupedAllocationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingGroupedAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedAllocationPrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedAllocationPrice.metadata
                        additionalProperties =
                            newFloatingGroupedAllocationPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        groupedAllocationConfig(JsonField.of(groupedAllocationConfig))

                    /**
                     * Sets [Builder.groupedAllocationConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.groupedAllocationConfig] with a well-typed
                     * [GroupedAllocationConfig] value instead. This method is primarily for setting
                     * the field to an undocumented or not yet supported value.
                     */
                    fun groupedAllocationConfig(
                        groupedAllocationConfig: JsonField<GroupedAllocationConfig>
                    ) = apply { this.groupedAllocationConfig = groupedAllocationConfig }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedAllocationPrice =
                        NewFloatingGroupedAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("groupedAllocationConfig", groupedAllocationConfig),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [GroupedAllocationConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedAllocationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties =
                                    groupedAllocationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_ALLOCATION = of("grouped_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_ALLOCATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_ALLOCATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedAllocationPrice && cadence == other.cadence && currency == other.currency && groupedAllocationConfig == other.groupedAllocationConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedAllocationConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedAllocationPrice{cadence=$cadence, currency=$currency, groupedAllocationConfig=$groupedAllocationConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedWithProratedMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                private val groupedWithProratedMinimumConfig:
                    JsonField<GroupedWithProratedMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig.getRequired(
                        "grouped_with_prorated_minimum_config"
                    )

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [groupedWithProratedMinimumConfig].
                 *
                 * Unlike [groupedWithProratedMinimumConfig], this method doesn't throw if the JSON
                 * field has an unexpected type.
                 */
                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                fun _groupedWithProratedMinimumConfig():
                    JsonField<GroupedWithProratedMinimumConfig> = groupedWithProratedMinimumConfig

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedWithProratedMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedWithProratedMinimumConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingGroupedWithProratedMinimumPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .groupedWithProratedMinimumConfig()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingGroupedWithProratedMinimumPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedWithProratedMinimumConfig:
                        JsonField<GroupedWithProratedMinimumConfig>? =
                        null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedWithProratedMinimumPrice:
                            NewFloatingGroupedWithProratedMinimumPrice
                    ) = apply {
                        cadence = newFloatingGroupedWithProratedMinimumPrice.cadence
                        currency = newFloatingGroupedWithProratedMinimumPrice.currency
                        groupedWithProratedMinimumConfig =
                            newFloatingGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        itemId = newFloatingGroupedWithProratedMinimumPrice.itemId
                        modelType = newFloatingGroupedWithProratedMinimumPrice.modelType
                        name = newFloatingGroupedWithProratedMinimumPrice.name
                        billableMetricId =
                            newFloatingGroupedWithProratedMinimumPrice.billableMetricId
                        billedInAdvance = newFloatingGroupedWithProratedMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedWithProratedMinimumPrice.conversionRate
                        externalPriceId = newFloatingGroupedWithProratedMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedWithProratedMinimumPrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedWithProratedMinimumPrice.metadata
                        additionalProperties =
                            newFloatingGroupedWithProratedMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) =
                        groupedWithProratedMinimumConfig(
                            JsonField.of(groupedWithProratedMinimumConfig)
                        )

                    /**
                     * Sets [Builder.groupedWithProratedMinimumConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.groupedWithProratedMinimumConfig] with a
                     * well-typed [GroupedWithProratedMinimumConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig:
                            JsonField<GroupedWithProratedMinimumConfig>
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedWithProratedMinimumPrice =
                        NewFloatingGroupedWithProratedMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired(
                                "groupedWithProratedMinimumConfig",
                                groupedWithProratedMinimumConfig,
                            ),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedWithProratedMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [GroupedWithProratedMinimumConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedWithProratedMinimumConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM = of("grouped_with_prorated_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedWithProratedMinimumPrice && cadence == other.cadence && currency == other.currency && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedWithProratedMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedWithProratedMinimumPrice{cadence=$cadence, currency=$currency, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedWithMeteredMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_with_metered_minimum_config")
                @ExcludeMissing
                private val groupedWithMeteredMinimumConfig:
                    JsonField<GroupedWithMeteredMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun groupedWithMeteredMinimumConfig(): GroupedWithMeteredMinimumConfig =
                    groupedWithMeteredMinimumConfig.getRequired(
                        "grouped_with_metered_minimum_config"
                    )

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [groupedWithMeteredMinimumConfig].
                 *
                 * Unlike [groupedWithMeteredMinimumConfig], this method doesn't throw if the JSON
                 * field has an unexpected type.
                 */
                @JsonProperty("grouped_with_metered_minimum_config")
                @ExcludeMissing
                fun _groupedWithMeteredMinimumConfig(): JsonField<GroupedWithMeteredMinimumConfig> =
                    groupedWithMeteredMinimumConfig

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedWithMeteredMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedWithMeteredMinimumConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingGroupedWithMeteredMinimumPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .groupedWithMeteredMinimumConfig()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingGroupedWithMeteredMinimumPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedWithMeteredMinimumConfig:
                        JsonField<GroupedWithMeteredMinimumConfig>? =
                        null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedWithMeteredMinimumPrice:
                            NewFloatingGroupedWithMeteredMinimumPrice
                    ) = apply {
                        cadence = newFloatingGroupedWithMeteredMinimumPrice.cadence
                        currency = newFloatingGroupedWithMeteredMinimumPrice.currency
                        groupedWithMeteredMinimumConfig =
                            newFloatingGroupedWithMeteredMinimumPrice
                                .groupedWithMeteredMinimumConfig
                        itemId = newFloatingGroupedWithMeteredMinimumPrice.itemId
                        modelType = newFloatingGroupedWithMeteredMinimumPrice.modelType
                        name = newFloatingGroupedWithMeteredMinimumPrice.name
                        billableMetricId =
                            newFloatingGroupedWithMeteredMinimumPrice.billableMetricId
                        billedInAdvance = newFloatingGroupedWithMeteredMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedWithMeteredMinimumPrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedWithMeteredMinimumPrice.conversionRate
                        externalPriceId = newFloatingGroupedWithMeteredMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingGroupedWithMeteredMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingGroupedWithMeteredMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedWithMeteredMinimumPrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedWithMeteredMinimumPrice.metadata
                        additionalProperties =
                            newFloatingGroupedWithMeteredMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedWithMeteredMinimumConfig(
                        groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig
                    ) =
                        groupedWithMeteredMinimumConfig(
                            JsonField.of(groupedWithMeteredMinimumConfig)
                        )

                    /**
                     * Sets [Builder.groupedWithMeteredMinimumConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.groupedWithMeteredMinimumConfig] with a
                     * well-typed [GroupedWithMeteredMinimumConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun groupedWithMeteredMinimumConfig(
                        groupedWithMeteredMinimumConfig: JsonField<GroupedWithMeteredMinimumConfig>
                    ) = apply {
                        this.groupedWithMeteredMinimumConfig = groupedWithMeteredMinimumConfig
                    }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedWithMeteredMinimumPrice =
                        NewFloatingGroupedWithMeteredMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired(
                                "groupedWithMeteredMinimumConfig",
                                groupedWithMeteredMinimumConfig,
                            ),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithMeteredMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedWithMeteredMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [GroupedWithMeteredMinimumConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedWithMeteredMinimumConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithMeteredMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithMeteredMinimumConfig =
                            GroupedWithMeteredMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithMeteredMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithMeteredMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_METERED_MINIMUM = of("grouped_with_metered_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_WITH_METERED_MINIMUM
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_WITH_METERED_MINIMUM,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_METERED_MINIMUM -> Value.GROUPED_WITH_METERED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_METERED_MINIMUM -> Known.GROUPED_WITH_METERED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedWithMeteredMinimumPrice && cadence == other.cadence && currency == other.currency && groupedWithMeteredMinimumConfig == other.groupedWithMeteredMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedWithMeteredMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedWithMeteredMinimumPrice{cadence=$cadence, currency=$currency, groupedWithMeteredMinimumConfig=$groupedWithMeteredMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixWithDisplayNamePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_with_display_name_config")
                @ExcludeMissing
                private val matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun matrixWithDisplayNameConfig(): MatrixWithDisplayNameConfig =
                    matrixWithDisplayNameConfig.getRequired("matrix_with_display_name_config")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [matrixWithDisplayNameConfig].
                 *
                 * Unlike [matrixWithDisplayNameConfig], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("matrix_with_display_name_config")
                @ExcludeMissing
                fun _matrixWithDisplayNameConfig(): JsonField<MatrixWithDisplayNameConfig> =
                    matrixWithDisplayNameConfig

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingMatrixWithDisplayNamePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    matrixWithDisplayNameConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingMatrixWithDisplayNamePrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .matrixWithDisplayNameConfig()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingMatrixWithDisplayNamePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var matrixWithDisplayNameConfig:
                        JsonField<MatrixWithDisplayNameConfig>? =
                        null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingMatrixWithDisplayNamePrice: NewFloatingMatrixWithDisplayNamePrice
                    ) = apply {
                        cadence = newFloatingMatrixWithDisplayNamePrice.cadence
                        currency = newFloatingMatrixWithDisplayNamePrice.currency
                        itemId = newFloatingMatrixWithDisplayNamePrice.itemId
                        matrixWithDisplayNameConfig =
                            newFloatingMatrixWithDisplayNamePrice.matrixWithDisplayNameConfig
                        modelType = newFloatingMatrixWithDisplayNamePrice.modelType
                        name = newFloatingMatrixWithDisplayNamePrice.name
                        billableMetricId = newFloatingMatrixWithDisplayNamePrice.billableMetricId
                        billedInAdvance = newFloatingMatrixWithDisplayNamePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingMatrixWithDisplayNamePrice.billingCycleConfiguration
                        conversionRate = newFloatingMatrixWithDisplayNamePrice.conversionRate
                        externalPriceId = newFloatingMatrixWithDisplayNamePrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingMatrixWithDisplayNamePrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingMatrixWithDisplayNamePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingMatrixWithDisplayNamePrice.invoicingCycleConfiguration
                        metadata = newFloatingMatrixWithDisplayNamePrice.metadata
                        additionalProperties =
                            newFloatingMatrixWithDisplayNamePrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun matrixWithDisplayNameConfig(
                        matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig
                    ) = matrixWithDisplayNameConfig(JsonField.of(matrixWithDisplayNameConfig))

                    /**
                     * Sets [Builder.matrixWithDisplayNameConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.matrixWithDisplayNameConfig] with a
                     * well-typed [MatrixWithDisplayNameConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun matrixWithDisplayNameConfig(
                        matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig>
                    ) = apply { this.matrixWithDisplayNameConfig = matrixWithDisplayNameConfig }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixWithDisplayNamePrice =
                        NewFloatingMatrixWithDisplayNamePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired(
                                "matrixWithDisplayNameConfig",
                                matrixWithDisplayNameConfig,
                            ),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixWithDisplayNameConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixWithDisplayNameConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [MatrixWithDisplayNameConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [MatrixWithDisplayNameConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig
                        ) = apply {
                            additionalProperties =
                                matrixWithDisplayNameConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixWithDisplayNameConfig =
                            MatrixWithDisplayNameConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixWithDisplayNameConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixWithDisplayNameConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX_WITH_DISPLAY_NAME = of("matrix_with_display_name")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        MATRIX_WITH_DISPLAY_NAME
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MATRIX_WITH_DISPLAY_NAME,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MATRIX_WITH_DISPLAY_NAME -> Value.MATRIX_WITH_DISPLAY_NAME
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MATRIX_WITH_DISPLAY_NAME -> Known.MATRIX_WITH_DISPLAY_NAME
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixWithDisplayNamePrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixWithDisplayNameConfig == other.matrixWithDisplayNameConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixWithDisplayNameConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixWithDisplayNamePrice{cadence=$cadence, currency=$currency, itemId=$itemId, matrixWithDisplayNameConfig=$matrixWithDisplayNameConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                private val bulkWithProrationConfig: JsonField<BulkWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun bulkWithProrationConfig(): BulkWithProrationConfig =
                    bulkWithProrationConfig.getRequired("bulk_with_proration_config")

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [bulkWithProrationConfig].
                 *
                 * Unlike [bulkWithProrationConfig], this method doesn't throw if the JSON field has
                 * an unexpected type.
                 */
                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                fun _bulkWithProrationConfig(): JsonField<BulkWithProrationConfig> =
                    bulkWithProrationConfig

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingBulkWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkWithProrationConfig().validate()
                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingBulkWithProrationPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .bulkWithProrationConfig()
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingBulkWithProrationPrice]. */
                class Builder internal constructor() {

                    private var bulkWithProrationConfig: JsonField<BulkWithProrationConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice
                    ) = apply {
                        bulkWithProrationConfig =
                            newFloatingBulkWithProrationPrice.bulkWithProrationConfig
                        cadence = newFloatingBulkWithProrationPrice.cadence
                        currency = newFloatingBulkWithProrationPrice.currency
                        itemId = newFloatingBulkWithProrationPrice.itemId
                        modelType = newFloatingBulkWithProrationPrice.modelType
                        name = newFloatingBulkWithProrationPrice.name
                        billableMetricId = newFloatingBulkWithProrationPrice.billableMetricId
                        billedInAdvance = newFloatingBulkWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingBulkWithProrationPrice.billingCycleConfiguration
                        conversionRate = newFloatingBulkWithProrationPrice.conversionRate
                        externalPriceId = newFloatingBulkWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingBulkWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingBulkWithProrationPrice.invoicingCycleConfiguration
                        metadata = newFloatingBulkWithProrationPrice.metadata
                        additionalProperties =
                            newFloatingBulkWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        bulkWithProrationConfig(JsonField.of(bulkWithProrationConfig))

                    /**
                     * Sets [Builder.bulkWithProrationConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.bulkWithProrationConfig] with a well-typed
                     * [BulkWithProrationConfig] value instead. This method is primarily for setting
                     * the field to an undocumented or not yet supported value.
                     */
                    fun bulkWithProrationConfig(
                        bulkWithProrationConfig: JsonField<BulkWithProrationConfig>
                    ) = apply { this.bulkWithProrationConfig = bulkWithProrationConfig }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkWithProrationPrice =
                        NewFloatingBulkWithProrationPrice(
                            checkRequired("bulkWithProrationConfig", bulkWithProrationConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BulkWithProrationConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    bulkWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_WITH_PRORATION = of("bulk_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkWithProrationPrice && bulkWithProrationConfig == other.bulkWithProrationConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkWithProrationConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkWithProrationPrice{bulkWithProrationConfig=$bulkWithProrationConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_tiered_package_config")
                @ExcludeMissing
                private val groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun groupedTieredPackageConfig(): GroupedTieredPackageConfig =
                    groupedTieredPackageConfig.getRequired("grouped_tiered_package_config")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [groupedTieredPackageConfig].
                 *
                 * Unlike [groupedTieredPackageConfig], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("grouped_tiered_package_config")
                @ExcludeMissing
                fun _groupedTieredPackageConfig(): JsonField<GroupedTieredPackageConfig> =
                    groupedTieredPackageConfig

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedTieredPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedTieredPackageConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingGroupedTieredPackagePrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .groupedTieredPackageConfig()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingGroupedTieredPackagePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>? =
                        null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedTieredPackagePrice: NewFloatingGroupedTieredPackagePrice
                    ) = apply {
                        cadence = newFloatingGroupedTieredPackagePrice.cadence
                        currency = newFloatingGroupedTieredPackagePrice.currency
                        groupedTieredPackageConfig =
                            newFloatingGroupedTieredPackagePrice.groupedTieredPackageConfig
                        itemId = newFloatingGroupedTieredPackagePrice.itemId
                        modelType = newFloatingGroupedTieredPackagePrice.modelType
                        name = newFloatingGroupedTieredPackagePrice.name
                        billableMetricId = newFloatingGroupedTieredPackagePrice.billableMetricId
                        billedInAdvance = newFloatingGroupedTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedTieredPackagePrice.conversionRate
                        externalPriceId = newFloatingGroupedTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newFloatingGroupedTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedTieredPackagePrice.metadata
                        additionalProperties =
                            newFloatingGroupedTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedTieredPackageConfig(
                        groupedTieredPackageConfig: GroupedTieredPackageConfig
                    ) = groupedTieredPackageConfig(JsonField.of(groupedTieredPackageConfig))

                    /**
                     * Sets [Builder.groupedTieredPackageConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.groupedTieredPackageConfig] with a
                     * well-typed [GroupedTieredPackageConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun groupedTieredPackageConfig(
                        groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>
                    ) = apply { this.groupedTieredPackageConfig = groupedTieredPackageConfig }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedTieredPackagePrice =
                        NewFloatingGroupedTieredPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("groupedTieredPackageConfig", groupedTieredPackageConfig),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedTieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedTieredPackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [GroupedTieredPackageConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedTieredPackageConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedTieredPackageConfig: GroupedTieredPackageConfig) =
                            apply {
                                additionalProperties =
                                    groupedTieredPackageConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedTieredPackageConfig =
                            GroupedTieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedTieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedTieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_TIERED_PACKAGE = of("grouped_tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_TIERED_PACKAGE
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_TIERED_PACKAGE,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_TIERED_PACKAGE -> Value.GROUPED_TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_TIERED_PACKAGE -> Known.GROUPED_TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedTieredPackagePrice && cadence == other.cadence && currency == other.currency && groupedTieredPackageConfig == other.groupedTieredPackageConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedTieredPackageConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedTieredPackagePrice{cadence=$cadence, currency=$currency, groupedTieredPackageConfig=$groupedTieredPackageConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingScalableMatrixWithUnitPricingPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("scalable_matrix_with_unit_pricing_config")
                @ExcludeMissing
                private val scalableMatrixWithUnitPricingConfig:
                    JsonField<ScalableMatrixWithUnitPricingConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun scalableMatrixWithUnitPricingConfig(): ScalableMatrixWithUnitPricingConfig =
                    scalableMatrixWithUnitPricingConfig.getRequired(
                        "scalable_matrix_with_unit_pricing_config"
                    )

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [scalableMatrixWithUnitPricingConfig].
                 *
                 * Unlike [scalableMatrixWithUnitPricingConfig], this method doesn't throw if the
                 * JSON field has an unexpected type.
                 */
                @JsonProperty("scalable_matrix_with_unit_pricing_config")
                @ExcludeMissing
                fun _scalableMatrixWithUnitPricingConfig():
                    JsonField<ScalableMatrixWithUnitPricingConfig> =
                    scalableMatrixWithUnitPricingConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingScalableMatrixWithUnitPricingPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    scalableMatrixWithUnitPricingConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingScalableMatrixWithUnitPricingPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .scalableMatrixWithUnitPricingConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingScalableMatrixWithUnitPricingPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var scalableMatrixWithUnitPricingConfig:
                        JsonField<ScalableMatrixWithUnitPricingConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingScalableMatrixWithUnitPricingPrice:
                            NewFloatingScalableMatrixWithUnitPricingPrice
                    ) = apply {
                        cadence = newFloatingScalableMatrixWithUnitPricingPrice.cadence
                        currency = newFloatingScalableMatrixWithUnitPricingPrice.currency
                        itemId = newFloatingScalableMatrixWithUnitPricingPrice.itemId
                        modelType = newFloatingScalableMatrixWithUnitPricingPrice.modelType
                        name = newFloatingScalableMatrixWithUnitPricingPrice.name
                        scalableMatrixWithUnitPricingConfig =
                            newFloatingScalableMatrixWithUnitPricingPrice
                                .scalableMatrixWithUnitPricingConfig
                        billableMetricId =
                            newFloatingScalableMatrixWithUnitPricingPrice.billableMetricId
                        billedInAdvance =
                            newFloatingScalableMatrixWithUnitPricingPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingScalableMatrixWithUnitPricingPrice.billingCycleConfiguration
                        conversionRate =
                            newFloatingScalableMatrixWithUnitPricingPrice.conversionRate
                        externalPriceId =
                            newFloatingScalableMatrixWithUnitPricingPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingScalableMatrixWithUnitPricingPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingScalableMatrixWithUnitPricingPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingScalableMatrixWithUnitPricingPrice
                                .invoicingCycleConfiguration
                        metadata = newFloatingScalableMatrixWithUnitPricingPrice.metadata
                        additionalProperties =
                            newFloatingScalableMatrixWithUnitPricingPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun scalableMatrixWithUnitPricingConfig(
                        scalableMatrixWithUnitPricingConfig: ScalableMatrixWithUnitPricingConfig
                    ) =
                        scalableMatrixWithUnitPricingConfig(
                            JsonField.of(scalableMatrixWithUnitPricingConfig)
                        )

                    /**
                     * Sets [Builder.scalableMatrixWithUnitPricingConfig] to an arbitrary JSON
                     * value.
                     *
                     * You should usually call [Builder.scalableMatrixWithUnitPricingConfig] with a
                     * well-typed [ScalableMatrixWithUnitPricingConfig] value instead. This method
                     * is primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun scalableMatrixWithUnitPricingConfig(
                        scalableMatrixWithUnitPricingConfig:
                            JsonField<ScalableMatrixWithUnitPricingConfig>
                    ) = apply {
                        this.scalableMatrixWithUnitPricingConfig =
                            scalableMatrixWithUnitPricingConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingScalableMatrixWithUnitPricingPrice =
                        NewFloatingScalableMatrixWithUnitPricingPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired(
                                "scalableMatrixWithUnitPricingConfig",
                                scalableMatrixWithUnitPricingConfig,
                            ),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val SCALABLE_MATRIX_WITH_UNIT_PRICING =
                            of("scalable_matrix_with_unit_pricing")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        SCALABLE_MATRIX_WITH_UNIT_PRICING
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        SCALABLE_MATRIX_WITH_UNIT_PRICING,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            SCALABLE_MATRIX_WITH_UNIT_PRICING ->
                                Value.SCALABLE_MATRIX_WITH_UNIT_PRICING
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            SCALABLE_MATRIX_WITH_UNIT_PRICING ->
                                Known.SCALABLE_MATRIX_WITH_UNIT_PRICING
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ScalableMatrixWithUnitPricingConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): ScalableMatrixWithUnitPricingConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [ScalableMatrixWithUnitPricingConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [ScalableMatrixWithUnitPricingConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            scalableMatrixWithUnitPricingConfig: ScalableMatrixWithUnitPricingConfig
                        ) = apply {
                            additionalProperties =
                                scalableMatrixWithUnitPricingConfig.additionalProperties
                                    .toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ScalableMatrixWithUnitPricingConfig =
                            ScalableMatrixWithUnitPricingConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ScalableMatrixWithUnitPricingConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ScalableMatrixWithUnitPricingConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingScalableMatrixWithUnitPricingPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && scalableMatrixWithUnitPricingConfig == other.scalableMatrixWithUnitPricingConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, scalableMatrixWithUnitPricingConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingScalableMatrixWithUnitPricingPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, scalableMatrixWithUnitPricingConfig=$scalableMatrixWithUnitPricingConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingScalableMatrixWithTieredPricingPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("scalable_matrix_with_tiered_pricing_config")
                @ExcludeMissing
                private val scalableMatrixWithTieredPricingConfig:
                    JsonField<ScalableMatrixWithTieredPricingConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun scalableMatrixWithTieredPricingConfig(): ScalableMatrixWithTieredPricingConfig =
                    scalableMatrixWithTieredPricingConfig.getRequired(
                        "scalable_matrix_with_tiered_pricing_config"
                    )

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [scalableMatrixWithTieredPricingConfig].
                 *
                 * Unlike [scalableMatrixWithTieredPricingConfig], this method doesn't throw if the
                 * JSON field has an unexpected type.
                 */
                @JsonProperty("scalable_matrix_with_tiered_pricing_config")
                @ExcludeMissing
                fun _scalableMatrixWithTieredPricingConfig():
                    JsonField<ScalableMatrixWithTieredPricingConfig> =
                    scalableMatrixWithTieredPricingConfig

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingScalableMatrixWithTieredPricingPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    scalableMatrixWithTieredPricingConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingScalableMatrixWithTieredPricingPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * .scalableMatrixWithTieredPricingConfig()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingScalableMatrixWithTieredPricingPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var scalableMatrixWithTieredPricingConfig:
                        JsonField<ScalableMatrixWithTieredPricingConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingScalableMatrixWithTieredPricingPrice:
                            NewFloatingScalableMatrixWithTieredPricingPrice
                    ) = apply {
                        cadence = newFloatingScalableMatrixWithTieredPricingPrice.cadence
                        currency = newFloatingScalableMatrixWithTieredPricingPrice.currency
                        itemId = newFloatingScalableMatrixWithTieredPricingPrice.itemId
                        modelType = newFloatingScalableMatrixWithTieredPricingPrice.modelType
                        name = newFloatingScalableMatrixWithTieredPricingPrice.name
                        scalableMatrixWithTieredPricingConfig =
                            newFloatingScalableMatrixWithTieredPricingPrice
                                .scalableMatrixWithTieredPricingConfig
                        billableMetricId =
                            newFloatingScalableMatrixWithTieredPricingPrice.billableMetricId
                        billedInAdvance =
                            newFloatingScalableMatrixWithTieredPricingPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingScalableMatrixWithTieredPricingPrice
                                .billingCycleConfiguration
                        conversionRate =
                            newFloatingScalableMatrixWithTieredPricingPrice.conversionRate
                        externalPriceId =
                            newFloatingScalableMatrixWithTieredPricingPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingScalableMatrixWithTieredPricingPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingScalableMatrixWithTieredPricingPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingScalableMatrixWithTieredPricingPrice
                                .invoicingCycleConfiguration
                        metadata = newFloatingScalableMatrixWithTieredPricingPrice.metadata
                        additionalProperties =
                            newFloatingScalableMatrixWithTieredPricingPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun scalableMatrixWithTieredPricingConfig(
                        scalableMatrixWithTieredPricingConfig: ScalableMatrixWithTieredPricingConfig
                    ) =
                        scalableMatrixWithTieredPricingConfig(
                            JsonField.of(scalableMatrixWithTieredPricingConfig)
                        )

                    /**
                     * Sets [Builder.scalableMatrixWithTieredPricingConfig] to an arbitrary JSON
                     * value.
                     *
                     * You should usually call [Builder.scalableMatrixWithTieredPricingConfig] with
                     * a well-typed [ScalableMatrixWithTieredPricingConfig] value instead. This
                     * method is primarily for setting the field to an undocumented or not yet
                     * supported value.
                     */
                    fun scalableMatrixWithTieredPricingConfig(
                        scalableMatrixWithTieredPricingConfig:
                            JsonField<ScalableMatrixWithTieredPricingConfig>
                    ) = apply {
                        this.scalableMatrixWithTieredPricingConfig =
                            scalableMatrixWithTieredPricingConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingScalableMatrixWithTieredPricingPrice =
                        NewFloatingScalableMatrixWithTieredPricingPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired(
                                "scalableMatrixWithTieredPricingConfig",
                                scalableMatrixWithTieredPricingConfig,
                            ),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val SCALABLE_MATRIX_WITH_TIERED_PRICING =
                            of("scalable_matrix_with_tiered_pricing")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        SCALABLE_MATRIX_WITH_TIERED_PRICING
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        SCALABLE_MATRIX_WITH_TIERED_PRICING,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            SCALABLE_MATRIX_WITH_TIERED_PRICING ->
                                Value.SCALABLE_MATRIX_WITH_TIERED_PRICING
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            SCALABLE_MATRIX_WITH_TIERED_PRICING ->
                                Known.SCALABLE_MATRIX_WITH_TIERED_PRICING
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ScalableMatrixWithTieredPricingConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): ScalableMatrixWithTieredPricingConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [ScalableMatrixWithTieredPricingConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [ScalableMatrixWithTieredPricingConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            scalableMatrixWithTieredPricingConfig:
                                ScalableMatrixWithTieredPricingConfig
                        ) = apply {
                            additionalProperties =
                                scalableMatrixWithTieredPricingConfig.additionalProperties
                                    .toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ScalableMatrixWithTieredPricingConfig =
                            ScalableMatrixWithTieredPricingConfig(
                                additionalProperties.toImmutable()
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ScalableMatrixWithTieredPricingConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ScalableMatrixWithTieredPricingConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingScalableMatrixWithTieredPricingPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && scalableMatrixWithTieredPricingConfig == other.scalableMatrixWithTieredPricingConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, scalableMatrixWithTieredPricingConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingScalableMatrixWithTieredPricingPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, scalableMatrixWithTieredPricingConfig=$scalableMatrixWithTieredPricingConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingCumulativeGroupedBulkPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("cumulative_grouped_bulk_config")
                @ExcludeMissing
                private val cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig> =
                    JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * The cadence to bill for this price on.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun cumulativeGroupedBulkConfig(): CumulativeGroupedBulkConfig =
                    cumulativeGroupedBulkConfig.getRequired("cumulative_grouped_bulk_config")

                /**
                 * An ISO 4217 currency string for which this price is billed in.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun currency(): String = currency.getRequired("currency")

                /**
                 * The id of the item the price will be associated with.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun modelType(): ModelType = modelType.getRequired("model_type")

                /**
                 * The name of the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /**
                 * The per unit conversion rate of the price currency to the invoicing currency.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An alias for the price.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /**
                 * The property used to group this price on an invoice
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * Returns the raw JSON value of [cadence].
                 *
                 * Unlike [cadence], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /**
                 * Returns the raw JSON value of [cumulativeGroupedBulkConfig].
                 *
                 * Unlike [cumulativeGroupedBulkConfig], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("cumulative_grouped_bulk_config")
                @ExcludeMissing
                fun _cumulativeGroupedBulkConfig(): JsonField<CumulativeGroupedBulkConfig> =
                    cumulativeGroupedBulkConfig

                /**
                 * Returns the raw JSON value of [currency].
                 *
                 * Unlike [currency], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [modelType].
                 *
                 * Unlike [modelType], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /**
                 * Returns the raw JSON value of [name].
                 *
                 * Unlike [name], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * Returns the raw JSON value of [billableMetricId].
                 *
                 * Unlike [billableMetricId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * Returns the raw JSON value of [billedInAdvance].
                 *
                 * Unlike [billedInAdvance], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * Returns the raw JSON value of [billingCycleConfiguration].
                 *
                 * Unlike [billingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /**
                 * Returns the raw JSON value of [conversionRate].
                 *
                 * Unlike [conversionRate], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * Returns the raw JSON value of [externalPriceId].
                 *
                 * Unlike [externalPriceId], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * Returns the raw JSON value of [fixedPriceQuantity].
                 *
                 * Unlike [fixedPriceQuantity], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /**
                 * Returns the raw JSON value of [invoiceGroupingKey].
                 *
                 * Unlike [invoiceGroupingKey], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Returns the raw JSON value of [invoicingCycleConfiguration].
                 *
                 * Unlike [invoicingCycleConfiguration], this method doesn't throw if the JSON field
                 * has an unexpected type.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * Returns the raw JSON value of [metadata].
                 *
                 * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingCumulativeGroupedBulkPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    cumulativeGroupedBulkConfig().validate()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewFloatingCumulativeGroupedBulkPrice].
                     *
                     * The following fields are required:
                     * ```java
                     * .cadence()
                     * .cumulativeGroupedBulkConfig()
                     * .currency()
                     * .itemId()
                     * .modelType()
                     * .name()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewFloatingCumulativeGroupedBulkPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var cumulativeGroupedBulkConfig:
                        JsonField<CumulativeGroupedBulkConfig>? =
                        null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingCumulativeGroupedBulkPrice: NewFloatingCumulativeGroupedBulkPrice
                    ) = apply {
                        cadence = newFloatingCumulativeGroupedBulkPrice.cadence
                        cumulativeGroupedBulkConfig =
                            newFloatingCumulativeGroupedBulkPrice.cumulativeGroupedBulkConfig
                        currency = newFloatingCumulativeGroupedBulkPrice.currency
                        itemId = newFloatingCumulativeGroupedBulkPrice.itemId
                        modelType = newFloatingCumulativeGroupedBulkPrice.modelType
                        name = newFloatingCumulativeGroupedBulkPrice.name
                        billableMetricId = newFloatingCumulativeGroupedBulkPrice.billableMetricId
                        billedInAdvance = newFloatingCumulativeGroupedBulkPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingCumulativeGroupedBulkPrice.billingCycleConfiguration
                        conversionRate = newFloatingCumulativeGroupedBulkPrice.conversionRate
                        externalPriceId = newFloatingCumulativeGroupedBulkPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingCumulativeGroupedBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingCumulativeGroupedBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingCumulativeGroupedBulkPrice.invoicingCycleConfiguration
                        metadata = newFloatingCumulativeGroupedBulkPrice.metadata
                        additionalProperties =
                            newFloatingCumulativeGroupedBulkPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /**
                     * Sets [Builder.cadence] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cadence] with a well-typed [Cadence] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    fun cumulativeGroupedBulkConfig(
                        cumulativeGroupedBulkConfig: CumulativeGroupedBulkConfig
                    ) = cumulativeGroupedBulkConfig(JsonField.of(cumulativeGroupedBulkConfig))

                    /**
                     * Sets [Builder.cumulativeGroupedBulkConfig] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.cumulativeGroupedBulkConfig] with a
                     * well-typed [CumulativeGroupedBulkConfig] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun cumulativeGroupedBulkConfig(
                        cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig>
                    ) = apply { this.cumulativeGroupedBulkConfig = cumulativeGroupedBulkConfig }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /**
                     * Sets [Builder.currency] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.currency] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the price will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    /**
                     * Sets [Builder.modelType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.modelType] with a well-typed [ModelType]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /**
                     * Sets [Builder.name] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.name] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * Alias for calling [Builder.billableMetricId] with
                     * `billableMetricId.orElse(null)`.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.getOrNull())

                    /**
                     * Sets [Builder.billableMetricId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billableMetricId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * Alias for [Builder.billedInAdvance].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * Alias for calling [Builder.billedInAdvance] with
                     * `billedInAdvance.orElse(null)`.
                     */
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.getOrNull())

                    /**
                     * Sets [Builder.billedInAdvance] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billedInAdvance] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * Alias for calling [Builder.billingCycleConfiguration] with
                     * `billingCycleConfiguration.orElse(null)`.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.billingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.billingCycleConfiguration] with a well-typed
                     * [BillingCycleConfiguration] value instead. This method is primarily for
                     * setting the field to an undocumented or not yet supported value.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * Alias for [Builder.conversionRate].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * Alias for calling [Builder.conversionRate] with
                     * `conversionRate.orElse(null)`.
                     */
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.getOrNull())

                    /**
                     * Sets [Builder.conversionRate] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.conversionRate] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /**
                     * Alias for calling [Builder.externalPriceId] with
                     * `externalPriceId.orElse(null)`.
                     */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.getOrNull())

                    /**
                     * Sets [Builder.externalPriceId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.externalPriceId] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * Alias for [Builder.fixedPriceQuantity].
                     *
                     * This unboxed primitive overload exists for backwards compatibility.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * Alias for calling [Builder.fixedPriceQuantity] with
                     * `fixedPriceQuantity.orElse(null)`.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                    /**
                     * Sets [Builder.fixedPriceQuantity] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.fixedPriceQuantity] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /**
                     * Alias for calling [Builder.invoiceGroupingKey] with
                     * `invoiceGroupingKey.orElse(null)`.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                    /**
                     * Sets [Builder.invoiceGroupingKey] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoiceGroupingKey] with a well-typed
                     * [String] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Alias for calling [Builder.invoicingCycleConfiguration] with
                     * `invoicingCycleConfiguration.orElse(null)`.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                    /**
                     * Sets [Builder.invoicingCycleConfiguration] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.invoicingCycleConfiguration] with a
                     * well-typed [InvoicingCycleConfiguration] value instead. This method is
                     * primarily for setting the field to an undocumented or not yet supported
                     * value.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                    /**
                     * Sets [Builder.metadata] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.metadata] with a well-typed [Metadata] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingCumulativeGroupedBulkPrice =
                        NewFloatingCumulativeGroupedBulkPrice(
                            checkRequired("cadence", cadence),
                            checkRequired(
                                "cumulativeGroupedBulkConfig",
                                cumulativeGroupedBulkConfig,
                            ),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class CumulativeGroupedBulkConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): CumulativeGroupedBulkConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [CumulativeGroupedBulkConfig].
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [CumulativeGroupedBulkConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            cumulativeGroupedBulkConfig: CumulativeGroupedBulkConfig
                        ) = apply {
                            additionalProperties =
                                cumulativeGroupedBulkConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): CumulativeGroupedBulkConfig =
                            CumulativeGroupedBulkConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is CumulativeGroupedBulkConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "CumulativeGroupedBulkConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val CUMULATIVE_GROUPED_BULK = of("cumulative_grouped_bulk")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        CUMULATIVE_GROUPED_BULK
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        CUMULATIVE_GROUPED_BULK,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            CUMULATIVE_GROUPED_BULK -> Value.CUMULATIVE_GROUPED_BULK
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            CUMULATIVE_GROUPED_BULK -> Known.CUMULATIVE_GROUPED_BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [BillingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * The duration of the billing period.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun duration(): Long = duration.getRequired("duration")

                    /**
                     * The unit of billing period duration.
                     *
                     * @throws OrbInvalidDataException if the JSON field has an unexpected type or
                     *   is unexpectedly missing or null (e.g. if the server responded with an
                     *   unexpected value).
                     */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /**
                     * Returns the raw JSON value of [duration].
                     *
                     * Unlike [duration], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /**
                     * Returns the raw JSON value of [durationUnit].
                     *
                     * Unlike [durationUnit], this method doesn't throw if the JSON field has an
                     * unexpected type.
                     */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of
                         * [InvoicingCycleConfiguration].
                         *
                         * The following fields are required:
                         * ```java
                         * .duration()
                         * .durationUnit()
                         * ```
                         */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /**
                         * Sets [Builder.duration] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.duration] with a well-typed [Long] value
                         * instead. This method is primarily for setting the field to an
                         * undocumented or not yet supported value.
                         */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /**
                         * Sets [Builder.durationUnit] to an arbitrary JSON value.
                         *
                         * You should usually call [Builder.durationUnit] with a well-typed
                         * [DurationUnit] value instead. This method is primarily for setting the
                         * field to an undocumented or not yet supported value.
                         */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        /**
                         * Returns this class instance's primitive wire representation.
                         *
                         * This differs from the [toString] method because that method is primarily
                         * for debugging and generally doesn't throw.
                         *
                         * @throws OrbInvalidDataException if this class instance's value does not
                         *   have the expected primitive type.
                         */
                        fun asString(): String =
                            _value().asString().orElseThrow {
                                OrbInvalidDataException("Value is not a String")
                            }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /** Returns a mutable builder for constructing an instance of [Metadata]. */
                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingCumulativeGroupedBulkPrice && cadence == other.cadence && cumulativeGroupedBulkConfig == other.cumulativeGroupedBulkConfig && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, cumulativeGroupedBulkConfig, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingCumulativeGroupedBulkPrice{cadence=$cadence, cumulativeGroupedBulkConfig=$cumulativeGroupedBulkConfig, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Add && startDate == other.startDate && allocationPrice == other.allocationPrice && discounts == other.discounts && endDate == other.endDate && externalPriceId == other.externalPriceId && filter == other.filter && fixedFeeQuantityTransitions == other.fixedFeeQuantityTransitions && maximumAmount == other.maximumAmount && minimumAmount == other.minimumAmount && price == other.price && priceId == other.priceId && usageCustomerIds == other.usageCustomerIds && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(startDate, allocationPrice, discounts, endDate, externalPriceId, filter, fixedFeeQuantityTransitions, maximumAmount, minimumAmount, price, priceId, usageCustomerIds, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Add{startDate=$startDate, allocationPrice=$allocationPrice, discounts=$discounts, endDate=$endDate, externalPriceId=$externalPriceId, filter=$filter, fixedFeeQuantityTransitions=$fixedFeeQuantityTransitions, maximumAmount=$maximumAmount, minimumAmount=$minimumAmount, price=$price, priceId=$priceId, usageCustomerIds=$usageCustomerIds, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class AddAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment")
        @ExcludeMissing
        private val adjustment: JsonField<Adjustment> = JsonMissing.of(),
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<StartDate> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<EndDate> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * The definition of a new adjustment to create and add to the subscription.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun adjustment(): Adjustment = adjustment.getRequired("adjustment")

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription. The adjustment will apply to invoice dates
         * that overlap with this `start_date`. This `start_date` is treated as inclusive for
         * in-advance prices, and exclusive for in-arrears prices.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun startDate(): StartDate = startDate.getRequired("start_date")

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription. The adjustment will apply to invoice dates that
         * overlap with this `end_date`.This `end_date` is treated as exclusive for in-advance
         * prices, and inclusive for in-arrears prices.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate.getNullable("end_date"))

        /**
         * Returns the raw JSON value of [adjustment].
         *
         * Unlike [adjustment], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("adjustment")
        @ExcludeMissing
        fun _adjustment(): JsonField<Adjustment> = adjustment

        /**
         * Returns the raw JSON value of [startDate].
         *
         * Unlike [startDate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<StartDate> = startDate

        /**
         * Returns the raw JSON value of [endDate].
         *
         * Unlike [endDate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("end_date") @ExcludeMissing fun _endDate(): JsonField<EndDate> = endDate

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): AddAdjustment = apply {
            if (validated) {
                return@apply
            }

            adjustment().validate()
            startDate().validate()
            endDate().ifPresent { it.validate() }
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [AddAdjustment].
             *
             * The following fields are required:
             * ```java
             * .adjustment()
             * .startDate()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [AddAdjustment]. */
        class Builder internal constructor() {

            private var adjustment: JsonField<Adjustment>? = null
            private var startDate: JsonField<StartDate>? = null
            private var endDate: JsonField<EndDate> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addAdjustment: AddAdjustment) = apply {
                adjustment = addAdjustment.adjustment
                startDate = addAdjustment.startDate
                endDate = addAdjustment.endDate
                additionalProperties = addAdjustment.additionalProperties.toMutableMap()
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: Adjustment) = adjustment(JsonField.of(adjustment))

            /**
             * Sets [Builder.adjustment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.adjustment] with a well-typed [Adjustment] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun adjustment(adjustment: JsonField<Adjustment>) = apply {
                this.adjustment = adjustment
            }

            /**
             * Alias for calling [adjustment] with
             * `Adjustment.ofNewPercentageDiscount(newPercentageDiscount)`.
             */
            fun adjustment(newPercentageDiscount: Adjustment.NewPercentageDiscount) =
                adjustment(Adjustment.ofNewPercentageDiscount(newPercentageDiscount))

            /**
             * Alias for calling [adjustment] with
             * `Adjustment.ofNewUsageDiscount(newUsageDiscount)`.
             */
            fun adjustment(newUsageDiscount: Adjustment.NewUsageDiscount) =
                adjustment(Adjustment.ofNewUsageDiscount(newUsageDiscount))

            /**
             * Alias for calling [adjustment] with
             * `Adjustment.ofNewAmountDiscount(newAmountDiscount)`.
             */
            fun adjustment(newAmountDiscount: Adjustment.NewAmountDiscount) =
                adjustment(Adjustment.ofNewAmountDiscount(newAmountDiscount))

            /** Alias for calling [adjustment] with `Adjustment.ofNewMinimum(newMinimum)`. */
            fun adjustment(newMinimum: Adjustment.NewMinimum) =
                adjustment(Adjustment.ofNewMinimum(newMinimum))

            /** Alias for calling [adjustment] with `Adjustment.ofNewMaximum(newMaximum)`. */
            fun adjustment(newMaximum: Adjustment.NewMaximum) =
                adjustment(Adjustment.ofNewMaximum(newMaximum))

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription. The adjustment will apply to invoice
             * dates that overlap with this `start_date`. This `start_date` is treated as inclusive
             * for in-advance prices, and exclusive for in-arrears prices.
             */
            fun startDate(startDate: StartDate) = startDate(JsonField.of(startDate))

            /**
             * Sets [Builder.startDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.startDate] with a well-typed [StartDate] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun startDate(startDate: JsonField<StartDate>) = apply { this.startDate = startDate }

            /** Alias for calling [startDate] with `StartDate.ofDateTime(dateTime)`. */
            fun startDate(dateTime: OffsetDateTime) = startDate(StartDate.ofDateTime(dateTime))

            /**
             * Alias for calling [startDate] with
             * `StartDate.ofBillingCycleRelative(billingCycleRelative)`.
             */
            fun startDate(billingCycleRelative: BillingCycleRelativeDate) =
                startDate(StartDate.ofBillingCycleRelative(billingCycleRelative))

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription. The adjustment will apply to invoice dates
             * that overlap with this `end_date`.This `end_date` is treated as exclusive for
             * in-advance prices, and inclusive for in-arrears prices.
             */
            fun endDate(endDate: EndDate?) = endDate(JsonField.ofNullable(endDate))

            /** Alias for calling [Builder.endDate] with `endDate.orElse(null)`. */
            fun endDate(endDate: Optional<EndDate>) = endDate(endDate.getOrNull())

            /**
             * Sets [Builder.endDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.endDate] with a well-typed [EndDate] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun endDate(endDate: JsonField<EndDate>) = apply { this.endDate = endDate }

            /** Alias for calling [endDate] with `EndDate.ofDateTime(dateTime)`. */
            fun endDate(dateTime: OffsetDateTime) = endDate(EndDate.ofDateTime(dateTime))

            /**
             * Alias for calling [endDate] with
             * `EndDate.ofBillingCycleRelative(billingCycleRelative)`.
             */
            fun endDate(billingCycleRelative: BillingCycleRelativeDate) =
                endDate(EndDate.ofBillingCycleRelative(billingCycleRelative))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): AddAdjustment =
                AddAdjustment(
                    checkRequired("adjustment", adjustment),
                    checkRequired("startDate", startDate),
                    endDate,
                    additionalProperties.toImmutable(),
                )
        }

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newUsageDiscount: NewUsageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newUsageDiscount(): Optional<NewUsageDiscount> =
                Optional.ofNullable(newUsageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewUsageDiscount(): Boolean = newUsageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewUsageDiscount(): NewUsageDiscount =
                newUsageDiscount.getOrThrow("newUsageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newUsageDiscount != null -> visitor.visitNewUsageDiscount(newUsageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Adjustment = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitNewPercentageDiscount(
                            newPercentageDiscount: NewPercentageDiscount
                        ) {
                            newPercentageDiscount.validate()
                        }

                        override fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount) {
                            newUsageDiscount.validate()
                        }

                        override fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount) {
                            newAmountDiscount.validate()
                        }

                        override fun visitNewMinimum(newMinimum: NewMinimum) {
                            newMinimum.validate()
                        }

                        override fun visitNewMaximum(newMaximum: NewMaximum) {
                            newMaximum.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && newPercentageDiscount == other.newPercentageDiscount && newUsageDiscount == other.newUsageDiscount && newAmountDiscount == other.newAmountDiscount && newMinimum == other.newMinimum && newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newPercentageDiscount, newUsageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */

            override fun toString(): String =
                when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newUsageDiscount != null -> "Adjustment{newUsageDiscount=$newUsageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewUsageDiscount(newUsageDiscount: NewUsageDiscount) =
                    Adjustment(newUsageDiscount = newUsageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            /**
             * An interface that defines how to map each variant of [Adjustment] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                /**
                 * Maps an unknown variant of [Adjustment] to a value of type [T].
                 *
                 * An instance of [Adjustment] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newPercentageDiscount = it, _json = json)
                                }
                        }
                        "usage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewUsageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newUsageDiscount = it, _json = json)
                                }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newAmountDiscount = it, _json = json)
                                }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMinimum = it, _json = json)
                                }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMaximum = it, _json = json)
                                }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newUsageDiscount != null ->
                            generator.writeObject(value.newUsageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @NoAutoDetect
            class NewPercentageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                private val percentageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /**
                 * The set of price IDs to which this adjustment applies.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun percentageDiscount(): Double =
                    percentageDiscount.getRequired("percentage_discount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                /**
                 * Returns the raw JSON value of [adjustmentType].
                 *
                 * Unlike [adjustmentType], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /**
                 * Returns the raw JSON value of [appliesToPriceIds].
                 *
                 * Unlike [appliesToPriceIds], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /**
                 * Returns the raw JSON value of [percentageDiscount].
                 *
                 * Unlike [percentageDiscount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                fun _percentageDiscount(): JsonField<Double> = percentageDiscount

                /**
                 * Returns the raw JSON value of [isInvoiceLevel].
                 *
                 * Unlike [isInvoiceLevel], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewPercentageDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    percentageDiscount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewPercentageDiscount].
                     *
                     * The following fields are required:
                     * ```java
                     * .adjustmentType()
                     * .appliesToPriceIds()
                     * .percentageDiscount()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewPercentageDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var percentageDiscount: JsonField<Double>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        adjustmentType = newPercentageDiscount.adjustmentType
                        appliesToPriceIds =
                            newPercentageDiscount.appliesToPriceIds.map { it.toMutableList() }
                        percentageDiscount = newPercentageDiscount.percentageDiscount
                        isInvoiceLevel = newPercentageDiscount.isInvoiceLevel
                        additionalProperties =
                            newPercentageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    /**
                     * Sets [Builder.adjustmentType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.adjustmentType] with a well-typed
                     * [AdjustmentType] value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /**
                     * Sets [Builder.appliesToPriceIds] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.appliesToPriceIds] with a well-typed
                     * `List<String>` value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [String] to [appliesToPriceIds].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).also {
                                checkKnown("appliesToPriceIds", it).add(appliesToPriceId)
                            }
                    }

                    fun percentageDiscount(percentageDiscount: Double) =
                        percentageDiscount(JsonField.of(percentageDiscount))

                    /**
                     * Sets [Builder.percentageDiscount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.percentageDiscount] with a well-typed
                     * [Double] value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * Sets [Builder.isInvoiceLevel] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.isInvoiceLevel] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("percentageDiscount", percentageDiscount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE_DISCOUNT = of("percentage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        PERCENTAGE_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && percentageDiscount == other.percentageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, percentageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewPercentageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, percentageDiscount=$percentageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewUsageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("usage_discount")
                @ExcludeMissing
                private val usageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /**
                 * The set of price IDs to which this adjustment applies.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun usageDiscount(): Double = usageDiscount.getRequired("usage_discount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                /**
                 * Returns the raw JSON value of [adjustmentType].
                 *
                 * Unlike [adjustmentType], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /**
                 * Returns the raw JSON value of [appliesToPriceIds].
                 *
                 * Unlike [appliesToPriceIds], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /**
                 * Returns the raw JSON value of [usageDiscount].
                 *
                 * Unlike [usageDiscount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("usage_discount")
                @ExcludeMissing
                fun _usageDiscount(): JsonField<Double> = usageDiscount

                /**
                 * Returns the raw JSON value of [isInvoiceLevel].
                 *
                 * Unlike [isInvoiceLevel], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewUsageDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    usageDiscount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [NewUsageDiscount].
                     *
                     * The following fields are required:
                     * ```java
                     * .adjustmentType()
                     * .appliesToPriceIds()
                     * .usageDiscount()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewUsageDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var usageDiscount: JsonField<Double>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newUsageDiscount: NewUsageDiscount) = apply {
                        adjustmentType = newUsageDiscount.adjustmentType
                        appliesToPriceIds =
                            newUsageDiscount.appliesToPriceIds.map { it.toMutableList() }
                        usageDiscount = newUsageDiscount.usageDiscount
                        isInvoiceLevel = newUsageDiscount.isInvoiceLevel
                        additionalProperties = newUsageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    /**
                     * Sets [Builder.adjustmentType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.adjustmentType] with a well-typed
                     * [AdjustmentType] value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /**
                     * Sets [Builder.appliesToPriceIds] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.appliesToPriceIds] with a well-typed
                     * `List<String>` value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [String] to [appliesToPriceIds].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).also {
                                checkKnown("appliesToPriceIds", it).add(appliesToPriceId)
                            }
                    }

                    fun usageDiscount(usageDiscount: Double) =
                        usageDiscount(JsonField.of(usageDiscount))

                    /**
                     * Sets [Builder.usageDiscount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.usageDiscount] with a well-typed [Double]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun usageDiscount(usageDiscount: JsonField<Double>) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * Sets [Builder.isInvoiceLevel] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.isInvoiceLevel] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewUsageDiscount =
                        NewUsageDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("usageDiscount", usageDiscount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE_DISCOUNT = of("usage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        USAGE_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        USAGE_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            USAGE_DISCOUNT -> Value.USAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            USAGE_DISCOUNT -> Known.USAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewUsageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && usageDiscount == other.usageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, usageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewUsageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, usageDiscount=$usageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewAmountDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("amount_discount")
                @ExcludeMissing
                private val amountDiscount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun amountDiscount(): String = amountDiscount.getRequired("amount_discount")

                /**
                 * The set of price IDs to which this adjustment applies.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                /**
                 * Returns the raw JSON value of [adjustmentType].
                 *
                 * Unlike [adjustmentType], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /**
                 * Returns the raw JSON value of [amountDiscount].
                 *
                 * Unlike [amountDiscount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("amount_discount")
                @ExcludeMissing
                fun _amountDiscount(): JsonField<String> = amountDiscount

                /**
                 * Returns the raw JSON value of [appliesToPriceIds].
                 *
                 * Unlike [appliesToPriceIds], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /**
                 * Returns the raw JSON value of [isInvoiceLevel].
                 *
                 * Unlike [isInvoiceLevel], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewAmountDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    amountDiscount()
                    appliesToPriceIds()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [NewAmountDiscount].
                     *
                     * The following fields are required:
                     * ```java
                     * .adjustmentType()
                     * .amountDiscount()
                     * .appliesToPriceIds()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewAmountDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var amountDiscount: JsonField<String>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        adjustmentType = newAmountDiscount.adjustmentType
                        amountDiscount = newAmountDiscount.amountDiscount
                        appliesToPriceIds =
                            newAmountDiscount.appliesToPriceIds.map { it.toMutableList() }
                        isInvoiceLevel = newAmountDiscount.isInvoiceLevel
                        additionalProperties = newAmountDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    /**
                     * Sets [Builder.adjustmentType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.adjustmentType] with a well-typed
                     * [AdjustmentType] value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) =
                        amountDiscount(JsonField.of(amountDiscount))

                    /**
                     * Sets [Builder.amountDiscount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.amountDiscount] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun amountDiscount(amountDiscount: JsonField<String>) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /**
                     * Sets [Builder.appliesToPriceIds] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.appliesToPriceIds] with a well-typed
                     * `List<String>` value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [String] to [appliesToPriceIds].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).also {
                                checkKnown("appliesToPriceIds", it).add(appliesToPriceId)
                            }
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * Sets [Builder.isInvoiceLevel] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.isInvoiceLevel] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("amountDiscount", amountDiscount),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT_DISCOUNT = of("amount_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        AMOUNT_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        AMOUNT_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && adjustmentType == other.adjustmentType && amountDiscount == other.amountDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, amountDiscount, appliesToPriceIds, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewAmountDiscount{adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMinimum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("minimum_amount")
                @ExcludeMissing
                private val minimumAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /**
                 * The set of price IDs to which this adjustment applies.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /**
                 * The item ID that revenue from this minimum will be attributed to.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun itemId(): String = itemId.getRequired("item_id")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                /**
                 * Returns the raw JSON value of [adjustmentType].
                 *
                 * Unlike [adjustmentType], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /**
                 * Returns the raw JSON value of [appliesToPriceIds].
                 *
                 * Unlike [appliesToPriceIds], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /**
                 * Returns the raw JSON value of [itemId].
                 *
                 * Unlike [itemId], this method doesn't throw if the JSON field has an unexpected
                 * type.
                 */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                /**
                 * Returns the raw JSON value of [minimumAmount].
                 *
                 * Unlike [minimumAmount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("minimum_amount")
                @ExcludeMissing
                fun _minimumAmount(): JsonField<String> = minimumAmount

                /**
                 * Returns the raw JSON value of [isInvoiceLevel].
                 *
                 * Unlike [isInvoiceLevel], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewMinimum = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    itemId()
                    minimumAmount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [NewMinimum].
                     *
                     * The following fields are required:
                     * ```java
                     * .adjustmentType()
                     * .appliesToPriceIds()
                     * .itemId()
                     * .minimumAmount()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewMinimum]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var itemId: JsonField<String>? = null
                    private var minimumAmount: JsonField<String>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        adjustmentType = newMinimum.adjustmentType
                        appliesToPriceIds = newMinimum.appliesToPriceIds.map { it.toMutableList() }
                        itemId = newMinimum.itemId
                        minimumAmount = newMinimum.minimumAmount
                        isInvoiceLevel = newMinimum.isInvoiceLevel
                        additionalProperties = newMinimum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    /**
                     * Sets [Builder.adjustmentType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.adjustmentType] with a well-typed
                     * [AdjustmentType] value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /**
                     * Sets [Builder.appliesToPriceIds] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.appliesToPriceIds] with a well-typed
                     * `List<String>` value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [String] to [appliesToPriceIds].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).also {
                                checkKnown("appliesToPriceIds", it).add(appliesToPriceId)
                            }
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /**
                     * Sets [Builder.itemId] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.itemId] with a well-typed [String] value
                     * instead. This method is primarily for setting the field to an undocumented or
                     * not yet supported value.
                     */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun minimumAmount(minimumAmount: String) =
                        minimumAmount(JsonField.of(minimumAmount))

                    /**
                     * Sets [Builder.minimumAmount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.minimumAmount] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * Sets [Builder.isInvoiceLevel] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.isInvoiceLevel] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMinimum =
                        NewMinimum(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("itemId", itemId),
                            checkRequired("minimumAmount", minimumAmount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MINIMUM = of("minimum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        MINIMUM
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MINIMUM,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && itemId == other.itemId && minimumAmount == other.minimumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, itemId, minimumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMinimum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, itemId=$itemId, minimumAmount=$minimumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMaximum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("maximum_amount")
                @ExcludeMissing
                private val maximumAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /**
                 * The set of price IDs to which this adjustment applies.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /**
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
                 *   unexpectedly missing or null (e.g. if the server responded with an unexpected
                 *   value).
                 */
                fun maximumAmount(): String = maximumAmount.getRequired("maximum_amount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 *
                 * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if
                 *   the server responded with an unexpected value).
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                /**
                 * Returns the raw JSON value of [adjustmentType].
                 *
                 * Unlike [adjustmentType], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /**
                 * Returns the raw JSON value of [appliesToPriceIds].
                 *
                 * Unlike [appliesToPriceIds], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /**
                 * Returns the raw JSON value of [maximumAmount].
                 *
                 * Unlike [maximumAmount], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("maximum_amount")
                @ExcludeMissing
                fun _maximumAmount(): JsonField<String> = maximumAmount

                /**
                 * Returns the raw JSON value of [isInvoiceLevel].
                 *
                 * Unlike [isInvoiceLevel], this method doesn't throw if the JSON field has an
                 * unexpected type.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewMaximum = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    maximumAmount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [NewMaximum].
                     *
                     * The following fields are required:
                     * ```java
                     * .adjustmentType()
                     * .appliesToPriceIds()
                     * .maximumAmount()
                     * ```
                     */
                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewMaximum]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var maximumAmount: JsonField<String>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        adjustmentType = newMaximum.adjustmentType
                        appliesToPriceIds = newMaximum.appliesToPriceIds.map { it.toMutableList() }
                        maximumAmount = newMaximum.maximumAmount
                        isInvoiceLevel = newMaximum.isInvoiceLevel
                        additionalProperties = newMaximum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    /**
                     * Sets [Builder.adjustmentType] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.adjustmentType] with a well-typed
                     * [AdjustmentType] value instead. This method is primarily for setting the
                     * field to an undocumented or not yet supported value.
                     */
                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /**
                     * Sets [Builder.appliesToPriceIds] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.appliesToPriceIds] with a well-typed
                     * `List<String>` value instead. This method is primarily for setting the field
                     * to an undocumented or not yet supported value.
                     */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /**
                     * Adds a single [String] to [appliesToPriceIds].
                     *
                     * @throws IllegalStateException if the field was previously set to a non-list.
                     */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).also {
                                checkKnown("appliesToPriceIds", it).add(appliesToPriceId)
                            }
                    }

                    fun maximumAmount(maximumAmount: String) =
                        maximumAmount(JsonField.of(maximumAmount))

                    /**
                     * Sets [Builder.maximumAmount] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.maximumAmount] with a well-typed [String]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * Sets [Builder.isInvoiceLevel] to an arbitrary JSON value.
                     *
                     * You should usually call [Builder.isInvoiceLevel] with a well-typed [Boolean]
                     * value instead. This method is primarily for setting the field to an
                     * undocumented or not yet supported value.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMaximum =
                        NewMaximum(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("maximumAmount", maximumAmount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAXIMUM = of("maximum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        MAXIMUM
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MAXIMUM,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have
                     *   the expected primitive type.
                     */
                    fun asString(): String =
                        _value().asString().orElseThrow {
                            OrbInvalidDataException("Value is not a String")
                        }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && maximumAmount == other.maximumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, maximumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMaximum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, maximumAmount=$maximumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }
        }

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription. The adjustment will apply to invoice dates
         * that overlap with this `start_date`. This `start_date` is treated as inclusive for
         * in-advance prices, and exclusive for in-arrears prices.
         */
        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelative: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelative(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelative)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelative(): Boolean = billingCycleRelative != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelative(): BillingCycleRelativeDate =
                billingCycleRelative.getOrThrow("billingCycleRelative")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelative != null ->
                        visitor.visitBillingCycleRelative(billingCycleRelative)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): StartDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelative(
                            billingCycleRelative: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelative == other.billingCycleRelative /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelative) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelative != null ->
                        "StartDate{billingCycleRelative=$billingCycleRelative}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelative = billingCycleRelative)
            }

            /**
             * An interface that defines how to map each variant of [StartDate] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate): T

                /**
                 * Maps an unknown variant of [StartDate] to a value of type [T].
                 *
                 * An instance of [StartDate] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelative = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelative != null ->
                            generator.writeObject(value.billingCycleRelative)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription. The adjustment will apply to invoice dates that
         * overlap with this `end_date`.This `end_date` is treated as exclusive for in-advance
         * prices, and inclusive for in-arrears prices.
         */
        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelative: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelative(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelative)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelative(): Boolean = billingCycleRelative != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelative(): BillingCycleRelativeDate =
                billingCycleRelative.getOrThrow("billingCycleRelative")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelative != null ->
                        visitor.visitBillingCycleRelative(billingCycleRelative)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): EndDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelative(
                            billingCycleRelative: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelative == other.billingCycleRelative /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelative) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelative != null ->
                        "EndDate{billingCycleRelative=$billingCycleRelative}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelative = billingCycleRelative)
            }

            /**
             * An interface that defines how to map each variant of [EndDate] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate): T

                /**
                 * Maps an unknown variant of [EndDate] to a value of type [T].
                 *
                 * An instance of [EndDate] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelative = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelative != null ->
                            generator.writeObject(value.billingCycleRelative)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddAdjustment && adjustment == other.adjustment && startDate == other.startDate && endDate == other.endDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustment, startDate, endDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AddAdjustment{adjustment=$adjustment, startDate=$startDate, endDate=$endDate, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class Edit
    @JsonCreator
    private constructor(
        @JsonProperty("price_interval_id")
        @ExcludeMissing
        private val priceIntervalId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("billing_cycle_day")
        @ExcludeMissing
        private val billingCycleDay: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<EndDate> = JsonMissing.of(),
        @JsonProperty("filter")
        @ExcludeMissing
        private val filter: JsonField<String> = JsonMissing.of(),
        @JsonProperty("fixed_fee_quantity_transitions")
        @ExcludeMissing
        private val fixedFeeQuantityTransitions: JsonField<List<FixedFeeQuantityTransition>> =
            JsonMissing.of(),
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<StartDate> = JsonMissing.of(),
        @JsonProperty("usage_customer_ids")
        @ExcludeMissing
        private val usageCustomerIds: JsonField<List<String>> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * The id of the price interval to edit.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun priceIntervalId(): String = priceIntervalId.getRequired("price_interval_id")

        /**
         * The updated billing cycle day for this price interval. If not specified, the billing
         * cycle day will not be updated. Note that overlapping price intervals must have the same
         * billing cycle day.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun billingCycleDay(): Optional<Long> =
            Optional.ofNullable(billingCycleDay.getNullable("billing_cycle_day"))

        /**
         * The updated end date of this price interval. If not specified, the start date will not be
         * updated.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate.getNullable("end_date"))

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun filter(): Optional<String> = Optional.ofNullable(filter.getNullable("filter"))

        /**
         * A list of fixed fee quantity transitions to use for this price interval. Note that this
         * list will overwrite all existing fixed fee quantity transitions on the price interval.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun fixedFeeQuantityTransitions(): Optional<List<FixedFeeQuantityTransition>> =
            Optional.ofNullable(
                fixedFeeQuantityTransitions.getNullable("fixed_fee_quantity_transitions")
            )

        /**
         * The updated start date of this price interval. If not specified, the start date will not
         * be updated.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun startDate(): Optional<StartDate> =
            Optional.ofNullable(startDate.getNullable("start_date"))

        /**
         * A list of customer IDs whose usage events will be aggregated and billed under this
         * subscription. By default, a subscription only considers usage events associated with its
         * attached customer's customer_id. When usage_customer_ids is provided, the subscription
         * includes usage events from the specified customers only. Provided usage_customer_ids must
         * be either the customer for this subscription itself, or any of that customer's children.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun usageCustomerIds(): Optional<List<String>> =
            Optional.ofNullable(usageCustomerIds.getNullable("usage_customer_ids"))

        /**
         * Returns the raw JSON value of [priceIntervalId].
         *
         * Unlike [priceIntervalId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("price_interval_id")
        @ExcludeMissing
        fun _priceIntervalId(): JsonField<String> = priceIntervalId

        /**
         * Returns the raw JSON value of [billingCycleDay].
         *
         * Unlike [billingCycleDay], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("billing_cycle_day")
        @ExcludeMissing
        fun _billingCycleDay(): JsonField<Long> = billingCycleDay

        /**
         * Returns the raw JSON value of [endDate].
         *
         * Unlike [endDate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("end_date") @ExcludeMissing fun _endDate(): JsonField<EndDate> = endDate

        /**
         * Returns the raw JSON value of [filter].
         *
         * Unlike [filter], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("filter") @ExcludeMissing fun _filter(): JsonField<String> = filter

        /**
         * Returns the raw JSON value of [fixedFeeQuantityTransitions].
         *
         * Unlike [fixedFeeQuantityTransitions], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("fixed_fee_quantity_transitions")
        @ExcludeMissing
        fun _fixedFeeQuantityTransitions(): JsonField<List<FixedFeeQuantityTransition>> =
            fixedFeeQuantityTransitions

        /**
         * Returns the raw JSON value of [startDate].
         *
         * Unlike [startDate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<StartDate> = startDate

        /**
         * Returns the raw JSON value of [usageCustomerIds].
         *
         * Unlike [usageCustomerIds], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("usage_customer_ids")
        @ExcludeMissing
        fun _usageCustomerIds(): JsonField<List<String>> = usageCustomerIds

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Edit = apply {
            if (validated) {
                return@apply
            }

            priceIntervalId()
            billingCycleDay()
            endDate().ifPresent { it.validate() }
            filter()
            fixedFeeQuantityTransitions().ifPresent { it.forEach { it.validate() } }
            startDate().ifPresent { it.validate() }
            usageCustomerIds()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Edit].
             *
             * The following fields are required:
             * ```java
             * .priceIntervalId()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Edit]. */
        class Builder internal constructor() {

            private var priceIntervalId: JsonField<String>? = null
            private var billingCycleDay: JsonField<Long> = JsonMissing.of()
            private var endDate: JsonField<EndDate> = JsonMissing.of()
            private var filter: JsonField<String> = JsonMissing.of()
            private var fixedFeeQuantityTransitions:
                JsonField<MutableList<FixedFeeQuantityTransition>>? =
                null
            private var startDate: JsonField<StartDate> = JsonMissing.of()
            private var usageCustomerIds: JsonField<MutableList<String>>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(edit: Edit) = apply {
                priceIntervalId = edit.priceIntervalId
                billingCycleDay = edit.billingCycleDay
                endDate = edit.endDate
                filter = edit.filter
                fixedFeeQuantityTransitions =
                    edit.fixedFeeQuantityTransitions.map { it.toMutableList() }
                startDate = edit.startDate
                usageCustomerIds = edit.usageCustomerIds.map { it.toMutableList() }
                additionalProperties = edit.additionalProperties.toMutableMap()
            }

            /** The id of the price interval to edit. */
            fun priceIntervalId(priceIntervalId: String) =
                priceIntervalId(JsonField.of(priceIntervalId))

            /**
             * Sets [Builder.priceIntervalId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.priceIntervalId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun priceIntervalId(priceIntervalId: JsonField<String>) = apply {
                this.priceIntervalId = priceIntervalId
            }

            /**
             * The updated billing cycle day for this price interval. If not specified, the billing
             * cycle day will not be updated. Note that overlapping price intervals must have the
             * same billing cycle day.
             */
            fun billingCycleDay(billingCycleDay: Long?) =
                billingCycleDay(JsonField.ofNullable(billingCycleDay))

            /**
             * Alias for [Builder.billingCycleDay].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun billingCycleDay(billingCycleDay: Long) = billingCycleDay(billingCycleDay as Long?)

            /** Alias for calling [Builder.billingCycleDay] with `billingCycleDay.orElse(null)`. */
            fun billingCycleDay(billingCycleDay: Optional<Long>) =
                billingCycleDay(billingCycleDay.getOrNull())

            /**
             * Sets [Builder.billingCycleDay] to an arbitrary JSON value.
             *
             * You should usually call [Builder.billingCycleDay] with a well-typed [Long] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun billingCycleDay(billingCycleDay: JsonField<Long>) = apply {
                this.billingCycleDay = billingCycleDay
            }

            /**
             * The updated end date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun endDate(endDate: EndDate?) = endDate(JsonField.ofNullable(endDate))

            /** Alias for calling [Builder.endDate] with `endDate.orElse(null)`. */
            fun endDate(endDate: Optional<EndDate>) = endDate(endDate.getOrNull())

            /**
             * Sets [Builder.endDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.endDate] with a well-typed [EndDate] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun endDate(endDate: JsonField<EndDate>) = apply { this.endDate = endDate }

            /** Alias for calling [endDate] with `EndDate.ofDateTime(dateTime)`. */
            fun endDate(dateTime: OffsetDateTime) = endDate(EndDate.ofDateTime(dateTime))

            /**
             * Alias for calling [endDate] with
             * `EndDate.ofBillingCycleRelative(billingCycleRelative)`.
             */
            fun endDate(billingCycleRelative: BillingCycleRelativeDate) =
                endDate(EndDate.ofBillingCycleRelative(billingCycleRelative))

            /**
             * An additional filter to apply to usage queries. This filter must be expressed as a
             * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
             * null, usage queries will not include any additional filter.
             */
            fun filter(filter: String?) = filter(JsonField.ofNullable(filter))

            /** Alias for calling [Builder.filter] with `filter.orElse(null)`. */
            fun filter(filter: Optional<String>) = filter(filter.getOrNull())

            /**
             * Sets [Builder.filter] to an arbitrary JSON value.
             *
             * You should usually call [Builder.filter] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun filter(filter: JsonField<String>) = apply { this.filter = filter }

            /**
             * A list of fixed fee quantity transitions to use for this price interval. Note that
             * this list will overwrite all existing fixed fee quantity transitions on the price
             * interval.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>?
            ) = fixedFeeQuantityTransitions(JsonField.ofNullable(fixedFeeQuantityTransitions))

            /**
             * Alias for calling [Builder.fixedFeeQuantityTransitions] with
             * `fixedFeeQuantityTransitions.orElse(null)`.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: Optional<List<FixedFeeQuantityTransition>>
            ) = fixedFeeQuantityTransitions(fixedFeeQuantityTransitions.getOrNull())

            /**
             * Sets [Builder.fixedFeeQuantityTransitions] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fixedFeeQuantityTransitions] with a well-typed
             * `List<FixedFeeQuantityTransition>` value instead. This method is primarily for
             * setting the field to an undocumented or not yet supported value.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: JsonField<List<FixedFeeQuantityTransition>>
            ) = apply {
                this.fixedFeeQuantityTransitions =
                    fixedFeeQuantityTransitions.map { it.toMutableList() }
            }

            /**
             * Adds a single [FixedFeeQuantityTransition] to [fixedFeeQuantityTransitions].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addFixedFeeQuantityTransition(
                fixedFeeQuantityTransition: FixedFeeQuantityTransition
            ) = apply {
                fixedFeeQuantityTransitions =
                    (fixedFeeQuantityTransitions ?: JsonField.of(mutableListOf())).also {
                        checkKnown("fixedFeeQuantityTransitions", it)
                            .add(fixedFeeQuantityTransition)
                    }
            }

            /**
             * The updated start date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun startDate(startDate: StartDate) = startDate(JsonField.of(startDate))

            /**
             * Sets [Builder.startDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.startDate] with a well-typed [StartDate] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun startDate(startDate: JsonField<StartDate>) = apply { this.startDate = startDate }

            /** Alias for calling [startDate] with `StartDate.ofDateTime(dateTime)`. */
            fun startDate(dateTime: OffsetDateTime) = startDate(StartDate.ofDateTime(dateTime))

            /**
             * Alias for calling [startDate] with
             * `StartDate.ofBillingCycleRelative(billingCycleRelative)`.
             */
            fun startDate(billingCycleRelative: BillingCycleRelativeDate) =
                startDate(StartDate.ofBillingCycleRelative(billingCycleRelative))

            /**
             * A list of customer IDs whose usage events will be aggregated and billed under this
             * subscription. By default, a subscription only considers usage events associated with
             * its attached customer's customer_id. When usage_customer_ids is provided, the
             * subscription includes usage events from the specified customers only. Provided
             * usage_customer_ids must be either the customer for this subscription itself, or any
             * of that customer's children.
             */
            fun usageCustomerIds(usageCustomerIds: List<String>?) =
                usageCustomerIds(JsonField.ofNullable(usageCustomerIds))

            /**
             * Alias for calling [Builder.usageCustomerIds] with `usageCustomerIds.orElse(null)`.
             */
            fun usageCustomerIds(usageCustomerIds: Optional<List<String>>) =
                usageCustomerIds(usageCustomerIds.getOrNull())

            /**
             * Sets [Builder.usageCustomerIds] to an arbitrary JSON value.
             *
             * You should usually call [Builder.usageCustomerIds] with a well-typed `List<String>`
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun usageCustomerIds(usageCustomerIds: JsonField<List<String>>) = apply {
                this.usageCustomerIds = usageCustomerIds.map { it.toMutableList() }
            }

            /**
             * Adds a single [String] to [usageCustomerIds].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addUsageCustomerId(usageCustomerId: String) = apply {
                usageCustomerIds =
                    (usageCustomerIds ?: JsonField.of(mutableListOf())).also {
                        checkKnown("usageCustomerIds", it).add(usageCustomerId)
                    }
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Edit =
                Edit(
                    checkRequired("priceIntervalId", priceIntervalId),
                    billingCycleDay,
                    endDate,
                    filter,
                    (fixedFeeQuantityTransitions ?: JsonMissing.of()).map { it.toImmutable() },
                    startDate,
                    (usageCustomerIds ?: JsonMissing.of()).map { it.toImmutable() },
                    additionalProperties.toImmutable(),
                )
        }

        /**
         * The updated end date of this price interval. If not specified, the start date will not be
         * updated.
         */
        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelative: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelative(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelative)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelative(): Boolean = billingCycleRelative != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelative(): BillingCycleRelativeDate =
                billingCycleRelative.getOrThrow("billingCycleRelative")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelative != null ->
                        visitor.visitBillingCycleRelative(billingCycleRelative)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): EndDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelative(
                            billingCycleRelative: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelative == other.billingCycleRelative /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelative) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelative != null ->
                        "EndDate{billingCycleRelative=$billingCycleRelative}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelative = billingCycleRelative)
            }

            /**
             * An interface that defines how to map each variant of [EndDate] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate): T

                /**
                 * Maps an unknown variant of [EndDate] to a value of type [T].
                 *
                 * An instance of [EndDate] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelative = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelative != null ->
                            generator.writeObject(value.billingCycleRelative)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        @NoAutoDetect
        class FixedFeeQuantityTransition
        @JsonCreator
        private constructor(
            @JsonProperty("effective_date")
            @ExcludeMissing
            private val effectiveDate: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("quantity")
            @ExcludeMissing
            private val quantity: JsonField<Long> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /**
             * The date that the fixed fee quantity transition should take effect.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun effectiveDate(): OffsetDateTime = effectiveDate.getRequired("effective_date")

            /**
             * The quantity of the fixed fee quantity transition.
             *
             * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
             *   unexpectedly missing or null (e.g. if the server responded with an unexpected
             *   value).
             */
            fun quantity(): Long = quantity.getRequired("quantity")

            /**
             * Returns the raw JSON value of [effectiveDate].
             *
             * Unlike [effectiveDate], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("effective_date")
            @ExcludeMissing
            fun _effectiveDate(): JsonField<OffsetDateTime> = effectiveDate

            /**
             * Returns the raw JSON value of [quantity].
             *
             * Unlike [quantity], this method doesn't throw if the JSON field has an unexpected
             * type.
             */
            @JsonProperty("quantity") @ExcludeMissing fun _quantity(): JsonField<Long> = quantity

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): FixedFeeQuantityTransition = apply {
                if (validated) {
                    return@apply
                }

                effectiveDate()
                quantity()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [FixedFeeQuantityTransition].
                 *
                 * The following fields are required:
                 * ```java
                 * .effectiveDate()
                 * .quantity()
                 * ```
                 */
                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [FixedFeeQuantityTransition]. */
            class Builder internal constructor() {

                private var effectiveDate: JsonField<OffsetDateTime>? = null
                private var quantity: JsonField<Long>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(fixedFeeQuantityTransition: FixedFeeQuantityTransition) = apply {
                    effectiveDate = fixedFeeQuantityTransition.effectiveDate
                    quantity = fixedFeeQuantityTransition.quantity
                    additionalProperties =
                        fixedFeeQuantityTransition.additionalProperties.toMutableMap()
                }

                /** The date that the fixed fee quantity transition should take effect. */
                fun effectiveDate(effectiveDate: OffsetDateTime) =
                    effectiveDate(JsonField.of(effectiveDate))

                /**
                 * Sets [Builder.effectiveDate] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.effectiveDate] with a well-typed
                 * [OffsetDateTime] value instead. This method is primarily for setting the field to
                 * an undocumented or not yet supported value.
                 */
                fun effectiveDate(effectiveDate: JsonField<OffsetDateTime>) = apply {
                    this.effectiveDate = effectiveDate
                }

                /** The quantity of the fixed fee quantity transition. */
                fun quantity(quantity: Long) = quantity(JsonField.of(quantity))

                /**
                 * Sets [Builder.quantity] to an arbitrary JSON value.
                 *
                 * You should usually call [Builder.quantity] with a well-typed [Long] value
                 * instead. This method is primarily for setting the field to an undocumented or not
                 * yet supported value.
                 */
                fun quantity(quantity: JsonField<Long>) = apply { this.quantity = quantity }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): FixedFeeQuantityTransition =
                    FixedFeeQuantityTransition(
                        checkRequired("effectiveDate", effectiveDate),
                        checkRequired("quantity", quantity),
                        additionalProperties.toImmutable(),
                    )
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is FixedFeeQuantityTransition && effectiveDate == other.effectiveDate && quantity == other.quantity && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(effectiveDate, quantity, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "FixedFeeQuantityTransition{effectiveDate=$effectiveDate, quantity=$quantity, additionalProperties=$additionalProperties}"
        }

        /**
         * The updated start date of this price interval. If not specified, the start date will not
         * be updated.
         */
        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelative: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelative(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelative)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelative(): Boolean = billingCycleRelative != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelative(): BillingCycleRelativeDate =
                billingCycleRelative.getOrThrow("billingCycleRelative")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelative != null ->
                        visitor.visitBillingCycleRelative(billingCycleRelative)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): StartDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelative(
                            billingCycleRelative: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelative == other.billingCycleRelative /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelative) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelative != null ->
                        "StartDate{billingCycleRelative=$billingCycleRelative}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelative = billingCycleRelative)
            }

            /**
             * An interface that defines how to map each variant of [StartDate] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate): T

                /**
                 * Maps an unknown variant of [StartDate] to a value of type [T].
                 *
                 * An instance of [StartDate] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelative = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelative != null ->
                            generator.writeObject(value.billingCycleRelative)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Edit && priceIntervalId == other.priceIntervalId && billingCycleDay == other.billingCycleDay && endDate == other.endDate && filter == other.filter && fixedFeeQuantityTransitions == other.fixedFeeQuantityTransitions && startDate == other.startDate && usageCustomerIds == other.usageCustomerIds && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(priceIntervalId, billingCycleDay, endDate, filter, fixedFeeQuantityTransitions, startDate, usageCustomerIds, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Edit{priceIntervalId=$priceIntervalId, billingCycleDay=$billingCycleDay, endDate=$endDate, filter=$filter, fixedFeeQuantityTransitions=$fixedFeeQuantityTransitions, startDate=$startDate, usageCustomerIds=$usageCustomerIds, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class EditAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment_interval_id")
        @ExcludeMissing
        private val adjustmentIntervalId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<EndDate> = JsonMissing.of(),
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<StartDate> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * The id of the adjustment interval to edit.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun adjustmentIntervalId(): String =
            adjustmentIntervalId.getRequired("adjustment_interval_id")

        /**
         * The updated end date of this adjustment interval. If not specified, the start date will
         * not be updated.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate.getNullable("end_date"))

        /**
         * The updated start date of this adjustment interval. If not specified, the start date will
         * not be updated.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun startDate(): Optional<StartDate> =
            Optional.ofNullable(startDate.getNullable("start_date"))

        /**
         * Returns the raw JSON value of [adjustmentIntervalId].
         *
         * Unlike [adjustmentIntervalId], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("adjustment_interval_id")
        @ExcludeMissing
        fun _adjustmentIntervalId(): JsonField<String> = adjustmentIntervalId

        /**
         * Returns the raw JSON value of [endDate].
         *
         * Unlike [endDate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("end_date") @ExcludeMissing fun _endDate(): JsonField<EndDate> = endDate

        /**
         * Returns the raw JSON value of [startDate].
         *
         * Unlike [startDate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<StartDate> = startDate

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): EditAdjustment = apply {
            if (validated) {
                return@apply
            }

            adjustmentIntervalId()
            endDate().ifPresent { it.validate() }
            startDate().ifPresent { it.validate() }
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [EditAdjustment].
             *
             * The following fields are required:
             * ```java
             * .adjustmentIntervalId()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [EditAdjustment]. */
        class Builder internal constructor() {

            private var adjustmentIntervalId: JsonField<String>? = null
            private var endDate: JsonField<EndDate> = JsonMissing.of()
            private var startDate: JsonField<StartDate> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(editAdjustment: EditAdjustment) = apply {
                adjustmentIntervalId = editAdjustment.adjustmentIntervalId
                endDate = editAdjustment.endDate
                startDate = editAdjustment.startDate
                additionalProperties = editAdjustment.additionalProperties.toMutableMap()
            }

            /** The id of the adjustment interval to edit. */
            fun adjustmentIntervalId(adjustmentIntervalId: String) =
                adjustmentIntervalId(JsonField.of(adjustmentIntervalId))

            /**
             * Sets [Builder.adjustmentIntervalId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.adjustmentIntervalId] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun adjustmentIntervalId(adjustmentIntervalId: JsonField<String>) = apply {
                this.adjustmentIntervalId = adjustmentIntervalId
            }

            /**
             * The updated end date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun endDate(endDate: EndDate?) = endDate(JsonField.ofNullable(endDate))

            /** Alias for calling [Builder.endDate] with `endDate.orElse(null)`. */
            fun endDate(endDate: Optional<EndDate>) = endDate(endDate.getOrNull())

            /**
             * Sets [Builder.endDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.endDate] with a well-typed [EndDate] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun endDate(endDate: JsonField<EndDate>) = apply { this.endDate = endDate }

            /** Alias for calling [endDate] with `EndDate.ofDateTime(dateTime)`. */
            fun endDate(dateTime: OffsetDateTime) = endDate(EndDate.ofDateTime(dateTime))

            /**
             * Alias for calling [endDate] with
             * `EndDate.ofBillingCycleRelative(billingCycleRelative)`.
             */
            fun endDate(billingCycleRelative: BillingCycleRelativeDate) =
                endDate(EndDate.ofBillingCycleRelative(billingCycleRelative))

            /**
             * The updated start date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun startDate(startDate: StartDate) = startDate(JsonField.of(startDate))

            /**
             * Sets [Builder.startDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.startDate] with a well-typed [StartDate] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun startDate(startDate: JsonField<StartDate>) = apply { this.startDate = startDate }

            /** Alias for calling [startDate] with `StartDate.ofDateTime(dateTime)`. */
            fun startDate(dateTime: OffsetDateTime) = startDate(StartDate.ofDateTime(dateTime))

            /**
             * Alias for calling [startDate] with
             * `StartDate.ofBillingCycleRelative(billingCycleRelative)`.
             */
            fun startDate(billingCycleRelative: BillingCycleRelativeDate) =
                startDate(StartDate.ofBillingCycleRelative(billingCycleRelative))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): EditAdjustment =
                EditAdjustment(
                    checkRequired("adjustmentIntervalId", adjustmentIntervalId),
                    endDate,
                    startDate,
                    additionalProperties.toImmutable(),
                )
        }

        /**
         * The updated end date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelative: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelative(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelative)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelative(): Boolean = billingCycleRelative != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelative(): BillingCycleRelativeDate =
                billingCycleRelative.getOrThrow("billingCycleRelative")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelative != null ->
                        visitor.visitBillingCycleRelative(billingCycleRelative)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): EndDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelative(
                            billingCycleRelative: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelative == other.billingCycleRelative /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelative) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelative != null ->
                        "EndDate{billingCycleRelative=$billingCycleRelative}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelative = billingCycleRelative)
            }

            /**
             * An interface that defines how to map each variant of [EndDate] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate): T

                /**
                 * Maps an unknown variant of [EndDate] to a value of type [T].
                 *
                 * An instance of [EndDate] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelative = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelative != null ->
                            generator.writeObject(value.billingCycleRelative)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        /**
         * The updated start date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelative: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelative(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelative)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelative(): Boolean = billingCycleRelative != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelative(): BillingCycleRelativeDate =
                billingCycleRelative.getOrThrow("billingCycleRelative")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelative != null ->
                        visitor.visitBillingCycleRelative(billingCycleRelative)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): StartDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelative(
                            billingCycleRelative: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelative == other.billingCycleRelative /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelative) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelative != null ->
                        "StartDate{billingCycleRelative=$billingCycleRelative}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelative = billingCycleRelative)
            }

            /**
             * An interface that defines how to map each variant of [StartDate] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelative(billingCycleRelative: BillingCycleRelativeDate): T

                /**
                 * Maps an unknown variant of [StartDate] to a value of type [T].
                 *
                 * An instance of [StartDate] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelative = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelative != null ->
                            generator.writeObject(value.billingCycleRelative)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is EditAdjustment && adjustmentIntervalId == other.adjustmentIntervalId && endDate == other.endDate && startDate == other.startDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustmentIntervalId, endDate, startDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "EditAdjustment{adjustmentIntervalId=$adjustmentIntervalId, endDate=$endDate, startDate=$startDate, additionalProperties=$additionalProperties}"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is SubscriptionPriceIntervalsParams && subscriptionId == other.subscriptionId && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(subscriptionId, body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() =
        "SubscriptionPriceIntervalsParams{subscriptionId=$subscriptionId, body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
