// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.checkRequired
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.immutableEmptyMap
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.time.OffsetDateTime
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * This endpoint is used to add and edit subscription
 * [price intervals](../reference/price-interval). By making modifications to a subscription’s price
 * intervals, you can
 * [flexibly and atomically control the billing behavior of a subscription](../guides/product-catalog/modifying-subscriptions).
 *
 * ## Adding price intervals
 *
 * Prices can be added as price intervals to a subscription by specifying them in the `add` array. A
 * `price_id` or `external_price_id` from an add-on price or previously removed plan price can be
 * specified to reuse an existing price definition (however, please note that prices from other
 * plans cannot be added to the subscription). Additionally, a new price can be specified using the
 * `price` field — this price will be created automatically.
 *
 * A `start_date` must be specified for the price interval. This is the date when the price will
 * start billing on the subscription, so this will notably result in an immediate charge at this
 * time for any billed in advance fixed fees. The `end_date` will default to null, resulting in a
 * price interval that will bill on a continually recurring basis. Both of these dates can be set in
 * the past or the future and Orb will generate or modify invoices to ensure the subscription’s
 * invoicing behavior is correct.
 *
 * Additionally, a discount, minimum, or maximum can be specified on the price interval. This will
 * only apply to this price interval, not any other price intervals on the subscription.
 *
 * ## Adjustment intervals
 *
 * An adjustment interval represents the time period that a particular adjustment (a discount,
 * minimum, or maximum) applies to the prices on a subscription. Adjustment intervals can be added
 * to a subscription by specifying them in the `add_adjustments` array, or modified via the
 * `edit_adjustments` array. When creating an adjustment interval, you'll need to provide the
 * definition of the new adjustment (the type of adjustment, and which prices it applies to), as
 * well as the start and end dates for the adjustment interval. The start and end dates of an
 * existing adjustment interval can be edited via the `edit_adjustments` field (just like price
 * intervals). (To "change" the amount of a discount, minimum, or maximum, then, you'll need to end
 * the existing interval, and create a new adjustment interval with the new amount and a start date
 * that matches the end date of the previous interval.)
 *
 * ## Editing price intervals
 *
 * Price intervals can be adjusted by specifying edits to make in the `edit` array. A
 * `price_interval_id` to edit must be specified — this can be retrieved from the `price_intervals`
 * field on the subscription.
 *
 * A new `start_date` or `end_date` can be specified to change the range of the price interval,
 * which will modify past or future invoices to ensure correctness. If either of these dates are
 * unspecified, they will default to the existing date on the price interval. To remove a price
 * interval entirely from a subscription, set the `end_date` to be equivalent to the `start_date`.
 *
 * ## Fixed fee quantity transitions
 *
 * The fixed fee quantity transitions for a fixed fee price interval can also be specified when
 * adding or editing by passing an array for `fixed_fee_quantity_transitions`. A fixed fee quantity
 * transition must have a `quantity` and an `effective_date`, which is the date after which the new
 * quantity will be used for billing. If a fixed fee quantity transition is scheduled at a billing
 * period boundary, the full quantity will be billed on an invoice with the other prices on the
 * subscription. If the fixed fee quantity transition is scheduled mid-billing period, the
 * difference between the existing quantity and quantity specified in the transition will be
 * prorated for the rest of the billing period and billed immediately, which will generate a new
 * invoice.
 *
 * Notably, the list of fixed fee quantity transitions passed will overwrite the existing fixed fee
 * quantity transitions on the price interval, so the entire list of transitions must be specified
 * to add additional transitions. The existing list of transitions can be retrieved using the
 * `fixed_fee_quantity_transitions` property on a subscription’s serialized price intervals.
 */
class SubscriptionPriceIntervalsParams
constructor(
    private val subscriptionId: String,
    private val body: SubscriptionPriceIntervalsBody,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) {

    fun subscriptionId(): String = subscriptionId

    /** A list of price intervals to add to the subscription. */
    fun add(): Optional<List<Add>> = body.add()

    /** A list of adjustments to add to the subscription. */
    fun addAdjustments(): Optional<List<AddAdjustment>> = body.addAdjustments()

    /** A list of price intervals to edit on the subscription. */
    fun edit(): Optional<List<Edit>> = body.edit()

    /** A list of adjustments to edit on the subscription. */
    fun editAdjustments(): Optional<List<EditAdjustment>> = body.editAdjustments()

    /** A list of price intervals to add to the subscription. */
    fun _add(): JsonField<List<Add>> = body._add()

    /** A list of adjustments to add to the subscription. */
    fun _addAdjustments(): JsonField<List<AddAdjustment>> = body._addAdjustments()

    /** A list of price intervals to edit on the subscription. */
    fun _edit(): JsonField<List<Edit>> = body._edit()

    /** A list of adjustments to edit on the subscription. */
    fun _editAdjustments(): JsonField<List<EditAdjustment>> = body._editAdjustments()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    @JvmSynthetic internal fun getBody(): SubscriptionPriceIntervalsBody = body

    @JvmSynthetic internal fun getHeaders(): Headers = additionalHeaders

    @JvmSynthetic internal fun getQueryParams(): QueryParams = additionalQueryParams

    fun getPathParam(index: Int): String {
        return when (index) {
            0 -> subscriptionId
            else -> ""
        }
    }

    @NoAutoDetect
    class SubscriptionPriceIntervalsBody
    @JsonCreator
    internal constructor(
        @JsonProperty("add")
        @ExcludeMissing
        private val add: JsonField<List<Add>> = JsonMissing.of(),
        @JsonProperty("add_adjustments")
        @ExcludeMissing
        private val addAdjustments: JsonField<List<AddAdjustment>> = JsonMissing.of(),
        @JsonProperty("edit")
        @ExcludeMissing
        private val edit: JsonField<List<Edit>> = JsonMissing.of(),
        @JsonProperty("edit_adjustments")
        @ExcludeMissing
        private val editAdjustments: JsonField<List<EditAdjustment>> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** A list of price intervals to add to the subscription. */
        fun add(): Optional<List<Add>> = Optional.ofNullable(add.getNullable("add"))

        /** A list of adjustments to add to the subscription. */
        fun addAdjustments(): Optional<List<AddAdjustment>> =
            Optional.ofNullable(addAdjustments.getNullable("add_adjustments"))

        /** A list of price intervals to edit on the subscription. */
        fun edit(): Optional<List<Edit>> = Optional.ofNullable(edit.getNullable("edit"))

        /** A list of adjustments to edit on the subscription. */
        fun editAdjustments(): Optional<List<EditAdjustment>> =
            Optional.ofNullable(editAdjustments.getNullable("edit_adjustments"))

        /** A list of price intervals to add to the subscription. */
        @JsonProperty("add") @ExcludeMissing fun _add(): JsonField<List<Add>> = add

        /** A list of adjustments to add to the subscription. */
        @JsonProperty("add_adjustments")
        @ExcludeMissing
        fun _addAdjustments(): JsonField<List<AddAdjustment>> = addAdjustments

        /** A list of price intervals to edit on the subscription. */
        @JsonProperty("edit") @ExcludeMissing fun _edit(): JsonField<List<Edit>> = edit

        /** A list of adjustments to edit on the subscription. */
        @JsonProperty("edit_adjustments")
        @ExcludeMissing
        fun _editAdjustments(): JsonField<List<EditAdjustment>> = editAdjustments

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): SubscriptionPriceIntervalsBody = apply {
            if (validated) {
                return@apply
            }

            add().ifPresent { it.forEach { it.validate() } }
            addAdjustments().ifPresent { it.forEach { it.validate() } }
            edit().ifPresent { it.forEach { it.validate() } }
            editAdjustments().ifPresent { it.forEach { it.validate() } }
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var add: JsonField<MutableList<Add>>? = null
            private var addAdjustments: JsonField<MutableList<AddAdjustment>>? = null
            private var edit: JsonField<MutableList<Edit>>? = null
            private var editAdjustments: JsonField<MutableList<EditAdjustment>>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(subscriptionPriceIntervalsBody: SubscriptionPriceIntervalsBody) =
                apply {
                    add = subscriptionPriceIntervalsBody.add.map { it.toMutableList() }
                    addAdjustments =
                        subscriptionPriceIntervalsBody.addAdjustments.map { it.toMutableList() }
                    edit = subscriptionPriceIntervalsBody.edit.map { it.toMutableList() }
                    editAdjustments =
                        subscriptionPriceIntervalsBody.editAdjustments.map { it.toMutableList() }
                    additionalProperties =
                        subscriptionPriceIntervalsBody.additionalProperties.toMutableMap()
                }

            /** A list of price intervals to add to the subscription. */
            fun add(add: List<Add>) = add(JsonField.of(add))

            /** A list of price intervals to add to the subscription. */
            fun add(add: JsonField<List<Add>>) = apply { this.add = add.map { it.toMutableList() } }

            /** A list of price intervals to add to the subscription. */
            fun addAdd(add: Add) = apply {
                this.add =
                    (this.add ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(add)
                    }
            }

            /** A list of adjustments to add to the subscription. */
            fun addAdjustments(addAdjustments: List<AddAdjustment>) =
                addAdjustments(JsonField.of(addAdjustments))

            /** A list of adjustments to add to the subscription. */
            fun addAdjustments(addAdjustments: JsonField<List<AddAdjustment>>) = apply {
                this.addAdjustments = addAdjustments.map { it.toMutableList() }
            }

            /** A list of adjustments to add to the subscription. */
            fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
                addAdjustments =
                    (addAdjustments ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(addAdjustment)
                    }
            }

            /** A list of price intervals to edit on the subscription. */
            fun edit(edit: List<Edit>) = edit(JsonField.of(edit))

            /** A list of price intervals to edit on the subscription. */
            fun edit(edit: JsonField<List<Edit>>) = apply {
                this.edit = edit.map { it.toMutableList() }
            }

            /** A list of price intervals to edit on the subscription. */
            fun addEdit(edit: Edit) = apply {
                this.edit =
                    (this.edit ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(edit)
                    }
            }

            /** A list of adjustments to edit on the subscription. */
            fun editAdjustments(editAdjustments: List<EditAdjustment>) =
                editAdjustments(JsonField.of(editAdjustments))

            /** A list of adjustments to edit on the subscription. */
            fun editAdjustments(editAdjustments: JsonField<List<EditAdjustment>>) = apply {
                this.editAdjustments = editAdjustments.map { it.toMutableList() }
            }

            /** A list of adjustments to edit on the subscription. */
            fun addEditAdjustment(editAdjustment: EditAdjustment) = apply {
                editAdjustments =
                    (editAdjustments ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(editAdjustment)
                    }
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): SubscriptionPriceIntervalsBody =
                SubscriptionPriceIntervalsBody(
                    (add ?: JsonMissing.of()).map { it.toImmutable() },
                    (addAdjustments ?: JsonMissing.of()).map { it.toImmutable() },
                    (edit ?: JsonMissing.of()).map { it.toImmutable() },
                    (editAdjustments ?: JsonMissing.of()).map { it.toImmutable() },
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is SubscriptionPriceIntervalsBody && add == other.add && addAdjustments == other.addAdjustments && edit == other.edit && editAdjustments == other.editAdjustments && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(add, addAdjustments, edit, editAdjustments, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "SubscriptionPriceIntervalsBody{add=$add, addAdjustments=$addAdjustments, edit=$edit, editAdjustments=$editAdjustments, additionalProperties=$additionalProperties}"
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    @NoAutoDetect
    class Builder {

        private var subscriptionId: String? = null
        private var body: SubscriptionPriceIntervalsBody.Builder =
            SubscriptionPriceIntervalsBody.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(subscriptionPriceIntervalsParams: SubscriptionPriceIntervalsParams) =
            apply {
                subscriptionId = subscriptionPriceIntervalsParams.subscriptionId
                body = subscriptionPriceIntervalsParams.body.toBuilder()
                additionalHeaders = subscriptionPriceIntervalsParams.additionalHeaders.toBuilder()
                additionalQueryParams =
                    subscriptionPriceIntervalsParams.additionalQueryParams.toBuilder()
            }

        fun subscriptionId(subscriptionId: String) = apply { this.subscriptionId = subscriptionId }

        /** A list of price intervals to add to the subscription. */
        fun add(add: List<Add>) = apply { body.add(add) }

        /** A list of price intervals to add to the subscription. */
        fun add(add: JsonField<List<Add>>) = apply { body.add(add) }

        /** A list of price intervals to add to the subscription. */
        fun addAdd(add: Add) = apply { body.addAdd(add) }

        /** A list of adjustments to add to the subscription. */
        fun addAdjustments(addAdjustments: List<AddAdjustment>) = apply {
            body.addAdjustments(addAdjustments)
        }

        /** A list of adjustments to add to the subscription. */
        fun addAdjustments(addAdjustments: JsonField<List<AddAdjustment>>) = apply {
            body.addAdjustments(addAdjustments)
        }

        /** A list of adjustments to add to the subscription. */
        fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
            body.addAddAdjustment(addAdjustment)
        }

        /** A list of price intervals to edit on the subscription. */
        fun edit(edit: List<Edit>) = apply { body.edit(edit) }

        /** A list of price intervals to edit on the subscription. */
        fun edit(edit: JsonField<List<Edit>>) = apply { body.edit(edit) }

        /** A list of price intervals to edit on the subscription. */
        fun addEdit(edit: Edit) = apply { body.addEdit(edit) }

        /** A list of adjustments to edit on the subscription. */
        fun editAdjustments(editAdjustments: List<EditAdjustment>) = apply {
            body.editAdjustments(editAdjustments)
        }

        /** A list of adjustments to edit on the subscription. */
        fun editAdjustments(editAdjustments: JsonField<List<EditAdjustment>>) = apply {
            body.editAdjustments(editAdjustments)
        }

        /** A list of adjustments to edit on the subscription. */
        fun addEditAdjustment(editAdjustment: EditAdjustment) = apply {
            body.addEditAdjustment(editAdjustment)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        fun build(): SubscriptionPriceIntervalsParams =
            SubscriptionPriceIntervalsParams(
                checkRequired("subscriptionId", subscriptionId),
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    @NoAutoDetect
    class Add
    @JsonCreator
    private constructor(
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<StartDate> = JsonMissing.of(),
        @JsonProperty("allocation_price")
        @ExcludeMissing
        private val allocationPrice: JsonField<AllocationPrice> = JsonMissing.of(),
        @JsonProperty("discounts")
        @ExcludeMissing
        private val discounts: JsonField<List<Discount>> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<EndDate> = JsonMissing.of(),
        @JsonProperty("external_price_id")
        @ExcludeMissing
        private val externalPriceId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("fixed_fee_quantity_transitions")
        @ExcludeMissing
        private val fixedFeeQuantityTransitions: JsonField<List<FixedFeeQuantityTransition>> =
            JsonMissing.of(),
        @JsonProperty("maximum_amount")
        @ExcludeMissing
        private val maximumAmount: JsonField<Double> = JsonMissing.of(),
        @JsonProperty("minimum_amount")
        @ExcludeMissing
        private val minimumAmount: JsonField<Double> = JsonMissing.of(),
        @JsonProperty("price")
        @ExcludeMissing
        private val price: JsonField<Price> = JsonMissing.of(),
        @JsonProperty("price_id")
        @ExcludeMissing
        private val priceId: JsonField<String> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription.
         */
        fun startDate(): StartDate = startDate.getRequired("start_date")

        /** The definition of a new allocation price to create and add to the subscription. */
        fun allocationPrice(): Optional<AllocationPrice> =
            Optional.ofNullable(allocationPrice.getNullable("allocation_price"))

        /** A list of discounts to initialize on the price interval. */
        fun discounts(): Optional<List<Discount>> =
            Optional.ofNullable(discounts.getNullable("discounts"))

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription.
         */
        fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate.getNullable("end_date"))

        /** The external price id of the price to add to the subscription. */
        fun externalPriceId(): Optional<String> =
            Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

        /** A list of fixed fee quantity transitions to initialize on the price interval. */
        fun fixedFeeQuantityTransitions(): Optional<List<FixedFeeQuantityTransition>> =
            Optional.ofNullable(
                fixedFeeQuantityTransitions.getNullable("fixed_fee_quantity_transitions")
            )

        /**
         * The maximum amount that will be billed for this price interval for a given billing
         * period.
         */
        fun maximumAmount(): Optional<Double> =
            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

        /**
         * The minimum amount that will be billed for this price interval for a given billing
         * period.
         */
        fun minimumAmount(): Optional<Double> =
            Optional.ofNullable(minimumAmount.getNullable("minimum_amount"))

        /** The definition of a new price to create and add to the subscription. */
        fun price(): Optional<Price> = Optional.ofNullable(price.getNullable("price"))

        /** The id of the price to add to the subscription. */
        fun priceId(): Optional<String> = Optional.ofNullable(priceId.getNullable("price_id"))

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<StartDate> = startDate

        /** The definition of a new allocation price to create and add to the subscription. */
        @JsonProperty("allocation_price")
        @ExcludeMissing
        fun _allocationPrice(): JsonField<AllocationPrice> = allocationPrice

        /** A list of discounts to initialize on the price interval. */
        @JsonProperty("discounts")
        @ExcludeMissing
        fun _discounts(): JsonField<List<Discount>> = discounts

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription.
         */
        @JsonProperty("end_date") @ExcludeMissing fun _endDate(): JsonField<EndDate> = endDate

        /** The external price id of the price to add to the subscription. */
        @JsonProperty("external_price_id")
        @ExcludeMissing
        fun _externalPriceId(): JsonField<String> = externalPriceId

        /** A list of fixed fee quantity transitions to initialize on the price interval. */
        @JsonProperty("fixed_fee_quantity_transitions")
        @ExcludeMissing
        fun _fixedFeeQuantityTransitions(): JsonField<List<FixedFeeQuantityTransition>> =
            fixedFeeQuantityTransitions

        /**
         * The maximum amount that will be billed for this price interval for a given billing
         * period.
         */
        @JsonProperty("maximum_amount")
        @ExcludeMissing
        fun _maximumAmount(): JsonField<Double> = maximumAmount

        /**
         * The minimum amount that will be billed for this price interval for a given billing
         * period.
         */
        @JsonProperty("minimum_amount")
        @ExcludeMissing
        fun _minimumAmount(): JsonField<Double> = minimumAmount

        /** The definition of a new price to create and add to the subscription. */
        @JsonProperty("price") @ExcludeMissing fun _price(): JsonField<Price> = price

        /** The id of the price to add to the subscription. */
        @JsonProperty("price_id") @ExcludeMissing fun _priceId(): JsonField<String> = priceId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Add = apply {
            if (validated) {
                return@apply
            }

            startDate().validate()
            allocationPrice().ifPresent { it.validate() }
            discounts().ifPresent { it.forEach { it.validate() } }
            endDate().ifPresent { it.validate() }
            externalPriceId()
            fixedFeeQuantityTransitions().ifPresent { it.forEach { it.validate() } }
            maximumAmount()
            minimumAmount()
            price().ifPresent { it.validate() }
            priceId()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var startDate: JsonField<StartDate>? = null
            private var allocationPrice: JsonField<AllocationPrice> = JsonMissing.of()
            private var discounts: JsonField<MutableList<Discount>>? = null
            private var endDate: JsonField<EndDate> = JsonMissing.of()
            private var externalPriceId: JsonField<String> = JsonMissing.of()
            private var fixedFeeQuantityTransitions:
                JsonField<MutableList<FixedFeeQuantityTransition>>? =
                null
            private var maximumAmount: JsonField<Double> = JsonMissing.of()
            private var minimumAmount: JsonField<Double> = JsonMissing.of()
            private var price: JsonField<Price> = JsonMissing.of()
            private var priceId: JsonField<String> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(add: Add) = apply {
                startDate = add.startDate
                allocationPrice = add.allocationPrice
                discounts = add.discounts.map { it.toMutableList() }
                endDate = add.endDate
                externalPriceId = add.externalPriceId
                fixedFeeQuantityTransitions =
                    add.fixedFeeQuantityTransitions.map { it.toMutableList() }
                maximumAmount = add.maximumAmount
                minimumAmount = add.minimumAmount
                price = add.price
                priceId = add.priceId
                additionalProperties = add.additionalProperties.toMutableMap()
            }

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription.
             */
            fun startDate(startDate: StartDate) = startDate(JsonField.of(startDate))

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription.
             */
            fun startDate(startDate: JsonField<StartDate>) = apply { this.startDate = startDate }

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription.
             */
            fun startDate(dateTime: OffsetDateTime) = startDate(StartDate.ofDateTime(dateTime))

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription.
             */
            fun startDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                startDate(StartDate.ofBillingCycleRelativeDate(billingCycleRelativeDate))

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: AllocationPrice?) =
                allocationPrice(JsonField.ofNullable(allocationPrice))

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: Optional<AllocationPrice>) =
                allocationPrice(allocationPrice.orElse(null))

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: JsonField<AllocationPrice>) = apply {
                this.allocationPrice = allocationPrice
            }

            /** A list of discounts to initialize on the price interval. */
            fun discounts(discounts: List<Discount>?) = discounts(JsonField.ofNullable(discounts))

            /** A list of discounts to initialize on the price interval. */
            fun discounts(discounts: Optional<List<Discount>>) = discounts(discounts.orElse(null))

            /** A list of discounts to initialize on the price interval. */
            fun discounts(discounts: JsonField<List<Discount>>) = apply {
                this.discounts = discounts.map { it.toMutableList() }
            }

            /** A list of discounts to initialize on the price interval. */
            fun addDiscount(discount: Discount) = apply {
                discounts =
                    (discounts ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(discount)
                    }
            }

            /** A list of discounts to initialize on the price interval. */
            fun addDiscount(amountDiscountCreationParams: Discount.AmountDiscountCreationParams) =
                addDiscount(Discount.ofAmountDiscountCreationParams(amountDiscountCreationParams))

            /** A list of discounts to initialize on the price interval. */
            fun addDiscount(
                percentageDiscountCreationParams: Discount.PercentageDiscountCreationParams
            ) =
                addDiscount(
                    Discount.ofPercentageDiscountCreationParams(percentageDiscountCreationParams)
                )

            /** A list of discounts to initialize on the price interval. */
            fun addDiscount(usageDiscountCreationParams: Discount.UsageDiscountCreationParams) =
                addDiscount(Discount.ofUsageDiscountCreationParams(usageDiscountCreationParams))

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription.
             */
            fun endDate(endDate: EndDate?) = endDate(JsonField.ofNullable(endDate))

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription.
             */
            fun endDate(endDate: Optional<EndDate>) = endDate(endDate.orElse(null))

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription.
             */
            fun endDate(endDate: JsonField<EndDate>) = apply { this.endDate = endDate }

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription.
             */
            fun endDate(dateTime: OffsetDateTime) = endDate(EndDate.ofDateTime(dateTime))

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription.
             */
            fun endDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                endDate(EndDate.ofBillingCycleRelativeDate(billingCycleRelativeDate))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: String?) =
                externalPriceId(JsonField.ofNullable(externalPriceId))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: Optional<String>) =
                externalPriceId(externalPriceId.orElse(null))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                this.externalPriceId = externalPriceId
            }

            /** A list of fixed fee quantity transitions to initialize on the price interval. */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>?
            ) = fixedFeeQuantityTransitions(JsonField.ofNullable(fixedFeeQuantityTransitions))

            /** A list of fixed fee quantity transitions to initialize on the price interval. */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: Optional<List<FixedFeeQuantityTransition>>
            ) = fixedFeeQuantityTransitions(fixedFeeQuantityTransitions.orElse(null))

            /** A list of fixed fee quantity transitions to initialize on the price interval. */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: JsonField<List<FixedFeeQuantityTransition>>
            ) = apply {
                this.fixedFeeQuantityTransitions =
                    fixedFeeQuantityTransitions.map { it.toMutableList() }
            }

            /** A list of fixed fee quantity transitions to initialize on the price interval. */
            fun addFixedFeeQuantityTransition(
                fixedFeeQuantityTransition: FixedFeeQuantityTransition
            ) = apply {
                fixedFeeQuantityTransitions =
                    (fixedFeeQuantityTransitions ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(fixedFeeQuantityTransition)
                    }
            }

            /**
             * The maximum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun maximumAmount(maximumAmount: Double?) =
                maximumAmount(JsonField.ofNullable(maximumAmount))

            /**
             * The maximum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun maximumAmount(maximumAmount: Double) = maximumAmount(maximumAmount as Double?)

            /**
             * The maximum amount that will be billed for this price interval for a given billing
             * period.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun maximumAmount(maximumAmount: Optional<Double>) =
                maximumAmount(maximumAmount.orElse(null) as Double?)

            /**
             * The maximum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun maximumAmount(maximumAmount: JsonField<Double>) = apply {
                this.maximumAmount = maximumAmount
            }

            /**
             * The minimum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun minimumAmount(minimumAmount: Double?) =
                minimumAmount(JsonField.ofNullable(minimumAmount))

            /**
             * The minimum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun minimumAmount(minimumAmount: Double) = minimumAmount(minimumAmount as Double?)

            /**
             * The minimum amount that will be billed for this price interval for a given billing
             * period.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun minimumAmount(minimumAmount: Optional<Double>) =
                minimumAmount(minimumAmount.orElse(null) as Double?)

            /**
             * The minimum amount that will be billed for this price interval for a given billing
             * period.
             */
            fun minimumAmount(minimumAmount: JsonField<Double>) = apply {
                this.minimumAmount = minimumAmount
            }

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Price?) = price(JsonField.ofNullable(price))

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Optional<Price>) = price(price.orElse(null))

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: JsonField<Price>) = apply { this.price = price }

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingUnitPrice: Price.NewFloatingUnitPrice) =
                price(Price.ofNewFloatingUnitPrice(newFloatingUnitPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingPackagePrice: Price.NewFloatingPackagePrice) =
                price(Price.ofNewFloatingPackagePrice(newFloatingPackagePrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingMatrixPrice: Price.NewFloatingMatrixPrice) =
                price(Price.ofNewFloatingMatrixPrice(newFloatingMatrixPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingMatrixWithAllocationPrice: Price.NewFloatingMatrixWithAllocationPrice
            ) =
                price(
                    Price.ofNewFloatingMatrixWithAllocationPrice(
                        newFloatingMatrixWithAllocationPrice
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingTieredPrice: Price.NewFloatingTieredPrice) =
                price(Price.ofNewFloatingTieredPrice(newFloatingTieredPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingTieredBpsPrice: Price.NewFloatingTieredBpsPrice) =
                price(Price.ofNewFloatingTieredBpsPrice(newFloatingTieredBpsPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingBpsPrice: Price.NewFloatingBpsPrice) =
                price(Price.ofNewFloatingBpsPrice(newFloatingBpsPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingBulkBpsPrice: Price.NewFloatingBulkBpsPrice) =
                price(Price.ofNewFloatingBulkBpsPrice(newFloatingBulkBpsPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingBulkPrice: Price.NewFloatingBulkPrice) =
                price(Price.ofNewFloatingBulkPrice(newFloatingBulkPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingThresholdTotalAmountPrice: Price.NewFloatingThresholdTotalAmountPrice
            ) =
                price(
                    Price.ofNewFloatingThresholdTotalAmountPrice(
                        newFloatingThresholdTotalAmountPrice
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingTieredPackagePrice: Price.NewFloatingTieredPackagePrice) =
                price(Price.ofNewFloatingTieredPackagePrice(newFloatingTieredPackagePrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingGroupedTieredPrice: Price.NewFloatingGroupedTieredPrice) =
                price(Price.ofNewFloatingGroupedTieredPrice(newFloatingGroupedTieredPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingMaxGroupTieredPrice: Price.NewFloatingMaxGroupTieredPrice) =
                price(Price.ofNewFloatingMaxGroupTieredPrice(newFloatingMaxGroupTieredPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingTieredWithMinimumPrice: Price.NewFloatingTieredWithMinimumPrice) =
                price(Price.ofNewFloatingTieredWithMinimumPrice(newFloatingTieredWithMinimumPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingPackageWithAllocationPrice: Price.NewFloatingPackageWithAllocationPrice
            ) =
                price(
                    Price.ofNewFloatingPackageWithAllocationPrice(
                        newFloatingPackageWithAllocationPrice
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingTieredPackageWithMinimumPrice:
                    Price.NewFloatingTieredPackageWithMinimumPrice
            ) =
                price(
                    Price.ofNewFloatingTieredPackageWithMinimumPrice(
                        newFloatingTieredPackageWithMinimumPrice
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingUnitWithPercentPrice: Price.NewFloatingUnitWithPercentPrice) =
                price(Price.ofNewFloatingUnitWithPercentPrice(newFloatingUnitWithPercentPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingTieredWithProrationPrice: Price.NewFloatingTieredWithProrationPrice
            ) =
                price(
                    Price.ofNewFloatingTieredWithProrationPrice(newFloatingTieredWithProrationPrice)
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingUnitWithProrationPrice: Price.NewFloatingUnitWithProrationPrice) =
                price(Price.ofNewFloatingUnitWithProrationPrice(newFloatingUnitWithProrationPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingGroupedAllocationPrice: Price.NewFloatingGroupedAllocationPrice) =
                price(Price.ofNewFloatingGroupedAllocationPrice(newFloatingGroupedAllocationPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingGroupedWithProratedMinimumPrice:
                    Price.NewFloatingGroupedWithProratedMinimumPrice
            ) =
                price(
                    Price.ofNewFloatingGroupedWithProratedMinimumPrice(
                        newFloatingGroupedWithProratedMinimumPrice
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingGroupedWithMeteredMinimumPrice:
                    Price.NewFloatingGroupedWithMeteredMinimumPrice
            ) =
                price(
                    Price.ofNewFloatingGroupedWithMeteredMinimumPrice(
                        newFloatingGroupedWithMeteredMinimumPrice
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingMatrixWithDisplayNamePrice: Price.NewFloatingMatrixWithDisplayNamePrice
            ) =
                price(
                    Price.ofNewFloatingMatrixWithDisplayNamePrice(
                        newFloatingMatrixWithDisplayNamePrice
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(newFloatingBulkWithProrationPrice: Price.NewFloatingBulkWithProrationPrice) =
                price(Price.ofNewFloatingBulkWithProrationPrice(newFloatingBulkWithProrationPrice))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newFloatingGroupedTieredPackagePrice: Price.NewFloatingGroupedTieredPackagePrice
            ) =
                price(
                    Price.ofNewFloatingGroupedTieredPackagePrice(
                        newFloatingGroupedTieredPackagePrice
                    )
                )

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: String?) = priceId(JsonField.ofNullable(priceId))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: Optional<String>) = priceId(priceId.orElse(null))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: JsonField<String>) = apply { this.priceId = priceId }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Add =
                Add(
                    checkRequired("startDate", startDate),
                    allocationPrice,
                    (discounts ?: JsonMissing.of()).map { it.toImmutable() },
                    endDate,
                    externalPriceId,
                    (fixedFeeQuantityTransitions ?: JsonMissing.of()).map { it.toImmutable() },
                    maximumAmount,
                    minimumAmount,
                    price,
                    priceId,
                    additionalProperties.toImmutable(),
                )
        }

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription.
         */
        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): StartDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelativeDate(
                            billingCycleRelativeDate: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "StartDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        /** The definition of a new allocation price to create and add to the subscription. */
        @NoAutoDetect
        class AllocationPrice
        @JsonCreator
        private constructor(
            @JsonProperty("amount")
            @ExcludeMissing
            private val amount: JsonField<String> = JsonMissing.of(),
            @JsonProperty("cadence")
            @ExcludeMissing
            private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("currency")
            @ExcludeMissing
            private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("expires_at_end_of_cadence")
            @ExcludeMissing
            private val expiresAtEndOfCadence: JsonField<Boolean> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** An amount of the currency to allocate to the customer at the specified cadence. */
            fun amount(): String = amount.getRequired("amount")

            /** The cadence at which to allocate the amount to the customer. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string or a custom pricing unit identifier in which to bill this
             * price.
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * Whether the allocated amount should expire at the end of the cadence or roll over to
             * the next period.
             */
            fun expiresAtEndOfCadence(): Boolean =
                expiresAtEndOfCadence.getRequired("expires_at_end_of_cadence")

            /** An amount of the currency to allocate to the customer at the specified cadence. */
            @JsonProperty("amount") @ExcludeMissing fun _amount(): JsonField<String> = amount

            /** The cadence at which to allocate the amount to the customer. */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * An ISO 4217 currency string or a custom pricing unit identifier in which to bill this
             * price.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Whether the allocated amount should expire at the end of the cadence or roll over to
             * the next period.
             */
            @JsonProperty("expires_at_end_of_cadence")
            @ExcludeMissing
            fun _expiresAtEndOfCadence(): JsonField<Boolean> = expiresAtEndOfCadence

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): AllocationPrice = apply {
                if (validated) {
                    return@apply
                }

                amount()
                cadence()
                currency()
                expiresAtEndOfCadence()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var amount: JsonField<String>? = null
                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var expiresAtEndOfCadence: JsonField<Boolean>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(allocationPrice: AllocationPrice) = apply {
                    amount = allocationPrice.amount
                    cadence = allocationPrice.cadence
                    currency = allocationPrice.currency
                    expiresAtEndOfCadence = allocationPrice.expiresAtEndOfCadence
                    additionalProperties = allocationPrice.additionalProperties.toMutableMap()
                }

                /**
                 * An amount of the currency to allocate to the customer at the specified cadence.
                 */
                fun amount(amount: String) = amount(JsonField.of(amount))

                /**
                 * An amount of the currency to allocate to the customer at the specified cadence.
                 */
                fun amount(amount: JsonField<String>) = apply { this.amount = amount }

                /** The cadence at which to allocate the amount to the customer. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence at which to allocate the amount to the customer. */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /**
                 * An ISO 4217 currency string or a custom pricing unit identifier in which to bill
                 * this price.
                 */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * An ISO 4217 currency string or a custom pricing unit identifier in which to bill
                 * this price.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /**
                 * Whether the allocated amount should expire at the end of the cadence or roll over
                 * to the next period.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: Boolean) =
                    expiresAtEndOfCadence(JsonField.of(expiresAtEndOfCadence))

                /**
                 * Whether the allocated amount should expire at the end of the cadence or roll over
                 * to the next period.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: JsonField<Boolean>) = apply {
                    this.expiresAtEndOfCadence = expiresAtEndOfCadence
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): AllocationPrice =
                    AllocationPrice(
                        checkRequired("amount", amount),
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("expiresAtEndOfCadence", expiresAtEndOfCadence),
                        additionalProperties.toImmutable(),
                    )
            }

            /** The cadence at which to allocate the amount to the customer. */
            class Cadence
            @JsonCreator
            private constructor(
                private val value: JsonField<String>,
            ) : Enum {

                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                enum class Known {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                }

                enum class Value {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                    _UNKNOWN,
                }

                fun value(): Value =
                    when (this) {
                        ONE_TIME -> Value.ONE_TIME
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        ANNUAL -> Value.ANNUAL
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                fun known(): Known =
                    when (this) {
                        ONE_TIME -> Known.ONE_TIME
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        ANNUAL -> Known.ANNUAL
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is AllocationPrice && amount == other.amount && cadence == other.cadence && currency == other.currency && expiresAtEndOfCadence == other.expiresAtEndOfCadence && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(amount, cadence, currency, expiresAtEndOfCadence, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "AllocationPrice{amount=$amount, cadence=$cadence, currency=$currency, expiresAtEndOfCadence=$expiresAtEndOfCadence, additionalProperties=$additionalProperties}"
        }

        @JsonDeserialize(using = Discount.Deserializer::class)
        @JsonSerialize(using = Discount.Serializer::class)
        class Discount
        private constructor(
            private val amountDiscountCreationParams: AmountDiscountCreationParams? = null,
            private val percentageDiscountCreationParams: PercentageDiscountCreationParams? = null,
            private val usageDiscountCreationParams: UsageDiscountCreationParams? = null,
            private val _json: JsonValue? = null,
        ) {

            fun amountDiscountCreationParams(): Optional<AmountDiscountCreationParams> =
                Optional.ofNullable(amountDiscountCreationParams)

            fun percentageDiscountCreationParams(): Optional<PercentageDiscountCreationParams> =
                Optional.ofNullable(percentageDiscountCreationParams)

            fun usageDiscountCreationParams(): Optional<UsageDiscountCreationParams> =
                Optional.ofNullable(usageDiscountCreationParams)

            fun isAmountDiscountCreationParams(): Boolean = amountDiscountCreationParams != null

            fun isPercentageDiscountCreationParams(): Boolean =
                percentageDiscountCreationParams != null

            fun isUsageDiscountCreationParams(): Boolean = usageDiscountCreationParams != null

            fun asAmountDiscountCreationParams(): AmountDiscountCreationParams =
                amountDiscountCreationParams.getOrThrow("amountDiscountCreationParams")

            fun asPercentageDiscountCreationParams(): PercentageDiscountCreationParams =
                percentageDiscountCreationParams.getOrThrow("percentageDiscountCreationParams")

            fun asUsageDiscountCreationParams(): UsageDiscountCreationParams =
                usageDiscountCreationParams.getOrThrow("usageDiscountCreationParams")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    amountDiscountCreationParams != null ->
                        visitor.visitAmountDiscountCreationParams(amountDiscountCreationParams)
                    percentageDiscountCreationParams != null ->
                        visitor.visitPercentageDiscountCreationParams(
                            percentageDiscountCreationParams
                        )
                    usageDiscountCreationParams != null ->
                        visitor.visitUsageDiscountCreationParams(usageDiscountCreationParams)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Discount = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitAmountDiscountCreationParams(
                            amountDiscountCreationParams: AmountDiscountCreationParams
                        ) {
                            amountDiscountCreationParams.validate()
                        }

                        override fun visitPercentageDiscountCreationParams(
                            percentageDiscountCreationParams: PercentageDiscountCreationParams
                        ) {
                            percentageDiscountCreationParams.validate()
                        }

                        override fun visitUsageDiscountCreationParams(
                            usageDiscountCreationParams: UsageDiscountCreationParams
                        ) {
                            usageDiscountCreationParams.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && amountDiscountCreationParams == other.amountDiscountCreationParams && percentageDiscountCreationParams == other.percentageDiscountCreationParams && usageDiscountCreationParams == other.usageDiscountCreationParams /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(amountDiscountCreationParams, percentageDiscountCreationParams, usageDiscountCreationParams) /* spotless:on */

            override fun toString(): String =
                when {
                    amountDiscountCreationParams != null ->
                        "Discount{amountDiscountCreationParams=$amountDiscountCreationParams}"
                    percentageDiscountCreationParams != null ->
                        "Discount{percentageDiscountCreationParams=$percentageDiscountCreationParams}"
                    usageDiscountCreationParams != null ->
                        "Discount{usageDiscountCreationParams=$usageDiscountCreationParams}"
                    _json != null -> "Discount{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Discount")
                }

            companion object {

                @JvmStatic
                fun ofAmountDiscountCreationParams(
                    amountDiscountCreationParams: AmountDiscountCreationParams
                ) = Discount(amountDiscountCreationParams = amountDiscountCreationParams)

                @JvmStatic
                fun ofPercentageDiscountCreationParams(
                    percentageDiscountCreationParams: PercentageDiscountCreationParams
                ) = Discount(percentageDiscountCreationParams = percentageDiscountCreationParams)

                @JvmStatic
                fun ofUsageDiscountCreationParams(
                    usageDiscountCreationParams: UsageDiscountCreationParams
                ) = Discount(usageDiscountCreationParams = usageDiscountCreationParams)
            }

            interface Visitor<out T> {

                fun visitAmountDiscountCreationParams(
                    amountDiscountCreationParams: AmountDiscountCreationParams
                ): T

                fun visitPercentageDiscountCreationParams(
                    percentageDiscountCreationParams: PercentageDiscountCreationParams
                ): T

                fun visitUsageDiscountCreationParams(
                    usageDiscountCreationParams: UsageDiscountCreationParams
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Discount: $json")
                }
            }

            class Deserializer : BaseDeserializer<Discount>(Discount::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Discount {
                    val json = JsonValue.fromJsonNode(node)
                    val discountType =
                        json.asObject().getOrNull()?.get("discount_type")?.asString()?.getOrNull()

                    when (discountType) {
                        "amount" -> {
                            tryDeserialize(node, jacksonTypeRef<AmountDiscountCreationParams>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Discount(amountDiscountCreationParams = it, _json = json)
                                }
                        }
                        "percentage" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<PercentageDiscountCreationParams>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Discount(
                                        percentageDiscountCreationParams = it,
                                        _json = json
                                    )
                                }
                        }
                        "usage" -> {
                            tryDeserialize(node, jacksonTypeRef<UsageDiscountCreationParams>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Discount(usageDiscountCreationParams = it, _json = json)
                                }
                        }
                    }

                    return Discount(_json = json)
                }
            }

            class Serializer : BaseSerializer<Discount>(Discount::class) {

                override fun serialize(
                    value: Discount,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.amountDiscountCreationParams != null ->
                            generator.writeObject(value.amountDiscountCreationParams)
                        value.percentageDiscountCreationParams != null ->
                            generator.writeObject(value.percentageDiscountCreationParams)
                        value.usageDiscountCreationParams != null ->
                            generator.writeObject(value.usageDiscountCreationParams)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Discount")
                    }
                }
            }

            @NoAutoDetect
            class AmountDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("amount_discount")
                @ExcludeMissing
                private val amountDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("discount_type")
                @ExcludeMissing
                private val discountType: JsonField<DiscountType> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(): Double = amountDiscount.getRequired("amount_discount")

                fun discountType(): DiscountType = discountType.getRequired("discount_type")

                /** Only available if discount_type is `amount`. */
                @JsonProperty("amount_discount")
                @ExcludeMissing
                fun _amountDiscount(): JsonField<Double> = amountDiscount

                @JsonProperty("discount_type")
                @ExcludeMissing
                fun _discountType(): JsonField<DiscountType> = discountType

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): AmountDiscountCreationParams = apply {
                    if (validated) {
                        return@apply
                    }

                    amountDiscount()
                    discountType()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var amountDiscount: JsonField<Double>? = null
                    private var discountType: JsonField<DiscountType>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(amountDiscountCreationParams: AmountDiscountCreationParams) =
                        apply {
                            amountDiscount = amountDiscountCreationParams.amountDiscount
                            discountType = amountDiscountCreationParams.discountType
                            additionalProperties =
                                amountDiscountCreationParams.additionalProperties.toMutableMap()
                        }

                    /** Only available if discount_type is `amount`. */
                    fun amountDiscount(amountDiscount: Double) =
                        amountDiscount(JsonField.of(amountDiscount))

                    /** Only available if discount_type is `amount`. */
                    fun amountDiscount(amountDiscount: JsonField<Double>) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    fun discountType(discountType: DiscountType) =
                        discountType(JsonField.of(discountType))

                    fun discountType(discountType: JsonField<DiscountType>) = apply {
                        this.discountType = discountType
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): AmountDiscountCreationParams =
                        AmountDiscountCreationParams(
                            checkRequired("amountDiscount", amountDiscount),
                            checkRequired("discountType", discountType),
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT = of("amount")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    enum class Known {
                        AMOUNT,
                    }

                    enum class Value {
                        AMOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            AMOUNT -> Value.AMOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            AMOUNT -> Known.AMOUNT
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is AmountDiscountCreationParams && amountDiscount == other.amountDiscount && discountType == other.discountType && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(amountDiscount, discountType, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "AmountDiscountCreationParams{amountDiscount=$amountDiscount, discountType=$discountType, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class PercentageDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("discount_type")
                @ExcludeMissing
                private val discountType: JsonField<DiscountType> = JsonMissing.of(),
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                private val percentageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun discountType(): DiscountType = discountType.getRequired("discount_type")

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(): Double =
                    percentageDiscount.getRequired("percentage_discount")

                @JsonProperty("discount_type")
                @ExcludeMissing
                fun _discountType(): JsonField<DiscountType> = discountType

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                fun _percentageDiscount(): JsonField<Double> = percentageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): PercentageDiscountCreationParams = apply {
                    if (validated) {
                        return@apply
                    }

                    discountType()
                    percentageDiscount()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var discountType: JsonField<DiscountType>? = null
                    private var percentageDiscount: JsonField<Double>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        percentageDiscountCreationParams: PercentageDiscountCreationParams
                    ) = apply {
                        discountType = percentageDiscountCreationParams.discountType
                        percentageDiscount = percentageDiscountCreationParams.percentageDiscount
                        additionalProperties =
                            percentageDiscountCreationParams.additionalProperties.toMutableMap()
                    }

                    fun discountType(discountType: DiscountType) =
                        discountType(JsonField.of(discountType))

                    fun discountType(discountType: JsonField<DiscountType>) = apply {
                        this.discountType = discountType
                    }

                    /**
                     * Only available if discount_type is `percentage`. This is a number between 0
                     * and 1.
                     */
                    fun percentageDiscount(percentageDiscount: Double) =
                        percentageDiscount(JsonField.of(percentageDiscount))

                    /**
                     * Only available if discount_type is `percentage`. This is a number between 0
                     * and 1.
                     */
                    fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): PercentageDiscountCreationParams =
                        PercentageDiscountCreationParams(
                            checkRequired("discountType", discountType),
                            checkRequired("percentageDiscount", percentageDiscount),
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE = of("percentage")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    enum class Known {
                        PERCENTAGE,
                    }

                    enum class Value {
                        PERCENTAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PERCENTAGE -> Value.PERCENTAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PERCENTAGE -> Known.PERCENTAGE
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is PercentageDiscountCreationParams && discountType == other.discountType && percentageDiscount == other.percentageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(discountType, percentageDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "PercentageDiscountCreationParams{discountType=$discountType, percentageDiscount=$percentageDiscount, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class UsageDiscountCreationParams
            @JsonCreator
            private constructor(
                @JsonProperty("discount_type")
                @ExcludeMissing
                private val discountType: JsonField<DiscountType> = JsonMissing.of(),
                @JsonProperty("usage_discount")
                @ExcludeMissing
                private val usageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun discountType(): DiscountType = discountType.getRequired("discount_type")

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for.
                 */
                fun usageDiscount(): Double = usageDiscount.getRequired("usage_discount")

                @JsonProperty("discount_type")
                @ExcludeMissing
                fun _discountType(): JsonField<DiscountType> = discountType

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for.
                 */
                @JsonProperty("usage_discount")
                @ExcludeMissing
                fun _usageDiscount(): JsonField<Double> = usageDiscount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): UsageDiscountCreationParams = apply {
                    if (validated) {
                        return@apply
                    }

                    discountType()
                    usageDiscount()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var discountType: JsonField<DiscountType>? = null
                    private var usageDiscount: JsonField<Double>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(usageDiscountCreationParams: UsageDiscountCreationParams) =
                        apply {
                            discountType = usageDiscountCreationParams.discountType
                            usageDiscount = usageDiscountCreationParams.usageDiscount
                            additionalProperties =
                                usageDiscountCreationParams.additionalProperties.toMutableMap()
                        }

                    fun discountType(discountType: DiscountType) =
                        discountType(JsonField.of(discountType))

                    fun discountType(discountType: JsonField<DiscountType>) = apply {
                        this.discountType = discountType
                    }

                    /**
                     * Only available if discount_type is `usage`. Number of usage units that this
                     * discount is for.
                     */
                    fun usageDiscount(usageDiscount: Double) =
                        usageDiscount(JsonField.of(usageDiscount))

                    /**
                     * Only available if discount_type is `usage`. Number of usage units that this
                     * discount is for.
                     */
                    fun usageDiscount(usageDiscount: JsonField<Double>) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): UsageDiscountCreationParams =
                        UsageDiscountCreationParams(
                            checkRequired("discountType", discountType),
                            checkRequired("usageDiscount", usageDiscount),
                            additionalProperties.toImmutable(),
                        )
                }

                class DiscountType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE = of("usage")

                        @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                    }

                    enum class Known {
                        USAGE,
                    }

                    enum class Value {
                        USAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            USAGE -> Value.USAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            USAGE -> Known.USAGE
                            else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is UsageDiscountCreationParams && discountType == other.discountType && usageDiscount == other.usageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(discountType, usageDiscount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "UsageDiscountCreationParams{discountType=$discountType, usageDiscount=$usageDiscount, additionalProperties=$additionalProperties}"
            }
        }

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription.
         */
        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): EndDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelativeDate(
                            billingCycleRelativeDate: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "EndDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        @NoAutoDetect
        class FixedFeeQuantityTransition
        @JsonCreator
        private constructor(
            @JsonProperty("effective_date")
            @ExcludeMissing
            private val effectiveDate: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("quantity")
            @ExcludeMissing
            private val quantity: JsonField<Long> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** The date that the fixed fee quantity transition should take effect. */
            fun effectiveDate(): OffsetDateTime = effectiveDate.getRequired("effective_date")

            /** The quantity of the fixed fee quantity transition. */
            fun quantity(): Long = quantity.getRequired("quantity")

            /** The date that the fixed fee quantity transition should take effect. */
            @JsonProperty("effective_date")
            @ExcludeMissing
            fun _effectiveDate(): JsonField<OffsetDateTime> = effectiveDate

            /** The quantity of the fixed fee quantity transition. */
            @JsonProperty("quantity") @ExcludeMissing fun _quantity(): JsonField<Long> = quantity

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): FixedFeeQuantityTransition = apply {
                if (validated) {
                    return@apply
                }

                effectiveDate()
                quantity()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var effectiveDate: JsonField<OffsetDateTime>? = null
                private var quantity: JsonField<Long>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(fixedFeeQuantityTransition: FixedFeeQuantityTransition) = apply {
                    effectiveDate = fixedFeeQuantityTransition.effectiveDate
                    quantity = fixedFeeQuantityTransition.quantity
                    additionalProperties =
                        fixedFeeQuantityTransition.additionalProperties.toMutableMap()
                }

                /** The date that the fixed fee quantity transition should take effect. */
                fun effectiveDate(effectiveDate: OffsetDateTime) =
                    effectiveDate(JsonField.of(effectiveDate))

                /** The date that the fixed fee quantity transition should take effect. */
                fun effectiveDate(effectiveDate: JsonField<OffsetDateTime>) = apply {
                    this.effectiveDate = effectiveDate
                }

                /** The quantity of the fixed fee quantity transition. */
                fun quantity(quantity: Long) = quantity(JsonField.of(quantity))

                /** The quantity of the fixed fee quantity transition. */
                fun quantity(quantity: JsonField<Long>) = apply { this.quantity = quantity }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): FixedFeeQuantityTransition =
                    FixedFeeQuantityTransition(
                        checkRequired("effectiveDate", effectiveDate),
                        checkRequired("quantity", quantity),
                        additionalProperties.toImmutable(),
                    )
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is FixedFeeQuantityTransition && effectiveDate == other.effectiveDate && quantity == other.quantity && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(effectiveDate, quantity, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "FixedFeeQuantityTransition{effectiveDate=$effectiveDate, quantity=$quantity, additionalProperties=$additionalProperties}"
        }

        /** The definition of a new price to create and add to the subscription. */
        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newFloatingUnitPrice: NewFloatingUnitPrice? = null,
            private val newFloatingPackagePrice: NewFloatingPackagePrice? = null,
            private val newFloatingMatrixPrice: NewFloatingMatrixPrice? = null,
            private val newFloatingMatrixWithAllocationPrice:
                NewFloatingMatrixWithAllocationPrice? =
                null,
            private val newFloatingTieredPrice: NewFloatingTieredPrice? = null,
            private val newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice? = null,
            private val newFloatingBpsPrice: NewFloatingBpsPrice? = null,
            private val newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice? = null,
            private val newFloatingBulkPrice: NewFloatingBulkPrice? = null,
            private val newFloatingThresholdTotalAmountPrice:
                NewFloatingThresholdTotalAmountPrice? =
                null,
            private val newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice? = null,
            private val newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice? = null,
            private val newFloatingMaxGroupTieredPrice: NewFloatingMaxGroupTieredPrice? = null,
            private val newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice? =
                null,
            private val newFloatingPackageWithAllocationPrice:
                NewFloatingPackageWithAllocationPrice? =
                null,
            private val newFloatingTieredPackageWithMinimumPrice:
                NewFloatingTieredPackageWithMinimumPrice? =
                null,
            private val newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice? = null,
            private val newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice? =
                null,
            private val newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice? =
                null,
            private val newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice? =
                null,
            private val newFloatingGroupedWithProratedMinimumPrice:
                NewFloatingGroupedWithProratedMinimumPrice? =
                null,
            private val newFloatingGroupedWithMeteredMinimumPrice:
                NewFloatingGroupedWithMeteredMinimumPrice? =
                null,
            private val newFloatingMatrixWithDisplayNamePrice:
                NewFloatingMatrixWithDisplayNamePrice? =
                null,
            private val newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice? =
                null,
            private val newFloatingGroupedTieredPackagePrice:
                NewFloatingGroupedTieredPackagePrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            fun newFloatingUnitPrice(): Optional<NewFloatingUnitPrice> =
                Optional.ofNullable(newFloatingUnitPrice)

            fun newFloatingPackagePrice(): Optional<NewFloatingPackagePrice> =
                Optional.ofNullable(newFloatingPackagePrice)

            fun newFloatingMatrixPrice(): Optional<NewFloatingMatrixPrice> =
                Optional.ofNullable(newFloatingMatrixPrice)

            fun newFloatingMatrixWithAllocationPrice():
                Optional<NewFloatingMatrixWithAllocationPrice> =
                Optional.ofNullable(newFloatingMatrixWithAllocationPrice)

            fun newFloatingTieredPrice(): Optional<NewFloatingTieredPrice> =
                Optional.ofNullable(newFloatingTieredPrice)

            fun newFloatingTieredBpsPrice(): Optional<NewFloatingTieredBpsPrice> =
                Optional.ofNullable(newFloatingTieredBpsPrice)

            fun newFloatingBpsPrice(): Optional<NewFloatingBpsPrice> =
                Optional.ofNullable(newFloatingBpsPrice)

            fun newFloatingBulkBpsPrice(): Optional<NewFloatingBulkBpsPrice> =
                Optional.ofNullable(newFloatingBulkBpsPrice)

            fun newFloatingBulkPrice(): Optional<NewFloatingBulkPrice> =
                Optional.ofNullable(newFloatingBulkPrice)

            fun newFloatingThresholdTotalAmountPrice():
                Optional<NewFloatingThresholdTotalAmountPrice> =
                Optional.ofNullable(newFloatingThresholdTotalAmountPrice)

            fun newFloatingTieredPackagePrice(): Optional<NewFloatingTieredPackagePrice> =
                Optional.ofNullable(newFloatingTieredPackagePrice)

            fun newFloatingGroupedTieredPrice(): Optional<NewFloatingGroupedTieredPrice> =
                Optional.ofNullable(newFloatingGroupedTieredPrice)

            fun newFloatingMaxGroupTieredPrice(): Optional<NewFloatingMaxGroupTieredPrice> =
                Optional.ofNullable(newFloatingMaxGroupTieredPrice)

            fun newFloatingTieredWithMinimumPrice(): Optional<NewFloatingTieredWithMinimumPrice> =
                Optional.ofNullable(newFloatingTieredWithMinimumPrice)

            fun newFloatingPackageWithAllocationPrice():
                Optional<NewFloatingPackageWithAllocationPrice> =
                Optional.ofNullable(newFloatingPackageWithAllocationPrice)

            fun newFloatingTieredPackageWithMinimumPrice():
                Optional<NewFloatingTieredPackageWithMinimumPrice> =
                Optional.ofNullable(newFloatingTieredPackageWithMinimumPrice)

            fun newFloatingUnitWithPercentPrice(): Optional<NewFloatingUnitWithPercentPrice> =
                Optional.ofNullable(newFloatingUnitWithPercentPrice)

            fun newFloatingTieredWithProrationPrice():
                Optional<NewFloatingTieredWithProrationPrice> =
                Optional.ofNullable(newFloatingTieredWithProrationPrice)

            fun newFloatingUnitWithProrationPrice(): Optional<NewFloatingUnitWithProrationPrice> =
                Optional.ofNullable(newFloatingUnitWithProrationPrice)

            fun newFloatingGroupedAllocationPrice(): Optional<NewFloatingGroupedAllocationPrice> =
                Optional.ofNullable(newFloatingGroupedAllocationPrice)

            fun newFloatingGroupedWithProratedMinimumPrice():
                Optional<NewFloatingGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newFloatingGroupedWithProratedMinimumPrice)

            fun newFloatingGroupedWithMeteredMinimumPrice():
                Optional<NewFloatingGroupedWithMeteredMinimumPrice> =
                Optional.ofNullable(newFloatingGroupedWithMeteredMinimumPrice)

            fun newFloatingMatrixWithDisplayNamePrice():
                Optional<NewFloatingMatrixWithDisplayNamePrice> =
                Optional.ofNullable(newFloatingMatrixWithDisplayNamePrice)

            fun newFloatingBulkWithProrationPrice(): Optional<NewFloatingBulkWithProrationPrice> =
                Optional.ofNullable(newFloatingBulkWithProrationPrice)

            fun newFloatingGroupedTieredPackagePrice():
                Optional<NewFloatingGroupedTieredPackagePrice> =
                Optional.ofNullable(newFloatingGroupedTieredPackagePrice)

            fun isNewFloatingUnitPrice(): Boolean = newFloatingUnitPrice != null

            fun isNewFloatingPackagePrice(): Boolean = newFloatingPackagePrice != null

            fun isNewFloatingMatrixPrice(): Boolean = newFloatingMatrixPrice != null

            fun isNewFloatingMatrixWithAllocationPrice(): Boolean =
                newFloatingMatrixWithAllocationPrice != null

            fun isNewFloatingTieredPrice(): Boolean = newFloatingTieredPrice != null

            fun isNewFloatingTieredBpsPrice(): Boolean = newFloatingTieredBpsPrice != null

            fun isNewFloatingBpsPrice(): Boolean = newFloatingBpsPrice != null

            fun isNewFloatingBulkBpsPrice(): Boolean = newFloatingBulkBpsPrice != null

            fun isNewFloatingBulkPrice(): Boolean = newFloatingBulkPrice != null

            fun isNewFloatingThresholdTotalAmountPrice(): Boolean =
                newFloatingThresholdTotalAmountPrice != null

            fun isNewFloatingTieredPackagePrice(): Boolean = newFloatingTieredPackagePrice != null

            fun isNewFloatingGroupedTieredPrice(): Boolean = newFloatingGroupedTieredPrice != null

            fun isNewFloatingMaxGroupTieredPrice(): Boolean = newFloatingMaxGroupTieredPrice != null

            fun isNewFloatingTieredWithMinimumPrice(): Boolean =
                newFloatingTieredWithMinimumPrice != null

            fun isNewFloatingPackageWithAllocationPrice(): Boolean =
                newFloatingPackageWithAllocationPrice != null

            fun isNewFloatingTieredPackageWithMinimumPrice(): Boolean =
                newFloatingTieredPackageWithMinimumPrice != null

            fun isNewFloatingUnitWithPercentPrice(): Boolean =
                newFloatingUnitWithPercentPrice != null

            fun isNewFloatingTieredWithProrationPrice(): Boolean =
                newFloatingTieredWithProrationPrice != null

            fun isNewFloatingUnitWithProrationPrice(): Boolean =
                newFloatingUnitWithProrationPrice != null

            fun isNewFloatingGroupedAllocationPrice(): Boolean =
                newFloatingGroupedAllocationPrice != null

            fun isNewFloatingGroupedWithProratedMinimumPrice(): Boolean =
                newFloatingGroupedWithProratedMinimumPrice != null

            fun isNewFloatingGroupedWithMeteredMinimumPrice(): Boolean =
                newFloatingGroupedWithMeteredMinimumPrice != null

            fun isNewFloatingMatrixWithDisplayNamePrice(): Boolean =
                newFloatingMatrixWithDisplayNamePrice != null

            fun isNewFloatingBulkWithProrationPrice(): Boolean =
                newFloatingBulkWithProrationPrice != null

            fun isNewFloatingGroupedTieredPackagePrice(): Boolean =
                newFloatingGroupedTieredPackagePrice != null

            fun asNewFloatingUnitPrice(): NewFloatingUnitPrice =
                newFloatingUnitPrice.getOrThrow("newFloatingUnitPrice")

            fun asNewFloatingPackagePrice(): NewFloatingPackagePrice =
                newFloatingPackagePrice.getOrThrow("newFloatingPackagePrice")

            fun asNewFloatingMatrixPrice(): NewFloatingMatrixPrice =
                newFloatingMatrixPrice.getOrThrow("newFloatingMatrixPrice")

            fun asNewFloatingMatrixWithAllocationPrice(): NewFloatingMatrixWithAllocationPrice =
                newFloatingMatrixWithAllocationPrice.getOrThrow(
                    "newFloatingMatrixWithAllocationPrice"
                )

            fun asNewFloatingTieredPrice(): NewFloatingTieredPrice =
                newFloatingTieredPrice.getOrThrow("newFloatingTieredPrice")

            fun asNewFloatingTieredBpsPrice(): NewFloatingTieredBpsPrice =
                newFloatingTieredBpsPrice.getOrThrow("newFloatingTieredBpsPrice")

            fun asNewFloatingBpsPrice(): NewFloatingBpsPrice =
                newFloatingBpsPrice.getOrThrow("newFloatingBpsPrice")

            fun asNewFloatingBulkBpsPrice(): NewFloatingBulkBpsPrice =
                newFloatingBulkBpsPrice.getOrThrow("newFloatingBulkBpsPrice")

            fun asNewFloatingBulkPrice(): NewFloatingBulkPrice =
                newFloatingBulkPrice.getOrThrow("newFloatingBulkPrice")

            fun asNewFloatingThresholdTotalAmountPrice(): NewFloatingThresholdTotalAmountPrice =
                newFloatingThresholdTotalAmountPrice.getOrThrow(
                    "newFloatingThresholdTotalAmountPrice"
                )

            fun asNewFloatingTieredPackagePrice(): NewFloatingTieredPackagePrice =
                newFloatingTieredPackagePrice.getOrThrow("newFloatingTieredPackagePrice")

            fun asNewFloatingGroupedTieredPrice(): NewFloatingGroupedTieredPrice =
                newFloatingGroupedTieredPrice.getOrThrow("newFloatingGroupedTieredPrice")

            fun asNewFloatingMaxGroupTieredPrice(): NewFloatingMaxGroupTieredPrice =
                newFloatingMaxGroupTieredPrice.getOrThrow("newFloatingMaxGroupTieredPrice")

            fun asNewFloatingTieredWithMinimumPrice(): NewFloatingTieredWithMinimumPrice =
                newFloatingTieredWithMinimumPrice.getOrThrow("newFloatingTieredWithMinimumPrice")

            fun asNewFloatingPackageWithAllocationPrice(): NewFloatingPackageWithAllocationPrice =
                newFloatingPackageWithAllocationPrice.getOrThrow(
                    "newFloatingPackageWithAllocationPrice"
                )

            fun asNewFloatingTieredPackageWithMinimumPrice():
                NewFloatingTieredPackageWithMinimumPrice =
                newFloatingTieredPackageWithMinimumPrice.getOrThrow(
                    "newFloatingTieredPackageWithMinimumPrice"
                )

            fun asNewFloatingUnitWithPercentPrice(): NewFloatingUnitWithPercentPrice =
                newFloatingUnitWithPercentPrice.getOrThrow("newFloatingUnitWithPercentPrice")

            fun asNewFloatingTieredWithProrationPrice(): NewFloatingTieredWithProrationPrice =
                newFloatingTieredWithProrationPrice.getOrThrow(
                    "newFloatingTieredWithProrationPrice"
                )

            fun asNewFloatingUnitWithProrationPrice(): NewFloatingUnitWithProrationPrice =
                newFloatingUnitWithProrationPrice.getOrThrow("newFloatingUnitWithProrationPrice")

            fun asNewFloatingGroupedAllocationPrice(): NewFloatingGroupedAllocationPrice =
                newFloatingGroupedAllocationPrice.getOrThrow("newFloatingGroupedAllocationPrice")

            fun asNewFloatingGroupedWithProratedMinimumPrice():
                NewFloatingGroupedWithProratedMinimumPrice =
                newFloatingGroupedWithProratedMinimumPrice.getOrThrow(
                    "newFloatingGroupedWithProratedMinimumPrice"
                )

            fun asNewFloatingGroupedWithMeteredMinimumPrice():
                NewFloatingGroupedWithMeteredMinimumPrice =
                newFloatingGroupedWithMeteredMinimumPrice.getOrThrow(
                    "newFloatingGroupedWithMeteredMinimumPrice"
                )

            fun asNewFloatingMatrixWithDisplayNamePrice(): NewFloatingMatrixWithDisplayNamePrice =
                newFloatingMatrixWithDisplayNamePrice.getOrThrow(
                    "newFloatingMatrixWithDisplayNamePrice"
                )

            fun asNewFloatingBulkWithProrationPrice(): NewFloatingBulkWithProrationPrice =
                newFloatingBulkWithProrationPrice.getOrThrow("newFloatingBulkWithProrationPrice")

            fun asNewFloatingGroupedTieredPackagePrice(): NewFloatingGroupedTieredPackagePrice =
                newFloatingGroupedTieredPackagePrice.getOrThrow(
                    "newFloatingGroupedTieredPackagePrice"
                )

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newFloatingUnitPrice != null ->
                        visitor.visitNewFloatingUnitPrice(newFloatingUnitPrice)
                    newFloatingPackagePrice != null ->
                        visitor.visitNewFloatingPackagePrice(newFloatingPackagePrice)
                    newFloatingMatrixPrice != null ->
                        visitor.visitNewFloatingMatrixPrice(newFloatingMatrixPrice)
                    newFloatingMatrixWithAllocationPrice != null ->
                        visitor.visitNewFloatingMatrixWithAllocationPrice(
                            newFloatingMatrixWithAllocationPrice
                        )
                    newFloatingTieredPrice != null ->
                        visitor.visitNewFloatingTieredPrice(newFloatingTieredPrice)
                    newFloatingTieredBpsPrice != null ->
                        visitor.visitNewFloatingTieredBpsPrice(newFloatingTieredBpsPrice)
                    newFloatingBpsPrice != null ->
                        visitor.visitNewFloatingBpsPrice(newFloatingBpsPrice)
                    newFloatingBulkBpsPrice != null ->
                        visitor.visitNewFloatingBulkBpsPrice(newFloatingBulkBpsPrice)
                    newFloatingBulkPrice != null ->
                        visitor.visitNewFloatingBulkPrice(newFloatingBulkPrice)
                    newFloatingThresholdTotalAmountPrice != null ->
                        visitor.visitNewFloatingThresholdTotalAmountPrice(
                            newFloatingThresholdTotalAmountPrice
                        )
                    newFloatingTieredPackagePrice != null ->
                        visitor.visitNewFloatingTieredPackagePrice(newFloatingTieredPackagePrice)
                    newFloatingGroupedTieredPrice != null ->
                        visitor.visitNewFloatingGroupedTieredPrice(newFloatingGroupedTieredPrice)
                    newFloatingMaxGroupTieredPrice != null ->
                        visitor.visitNewFloatingMaxGroupTieredPrice(newFloatingMaxGroupTieredPrice)
                    newFloatingTieredWithMinimumPrice != null ->
                        visitor.visitNewFloatingTieredWithMinimumPrice(
                            newFloatingTieredWithMinimumPrice
                        )
                    newFloatingPackageWithAllocationPrice != null ->
                        visitor.visitNewFloatingPackageWithAllocationPrice(
                            newFloatingPackageWithAllocationPrice
                        )
                    newFloatingTieredPackageWithMinimumPrice != null ->
                        visitor.visitNewFloatingTieredPackageWithMinimumPrice(
                            newFloatingTieredPackageWithMinimumPrice
                        )
                    newFloatingUnitWithPercentPrice != null ->
                        visitor.visitNewFloatingUnitWithPercentPrice(
                            newFloatingUnitWithPercentPrice
                        )
                    newFloatingTieredWithProrationPrice != null ->
                        visitor.visitNewFloatingTieredWithProrationPrice(
                            newFloatingTieredWithProrationPrice
                        )
                    newFloatingUnitWithProrationPrice != null ->
                        visitor.visitNewFloatingUnitWithProrationPrice(
                            newFloatingUnitWithProrationPrice
                        )
                    newFloatingGroupedAllocationPrice != null ->
                        visitor.visitNewFloatingGroupedAllocationPrice(
                            newFloatingGroupedAllocationPrice
                        )
                    newFloatingGroupedWithProratedMinimumPrice != null ->
                        visitor.visitNewFloatingGroupedWithProratedMinimumPrice(
                            newFloatingGroupedWithProratedMinimumPrice
                        )
                    newFloatingGroupedWithMeteredMinimumPrice != null ->
                        visitor.visitNewFloatingGroupedWithMeteredMinimumPrice(
                            newFloatingGroupedWithMeteredMinimumPrice
                        )
                    newFloatingMatrixWithDisplayNamePrice != null ->
                        visitor.visitNewFloatingMatrixWithDisplayNamePrice(
                            newFloatingMatrixWithDisplayNamePrice
                        )
                    newFloatingBulkWithProrationPrice != null ->
                        visitor.visitNewFloatingBulkWithProrationPrice(
                            newFloatingBulkWithProrationPrice
                        )
                    newFloatingGroupedTieredPackagePrice != null ->
                        visitor.visitNewFloatingGroupedTieredPackagePrice(
                            newFloatingGroupedTieredPackagePrice
                        )
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Price = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitNewFloatingUnitPrice(
                            newFloatingUnitPrice: NewFloatingUnitPrice
                        ) {
                            newFloatingUnitPrice.validate()
                        }

                        override fun visitNewFloatingPackagePrice(
                            newFloatingPackagePrice: NewFloatingPackagePrice
                        ) {
                            newFloatingPackagePrice.validate()
                        }

                        override fun visitNewFloatingMatrixPrice(
                            newFloatingMatrixPrice: NewFloatingMatrixPrice
                        ) {
                            newFloatingMatrixPrice.validate()
                        }

                        override fun visitNewFloatingMatrixWithAllocationPrice(
                            newFloatingMatrixWithAllocationPrice:
                                NewFloatingMatrixWithAllocationPrice
                        ) {
                            newFloatingMatrixWithAllocationPrice.validate()
                        }

                        override fun visitNewFloatingTieredPrice(
                            newFloatingTieredPrice: NewFloatingTieredPrice
                        ) {
                            newFloatingTieredPrice.validate()
                        }

                        override fun visitNewFloatingTieredBpsPrice(
                            newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice
                        ) {
                            newFloatingTieredBpsPrice.validate()
                        }

                        override fun visitNewFloatingBpsPrice(
                            newFloatingBpsPrice: NewFloatingBpsPrice
                        ) {
                            newFloatingBpsPrice.validate()
                        }

                        override fun visitNewFloatingBulkBpsPrice(
                            newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice
                        ) {
                            newFloatingBulkBpsPrice.validate()
                        }

                        override fun visitNewFloatingBulkPrice(
                            newFloatingBulkPrice: NewFloatingBulkPrice
                        ) {
                            newFloatingBulkPrice.validate()
                        }

                        override fun visitNewFloatingThresholdTotalAmountPrice(
                            newFloatingThresholdTotalAmountPrice:
                                NewFloatingThresholdTotalAmountPrice
                        ) {
                            newFloatingThresholdTotalAmountPrice.validate()
                        }

                        override fun visitNewFloatingTieredPackagePrice(
                            newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice
                        ) {
                            newFloatingTieredPackagePrice.validate()
                        }

                        override fun visitNewFloatingGroupedTieredPrice(
                            newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice
                        ) {
                            newFloatingGroupedTieredPrice.validate()
                        }

                        override fun visitNewFloatingMaxGroupTieredPrice(
                            newFloatingMaxGroupTieredPrice: NewFloatingMaxGroupTieredPrice
                        ) {
                            newFloatingMaxGroupTieredPrice.validate()
                        }

                        override fun visitNewFloatingTieredWithMinimumPrice(
                            newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice
                        ) {
                            newFloatingTieredWithMinimumPrice.validate()
                        }

                        override fun visitNewFloatingPackageWithAllocationPrice(
                            newFloatingPackageWithAllocationPrice:
                                NewFloatingPackageWithAllocationPrice
                        ) {
                            newFloatingPackageWithAllocationPrice.validate()
                        }

                        override fun visitNewFloatingTieredPackageWithMinimumPrice(
                            newFloatingTieredPackageWithMinimumPrice:
                                NewFloatingTieredPackageWithMinimumPrice
                        ) {
                            newFloatingTieredPackageWithMinimumPrice.validate()
                        }

                        override fun visitNewFloatingUnitWithPercentPrice(
                            newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice
                        ) {
                            newFloatingUnitWithPercentPrice.validate()
                        }

                        override fun visitNewFloatingTieredWithProrationPrice(
                            newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice
                        ) {
                            newFloatingTieredWithProrationPrice.validate()
                        }

                        override fun visitNewFloatingUnitWithProrationPrice(
                            newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice
                        ) {
                            newFloatingUnitWithProrationPrice.validate()
                        }

                        override fun visitNewFloatingGroupedAllocationPrice(
                            newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice
                        ) {
                            newFloatingGroupedAllocationPrice.validate()
                        }

                        override fun visitNewFloatingGroupedWithProratedMinimumPrice(
                            newFloatingGroupedWithProratedMinimumPrice:
                                NewFloatingGroupedWithProratedMinimumPrice
                        ) {
                            newFloatingGroupedWithProratedMinimumPrice.validate()
                        }

                        override fun visitNewFloatingGroupedWithMeteredMinimumPrice(
                            newFloatingGroupedWithMeteredMinimumPrice:
                                NewFloatingGroupedWithMeteredMinimumPrice
                        ) {
                            newFloatingGroupedWithMeteredMinimumPrice.validate()
                        }

                        override fun visitNewFloatingMatrixWithDisplayNamePrice(
                            newFloatingMatrixWithDisplayNamePrice:
                                NewFloatingMatrixWithDisplayNamePrice
                        ) {
                            newFloatingMatrixWithDisplayNamePrice.validate()
                        }

                        override fun visitNewFloatingBulkWithProrationPrice(
                            newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice
                        ) {
                            newFloatingBulkWithProrationPrice.validate()
                        }

                        override fun visitNewFloatingGroupedTieredPackagePrice(
                            newFloatingGroupedTieredPackagePrice:
                                NewFloatingGroupedTieredPackagePrice
                        ) {
                            newFloatingGroupedTieredPackagePrice.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && newFloatingUnitPrice == other.newFloatingUnitPrice && newFloatingPackagePrice == other.newFloatingPackagePrice && newFloatingMatrixPrice == other.newFloatingMatrixPrice && newFloatingMatrixWithAllocationPrice == other.newFloatingMatrixWithAllocationPrice && newFloatingTieredPrice == other.newFloatingTieredPrice && newFloatingTieredBpsPrice == other.newFloatingTieredBpsPrice && newFloatingBpsPrice == other.newFloatingBpsPrice && newFloatingBulkBpsPrice == other.newFloatingBulkBpsPrice && newFloatingBulkPrice == other.newFloatingBulkPrice && newFloatingThresholdTotalAmountPrice == other.newFloatingThresholdTotalAmountPrice && newFloatingTieredPackagePrice == other.newFloatingTieredPackagePrice && newFloatingGroupedTieredPrice == other.newFloatingGroupedTieredPrice && newFloatingMaxGroupTieredPrice == other.newFloatingMaxGroupTieredPrice && newFloatingTieredWithMinimumPrice == other.newFloatingTieredWithMinimumPrice && newFloatingPackageWithAllocationPrice == other.newFloatingPackageWithAllocationPrice && newFloatingTieredPackageWithMinimumPrice == other.newFloatingTieredPackageWithMinimumPrice && newFloatingUnitWithPercentPrice == other.newFloatingUnitWithPercentPrice && newFloatingTieredWithProrationPrice == other.newFloatingTieredWithProrationPrice && newFloatingUnitWithProrationPrice == other.newFloatingUnitWithProrationPrice && newFloatingGroupedAllocationPrice == other.newFloatingGroupedAllocationPrice && newFloatingGroupedWithProratedMinimumPrice == other.newFloatingGroupedWithProratedMinimumPrice && newFloatingGroupedWithMeteredMinimumPrice == other.newFloatingGroupedWithMeteredMinimumPrice && newFloatingMatrixWithDisplayNamePrice == other.newFloatingMatrixWithDisplayNamePrice && newFloatingBulkWithProrationPrice == other.newFloatingBulkWithProrationPrice && newFloatingGroupedTieredPackagePrice == other.newFloatingGroupedTieredPackagePrice /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newFloatingUnitPrice, newFloatingPackagePrice, newFloatingMatrixPrice, newFloatingMatrixWithAllocationPrice, newFloatingTieredPrice, newFloatingTieredBpsPrice, newFloatingBpsPrice, newFloatingBulkBpsPrice, newFloatingBulkPrice, newFloatingThresholdTotalAmountPrice, newFloatingTieredPackagePrice, newFloatingGroupedTieredPrice, newFloatingMaxGroupTieredPrice, newFloatingTieredWithMinimumPrice, newFloatingPackageWithAllocationPrice, newFloatingTieredPackageWithMinimumPrice, newFloatingUnitWithPercentPrice, newFloatingTieredWithProrationPrice, newFloatingUnitWithProrationPrice, newFloatingGroupedAllocationPrice, newFloatingGroupedWithProratedMinimumPrice, newFloatingGroupedWithMeteredMinimumPrice, newFloatingMatrixWithDisplayNamePrice, newFloatingBulkWithProrationPrice, newFloatingGroupedTieredPackagePrice) /* spotless:on */

            override fun toString(): String =
                when {
                    newFloatingUnitPrice != null ->
                        "Price{newFloatingUnitPrice=$newFloatingUnitPrice}"
                    newFloatingPackagePrice != null ->
                        "Price{newFloatingPackagePrice=$newFloatingPackagePrice}"
                    newFloatingMatrixPrice != null ->
                        "Price{newFloatingMatrixPrice=$newFloatingMatrixPrice}"
                    newFloatingMatrixWithAllocationPrice != null ->
                        "Price{newFloatingMatrixWithAllocationPrice=$newFloatingMatrixWithAllocationPrice}"
                    newFloatingTieredPrice != null ->
                        "Price{newFloatingTieredPrice=$newFloatingTieredPrice}"
                    newFloatingTieredBpsPrice != null ->
                        "Price{newFloatingTieredBpsPrice=$newFloatingTieredBpsPrice}"
                    newFloatingBpsPrice != null -> "Price{newFloatingBpsPrice=$newFloatingBpsPrice}"
                    newFloatingBulkBpsPrice != null ->
                        "Price{newFloatingBulkBpsPrice=$newFloatingBulkBpsPrice}"
                    newFloatingBulkPrice != null ->
                        "Price{newFloatingBulkPrice=$newFloatingBulkPrice}"
                    newFloatingThresholdTotalAmountPrice != null ->
                        "Price{newFloatingThresholdTotalAmountPrice=$newFloatingThresholdTotalAmountPrice}"
                    newFloatingTieredPackagePrice != null ->
                        "Price{newFloatingTieredPackagePrice=$newFloatingTieredPackagePrice}"
                    newFloatingGroupedTieredPrice != null ->
                        "Price{newFloatingGroupedTieredPrice=$newFloatingGroupedTieredPrice}"
                    newFloatingMaxGroupTieredPrice != null ->
                        "Price{newFloatingMaxGroupTieredPrice=$newFloatingMaxGroupTieredPrice}"
                    newFloatingTieredWithMinimumPrice != null ->
                        "Price{newFloatingTieredWithMinimumPrice=$newFloatingTieredWithMinimumPrice}"
                    newFloatingPackageWithAllocationPrice != null ->
                        "Price{newFloatingPackageWithAllocationPrice=$newFloatingPackageWithAllocationPrice}"
                    newFloatingTieredPackageWithMinimumPrice != null ->
                        "Price{newFloatingTieredPackageWithMinimumPrice=$newFloatingTieredPackageWithMinimumPrice}"
                    newFloatingUnitWithPercentPrice != null ->
                        "Price{newFloatingUnitWithPercentPrice=$newFloatingUnitWithPercentPrice}"
                    newFloatingTieredWithProrationPrice != null ->
                        "Price{newFloatingTieredWithProrationPrice=$newFloatingTieredWithProrationPrice}"
                    newFloatingUnitWithProrationPrice != null ->
                        "Price{newFloatingUnitWithProrationPrice=$newFloatingUnitWithProrationPrice}"
                    newFloatingGroupedAllocationPrice != null ->
                        "Price{newFloatingGroupedAllocationPrice=$newFloatingGroupedAllocationPrice}"
                    newFloatingGroupedWithProratedMinimumPrice != null ->
                        "Price{newFloatingGroupedWithProratedMinimumPrice=$newFloatingGroupedWithProratedMinimumPrice}"
                    newFloatingGroupedWithMeteredMinimumPrice != null ->
                        "Price{newFloatingGroupedWithMeteredMinimumPrice=$newFloatingGroupedWithMeteredMinimumPrice}"
                    newFloatingMatrixWithDisplayNamePrice != null ->
                        "Price{newFloatingMatrixWithDisplayNamePrice=$newFloatingMatrixWithDisplayNamePrice}"
                    newFloatingBulkWithProrationPrice != null ->
                        "Price{newFloatingBulkWithProrationPrice=$newFloatingBulkWithProrationPrice}"
                    newFloatingGroupedTieredPackagePrice != null ->
                        "Price{newFloatingGroupedTieredPackagePrice=$newFloatingGroupedTieredPackagePrice}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }

            companion object {

                @JvmStatic
                fun ofNewFloatingUnitPrice(newFloatingUnitPrice: NewFloatingUnitPrice) =
                    Price(newFloatingUnitPrice = newFloatingUnitPrice)

                @JvmStatic
                fun ofNewFloatingPackagePrice(newFloatingPackagePrice: NewFloatingPackagePrice) =
                    Price(newFloatingPackagePrice = newFloatingPackagePrice)

                @JvmStatic
                fun ofNewFloatingMatrixPrice(newFloatingMatrixPrice: NewFloatingMatrixPrice) =
                    Price(newFloatingMatrixPrice = newFloatingMatrixPrice)

                @JvmStatic
                fun ofNewFloatingMatrixWithAllocationPrice(
                    newFloatingMatrixWithAllocationPrice: NewFloatingMatrixWithAllocationPrice
                ) =
                    Price(
                        newFloatingMatrixWithAllocationPrice = newFloatingMatrixWithAllocationPrice
                    )

                @JvmStatic
                fun ofNewFloatingTieredPrice(newFloatingTieredPrice: NewFloatingTieredPrice) =
                    Price(newFloatingTieredPrice = newFloatingTieredPrice)

                @JvmStatic
                fun ofNewFloatingTieredBpsPrice(
                    newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice
                ) = Price(newFloatingTieredBpsPrice = newFloatingTieredBpsPrice)

                @JvmStatic
                fun ofNewFloatingBpsPrice(newFloatingBpsPrice: NewFloatingBpsPrice) =
                    Price(newFloatingBpsPrice = newFloatingBpsPrice)

                @JvmStatic
                fun ofNewFloatingBulkBpsPrice(newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice) =
                    Price(newFloatingBulkBpsPrice = newFloatingBulkBpsPrice)

                @JvmStatic
                fun ofNewFloatingBulkPrice(newFloatingBulkPrice: NewFloatingBulkPrice) =
                    Price(newFloatingBulkPrice = newFloatingBulkPrice)

                @JvmStatic
                fun ofNewFloatingThresholdTotalAmountPrice(
                    newFloatingThresholdTotalAmountPrice: NewFloatingThresholdTotalAmountPrice
                ) =
                    Price(
                        newFloatingThresholdTotalAmountPrice = newFloatingThresholdTotalAmountPrice
                    )

                @JvmStatic
                fun ofNewFloatingTieredPackagePrice(
                    newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice
                ) = Price(newFloatingTieredPackagePrice = newFloatingTieredPackagePrice)

                @JvmStatic
                fun ofNewFloatingGroupedTieredPrice(
                    newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice
                ) = Price(newFloatingGroupedTieredPrice = newFloatingGroupedTieredPrice)

                @JvmStatic
                fun ofNewFloatingMaxGroupTieredPrice(
                    newFloatingMaxGroupTieredPrice: NewFloatingMaxGroupTieredPrice
                ) = Price(newFloatingMaxGroupTieredPrice = newFloatingMaxGroupTieredPrice)

                @JvmStatic
                fun ofNewFloatingTieredWithMinimumPrice(
                    newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice
                ) = Price(newFloatingTieredWithMinimumPrice = newFloatingTieredWithMinimumPrice)

                @JvmStatic
                fun ofNewFloatingPackageWithAllocationPrice(
                    newFloatingPackageWithAllocationPrice: NewFloatingPackageWithAllocationPrice
                ) =
                    Price(
                        newFloatingPackageWithAllocationPrice =
                            newFloatingPackageWithAllocationPrice
                    )

                @JvmStatic
                fun ofNewFloatingTieredPackageWithMinimumPrice(
                    newFloatingTieredPackageWithMinimumPrice:
                        NewFloatingTieredPackageWithMinimumPrice
                ) =
                    Price(
                        newFloatingTieredPackageWithMinimumPrice =
                            newFloatingTieredPackageWithMinimumPrice
                    )

                @JvmStatic
                fun ofNewFloatingUnitWithPercentPrice(
                    newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice
                ) = Price(newFloatingUnitWithPercentPrice = newFloatingUnitWithPercentPrice)

                @JvmStatic
                fun ofNewFloatingTieredWithProrationPrice(
                    newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice
                ) = Price(newFloatingTieredWithProrationPrice = newFloatingTieredWithProrationPrice)

                @JvmStatic
                fun ofNewFloatingUnitWithProrationPrice(
                    newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice
                ) = Price(newFloatingUnitWithProrationPrice = newFloatingUnitWithProrationPrice)

                @JvmStatic
                fun ofNewFloatingGroupedAllocationPrice(
                    newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice
                ) = Price(newFloatingGroupedAllocationPrice = newFloatingGroupedAllocationPrice)

                @JvmStatic
                fun ofNewFloatingGroupedWithProratedMinimumPrice(
                    newFloatingGroupedWithProratedMinimumPrice:
                        NewFloatingGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newFloatingGroupedWithProratedMinimumPrice =
                            newFloatingGroupedWithProratedMinimumPrice
                    )

                @JvmStatic
                fun ofNewFloatingGroupedWithMeteredMinimumPrice(
                    newFloatingGroupedWithMeteredMinimumPrice:
                        NewFloatingGroupedWithMeteredMinimumPrice
                ) =
                    Price(
                        newFloatingGroupedWithMeteredMinimumPrice =
                            newFloatingGroupedWithMeteredMinimumPrice
                    )

                @JvmStatic
                fun ofNewFloatingMatrixWithDisplayNamePrice(
                    newFloatingMatrixWithDisplayNamePrice: NewFloatingMatrixWithDisplayNamePrice
                ) =
                    Price(
                        newFloatingMatrixWithDisplayNamePrice =
                            newFloatingMatrixWithDisplayNamePrice
                    )

                @JvmStatic
                fun ofNewFloatingBulkWithProrationPrice(
                    newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice
                ) = Price(newFloatingBulkWithProrationPrice = newFloatingBulkWithProrationPrice)

                @JvmStatic
                fun ofNewFloatingGroupedTieredPackagePrice(
                    newFloatingGroupedTieredPackagePrice: NewFloatingGroupedTieredPackagePrice
                ) =
                    Price(
                        newFloatingGroupedTieredPackagePrice = newFloatingGroupedTieredPackagePrice
                    )
            }

            interface Visitor<out T> {

                fun visitNewFloatingUnitPrice(newFloatingUnitPrice: NewFloatingUnitPrice): T

                fun visitNewFloatingPackagePrice(
                    newFloatingPackagePrice: NewFloatingPackagePrice
                ): T

                fun visitNewFloatingMatrixPrice(newFloatingMatrixPrice: NewFloatingMatrixPrice): T

                fun visitNewFloatingMatrixWithAllocationPrice(
                    newFloatingMatrixWithAllocationPrice: NewFloatingMatrixWithAllocationPrice
                ): T

                fun visitNewFloatingTieredPrice(newFloatingTieredPrice: NewFloatingTieredPrice): T

                fun visitNewFloatingTieredBpsPrice(
                    newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice
                ): T

                fun visitNewFloatingBpsPrice(newFloatingBpsPrice: NewFloatingBpsPrice): T

                fun visitNewFloatingBulkBpsPrice(
                    newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice
                ): T

                fun visitNewFloatingBulkPrice(newFloatingBulkPrice: NewFloatingBulkPrice): T

                fun visitNewFloatingThresholdTotalAmountPrice(
                    newFloatingThresholdTotalAmountPrice: NewFloatingThresholdTotalAmountPrice
                ): T

                fun visitNewFloatingTieredPackagePrice(
                    newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice
                ): T

                fun visitNewFloatingGroupedTieredPrice(
                    newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice
                ): T

                fun visitNewFloatingMaxGroupTieredPrice(
                    newFloatingMaxGroupTieredPrice: NewFloatingMaxGroupTieredPrice
                ): T

                fun visitNewFloatingTieredWithMinimumPrice(
                    newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice
                ): T

                fun visitNewFloatingPackageWithAllocationPrice(
                    newFloatingPackageWithAllocationPrice: NewFloatingPackageWithAllocationPrice
                ): T

                fun visitNewFloatingTieredPackageWithMinimumPrice(
                    newFloatingTieredPackageWithMinimumPrice:
                        NewFloatingTieredPackageWithMinimumPrice
                ): T

                fun visitNewFloatingUnitWithPercentPrice(
                    newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice
                ): T

                fun visitNewFloatingTieredWithProrationPrice(
                    newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice
                ): T

                fun visitNewFloatingUnitWithProrationPrice(
                    newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice
                ): T

                fun visitNewFloatingGroupedAllocationPrice(
                    newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice
                ): T

                fun visitNewFloatingGroupedWithProratedMinimumPrice(
                    newFloatingGroupedWithProratedMinimumPrice:
                        NewFloatingGroupedWithProratedMinimumPrice
                ): T

                fun visitNewFloatingGroupedWithMeteredMinimumPrice(
                    newFloatingGroupedWithMeteredMinimumPrice:
                        NewFloatingGroupedWithMeteredMinimumPrice
                ): T

                fun visitNewFloatingMatrixWithDisplayNamePrice(
                    newFloatingMatrixWithDisplayNamePrice: NewFloatingMatrixWithDisplayNamePrice
                ): T

                fun visitNewFloatingBulkWithProrationPrice(
                    newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice
                ): T

                fun visitNewFloatingGroupedTieredPackagePrice(
                    newFloatingGroupedTieredPackagePrice: NewFloatingGroupedTieredPackagePrice
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingUnitPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingUnitPrice = it, _json = json)
                                }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingPackagePrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingPackagePrice = it, _json = json)
                                }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingMatrixPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingMatrixPrice = it, _json = json)
                                }
                        }
                        "matrix_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingMatrixWithAllocationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingMatrixWithAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingTieredPrice = it, _json = json)
                                }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingTieredBpsPrice = it, _json = json)
                                }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingBpsPrice = it, _json = json)
                                }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBulkBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingBulkBpsPrice = it, _json = json)
                                }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingBulkPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingBulkPrice = it, _json = json)
                                }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingThresholdTotalAmountPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingThresholdTotalAmountPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingTieredPackagePrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingTieredPackagePrice = it, _json = json)
                                }
                        }
                        "grouped_tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingGroupedTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingGroupedTieredPrice = it, _json = json)
                                }
                        }
                        "max_group_tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewFloatingMaxGroupTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingMaxGroupTieredPrice = it, _json = json)
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredWithMinimumPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingTieredWithMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingPackageWithAllocationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingPackageWithAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "tiered_package_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredPackageWithMinimumPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingTieredPackageWithMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingUnitWithPercentPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newFloatingUnitWithPercentPrice = it, _json = json)
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingTieredWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingTieredWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingUnitWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingUnitWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedAllocationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingGroupedAllocationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedWithProratedMinimumPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingGroupedWithProratedMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_with_metered_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedWithMeteredMinimumPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingGroupedWithMeteredMinimumPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "matrix_with_display_name" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingMatrixWithDisplayNamePrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingMatrixWithDisplayNamePrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingBulkWithProrationPrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingBulkWithProrationPrice = it,
                                        _json = json
                                    )
                                }
                        }
                        "grouped_tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewFloatingGroupedTieredPackagePrice>()
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newFloatingGroupedTieredPackagePrice = it,
                                        _json = json
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newFloatingUnitPrice != null ->
                            generator.writeObject(value.newFloatingUnitPrice)
                        value.newFloatingPackagePrice != null ->
                            generator.writeObject(value.newFloatingPackagePrice)
                        value.newFloatingMatrixPrice != null ->
                            generator.writeObject(value.newFloatingMatrixPrice)
                        value.newFloatingMatrixWithAllocationPrice != null ->
                            generator.writeObject(value.newFloatingMatrixWithAllocationPrice)
                        value.newFloatingTieredPrice != null ->
                            generator.writeObject(value.newFloatingTieredPrice)
                        value.newFloatingTieredBpsPrice != null ->
                            generator.writeObject(value.newFloatingTieredBpsPrice)
                        value.newFloatingBpsPrice != null ->
                            generator.writeObject(value.newFloatingBpsPrice)
                        value.newFloatingBulkBpsPrice != null ->
                            generator.writeObject(value.newFloatingBulkBpsPrice)
                        value.newFloatingBulkPrice != null ->
                            generator.writeObject(value.newFloatingBulkPrice)
                        value.newFloatingThresholdTotalAmountPrice != null ->
                            generator.writeObject(value.newFloatingThresholdTotalAmountPrice)
                        value.newFloatingTieredPackagePrice != null ->
                            generator.writeObject(value.newFloatingTieredPackagePrice)
                        value.newFloatingGroupedTieredPrice != null ->
                            generator.writeObject(value.newFloatingGroupedTieredPrice)
                        value.newFloatingMaxGroupTieredPrice != null ->
                            generator.writeObject(value.newFloatingMaxGroupTieredPrice)
                        value.newFloatingTieredWithMinimumPrice != null ->
                            generator.writeObject(value.newFloatingTieredWithMinimumPrice)
                        value.newFloatingPackageWithAllocationPrice != null ->
                            generator.writeObject(value.newFloatingPackageWithAllocationPrice)
                        value.newFloatingTieredPackageWithMinimumPrice != null ->
                            generator.writeObject(value.newFloatingTieredPackageWithMinimumPrice)
                        value.newFloatingUnitWithPercentPrice != null ->
                            generator.writeObject(value.newFloatingUnitWithPercentPrice)
                        value.newFloatingTieredWithProrationPrice != null ->
                            generator.writeObject(value.newFloatingTieredWithProrationPrice)
                        value.newFloatingUnitWithProrationPrice != null ->
                            generator.writeObject(value.newFloatingUnitWithProrationPrice)
                        value.newFloatingGroupedAllocationPrice != null ->
                            generator.writeObject(value.newFloatingGroupedAllocationPrice)
                        value.newFloatingGroupedWithProratedMinimumPrice != null ->
                            generator.writeObject(value.newFloatingGroupedWithProratedMinimumPrice)
                        value.newFloatingGroupedWithMeteredMinimumPrice != null ->
                            generator.writeObject(value.newFloatingGroupedWithMeteredMinimumPrice)
                        value.newFloatingMatrixWithDisplayNamePrice != null ->
                            generator.writeObject(value.newFloatingMatrixWithDisplayNamePrice)
                        value.newFloatingBulkWithProrationPrice != null ->
                            generator.writeObject(value.newFloatingBulkWithProrationPrice)
                        value.newFloatingGroupedTieredPackagePrice != null ->
                            generator.writeObject(value.newFloatingGroupedTieredPackagePrice)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @NoAutoDetect
            class NewFloatingUnitPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_config")
                @ExcludeMissing
                private val unitConfig: JsonField<UnitConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitConfig(): UnitConfig = unitConfig.getRequired("unit_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_config")
                @ExcludeMissing
                fun _unitConfig(): JsonField<UnitConfig> = unitConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingUnitPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    unitConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitConfig: JsonField<UnitConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingUnitPrice: NewFloatingUnitPrice) = apply {
                        cadence = newFloatingUnitPrice.cadence
                        currency = newFloatingUnitPrice.currency
                        itemId = newFloatingUnitPrice.itemId
                        modelType = newFloatingUnitPrice.modelType
                        name = newFloatingUnitPrice.name
                        unitConfig = newFloatingUnitPrice.unitConfig
                        billableMetricId = newFloatingUnitPrice.billableMetricId
                        billedInAdvance = newFloatingUnitPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingUnitPrice.billingCycleConfiguration
                        conversionRate = newFloatingUnitPrice.conversionRate
                        externalPriceId = newFloatingUnitPrice.externalPriceId
                        fixedPriceQuantity = newFloatingUnitPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingUnitPrice.invoicingCycleConfiguration
                        metadata = newFloatingUnitPrice.metadata
                        additionalProperties =
                            newFloatingUnitPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitConfig(unitConfig: UnitConfig) = unitConfig(JsonField.of(unitConfig))

                    fun unitConfig(unitConfig: JsonField<UnitConfig>) = apply {
                        this.unitConfig = unitConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitPrice =
                        NewFloatingUnitPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitConfig", unitConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT = of("unit")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT,
                    }

                    enum class Value {
                        UNIT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    private val unitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Rate per unit of usage */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /** Rate per unit of usage */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        unitAmount()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var unitAmount: JsonField<String>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            unitAmount = unitConfig.unitAmount
                            additionalProperties = unitConfig.additionalProperties.toMutableMap()
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitConfig =
                            UnitConfig(
                                checkRequired("unitAmount", unitAmount),
                                additionalProperties.toImmutable()
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitConfig == other.unitConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitConfig=$unitConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_config")
                @ExcludeMissing
                private val packageConfig: JsonField<PackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun packageConfig(): PackageConfig = packageConfig.getRequired("package_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("package_config")
                @ExcludeMissing
                fun _packageConfig(): JsonField<PackageConfig> = packageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    packageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var packageConfig: JsonField<PackageConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingPackagePrice: NewFloatingPackagePrice) = apply {
                        cadence = newFloatingPackagePrice.cadence
                        currency = newFloatingPackagePrice.currency
                        itemId = newFloatingPackagePrice.itemId
                        modelType = newFloatingPackagePrice.modelType
                        name = newFloatingPackagePrice.name
                        packageConfig = newFloatingPackagePrice.packageConfig
                        billableMetricId = newFloatingPackagePrice.billableMetricId
                        billedInAdvance = newFloatingPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingPackagePrice.billingCycleConfiguration
                        conversionRate = newFloatingPackagePrice.conversionRate
                        externalPriceId = newFloatingPackagePrice.externalPriceId
                        fixedPriceQuantity = newFloatingPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingPackagePrice.invoicingCycleConfiguration
                        metadata = newFloatingPackagePrice.metadata
                        additionalProperties =
                            newFloatingPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun packageConfig(packageConfig: PackageConfig) =
                        packageConfig(JsonField.of(packageConfig))

                    fun packageConfig(packageConfig: JsonField<PackageConfig>) = apply {
                        this.packageConfig = packageConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingPackagePrice =
                        NewFloatingPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("packageConfig", packageConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE = of("package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE,
                    }

                    enum class Value {
                        PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    private val packageAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    private val packageSize: JsonField<Long> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** A currency amount to rate usage by */
                    fun packageAmount(): String = packageAmount.getRequired("package_amount")

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    fun packageSize(): Long = packageSize.getRequired("package_size")

                    /** A currency amount to rate usage by */
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    fun _packageAmount(): JsonField<String> = packageAmount

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    fun _packageSize(): JsonField<Long> = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): PackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        packageAmount()
                        packageSize()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var packageAmount: JsonField<String>? = null
                        private var packageSize: JsonField<Long>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            packageAmount = packageConfig.packageAmount
                            packageSize = packageConfig.packageSize
                            additionalProperties = packageConfig.additionalProperties.toMutableMap()
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) =
                            packageAmount(JsonField.of(packageAmount))

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: JsonField<String>) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = packageSize(JsonField.of(packageSize))

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: JsonField<Long>) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageConfig =
                            PackageConfig(
                                checkRequired("packageAmount", packageAmount),
                                checkRequired("packageSize", packageSize),
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingPackagePrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && packageConfig == other.packageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, packageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingPackagePrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, packageConfig=$packageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_config")
                @ExcludeMissing
                private val matrixConfig: JsonField<MatrixConfig> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun matrixConfig(): MatrixConfig = matrixConfig.getRequired("matrix_config")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("matrix_config")
                @ExcludeMissing
                fun _matrixConfig(): JsonField<MatrixConfig> = matrixConfig

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingMatrixPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    matrixConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var matrixConfig: JsonField<MatrixConfig>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingMatrixPrice: NewFloatingMatrixPrice) = apply {
                        cadence = newFloatingMatrixPrice.cadence
                        currency = newFloatingMatrixPrice.currency
                        itemId = newFloatingMatrixPrice.itemId
                        matrixConfig = newFloatingMatrixPrice.matrixConfig
                        modelType = newFloatingMatrixPrice.modelType
                        name = newFloatingMatrixPrice.name
                        billableMetricId = newFloatingMatrixPrice.billableMetricId
                        billedInAdvance = newFloatingMatrixPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingMatrixPrice.billingCycleConfiguration
                        conversionRate = newFloatingMatrixPrice.conversionRate
                        externalPriceId = newFloatingMatrixPrice.externalPriceId
                        fixedPriceQuantity = newFloatingMatrixPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingMatrixPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingMatrixPrice.invoicingCycleConfiguration
                        metadata = newFloatingMatrixPrice.metadata
                        additionalProperties =
                            newFloatingMatrixPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun matrixConfig(matrixConfig: MatrixConfig) =
                        matrixConfig(JsonField.of(matrixConfig))

                    fun matrixConfig(matrixConfig: JsonField<MatrixConfig>) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixPrice =
                        NewFloatingMatrixPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("matrixConfig", matrixConfig),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    private val defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    private val dimensions: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    private val matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    fun defaultUnitAmount(): String =
                        defaultUnitAmount.getRequired("default_unit_amount")

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(): List<MatrixValue> =
                        matrixValues.getRequired("matrix_values")

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    fun _dimensions(): JsonField<List<String?>> = dimensions

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        defaultUnitAmount()
                        dimensions()
                        matrixValues().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var defaultUnitAmount: JsonField<String>? = null
                        private var dimensions: JsonField<MutableList<String?>>? = null
                        private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            defaultUnitAmount = matrixConfig.defaultUnitAmount
                            dimensions = matrixConfig.dimensions.map { it.toMutableList() }
                            matrixValues = matrixConfig.matrixValues.map { it.toMutableList() }
                            additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) =
                            defaultUnitAmount(JsonField.of(defaultUnitAmount))

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) =
                            dimensions(JsonField.of(dimensions))

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                            this.dimensions = dimensions.map { it.toMutableList() }
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun addDimension(dimension: String) = apply {
                            dimensions =
                                (dimensions ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(dimension)
                                }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) =
                            matrixValues(JsonField.of(matrixValues))

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                            this.matrixValues = matrixValues.map { it.toMutableList() }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun addMatrixValue(matrixValue: MatrixValue) = apply {
                            matrixValues =
                                (matrixValues ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(matrixValue)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                checkRequired("defaultUnitAmount", defaultUnitAmount),
                                checkRequired("dimensions", dimensions).map { it.toImmutable() },
                                checkRequired("matrixValues", matrixValues).map {
                                    it.toImmutable()
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        private val dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        fun dimensionValues(): List<String?> =
                            dimensionValues.getRequired("dimension_values")

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): MatrixValue = apply {
                            if (validated) {
                                return@apply
                            }

                            dimensionValues()
                            unitAmount()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var dimensionValues: JsonField<MutableList<String?>>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                dimensionValues =
                                    matrixValue.dimensionValues.map { it.toMutableList() }
                                unitAmount = matrixValue.unitAmount
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) =
                                dimensionValues(JsonField.of(dimensionValues))

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                                this.dimensionValues = dimensionValues.map { it.toMutableList() }
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun addDimensionValue(dimensionValue: String) = apply {
                                dimensionValues =
                                    (dimensionValues ?: JsonField.of(mutableListOf())).apply {
                                        asKnown()
                                            .orElseThrow {
                                                IllegalStateException(
                                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                                )
                                            }
                                            .add(dimensionValue)
                                    }
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkRequired("dimensionValues", dimensionValues).map {
                                        it.toImmutable()
                                    },
                                    checkRequired("unitAmount", unitAmount),
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixConfig{defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX = of("matrix")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX,
                    }

                    enum class Value {
                        MATRIX,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixConfig == other.matrixConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixPrice{cadence=$cadence, currency=$currency, itemId=$itemId, matrixConfig=$matrixConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_with_allocation_config")
                @ExcludeMissing
                private val matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun matrixWithAllocationConfig(): MatrixWithAllocationConfig =
                    matrixWithAllocationConfig.getRequired("matrix_with_allocation_config")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("matrix_with_allocation_config")
                @ExcludeMissing
                fun _matrixWithAllocationConfig(): JsonField<MatrixWithAllocationConfig> =
                    matrixWithAllocationConfig

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingMatrixWithAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    matrixWithAllocationConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig>? =
                        null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingMatrixWithAllocationPrice: NewFloatingMatrixWithAllocationPrice
                    ) = apply {
                        cadence = newFloatingMatrixWithAllocationPrice.cadence
                        currency = newFloatingMatrixWithAllocationPrice.currency
                        itemId = newFloatingMatrixWithAllocationPrice.itemId
                        matrixWithAllocationConfig =
                            newFloatingMatrixWithAllocationPrice.matrixWithAllocationConfig
                        modelType = newFloatingMatrixWithAllocationPrice.modelType
                        name = newFloatingMatrixWithAllocationPrice.name
                        billableMetricId = newFloatingMatrixWithAllocationPrice.billableMetricId
                        billedInAdvance = newFloatingMatrixWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingMatrixWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newFloatingMatrixWithAllocationPrice.conversionRate
                        externalPriceId = newFloatingMatrixWithAllocationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingMatrixWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingMatrixWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingMatrixWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newFloatingMatrixWithAllocationPrice.metadata
                        additionalProperties =
                            newFloatingMatrixWithAllocationPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun matrixWithAllocationConfig(
                        matrixWithAllocationConfig: MatrixWithAllocationConfig
                    ) = matrixWithAllocationConfig(JsonField.of(matrixWithAllocationConfig))

                    fun matrixWithAllocationConfig(
                        matrixWithAllocationConfig: JsonField<MatrixWithAllocationConfig>
                    ) = apply { this.matrixWithAllocationConfig = matrixWithAllocationConfig }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixWithAllocationPrice =
                        NewFloatingMatrixWithAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("matrixWithAllocationConfig", matrixWithAllocationConfig),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("allocation")
                    @ExcludeMissing
                    private val allocation: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    private val defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    private val dimensions: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    private val matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Allocation to be used to calculate the price */
                    fun allocation(): Double = allocation.getRequired("allocation")

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    fun defaultUnitAmount(): String =
                        defaultUnitAmount.getRequired("default_unit_amount")

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(): List<MatrixValue> =
                        matrixValues.getRequired("matrix_values")

                    /** Allocation to be used to calculate the price */
                    @JsonProperty("allocation")
                    @ExcludeMissing
                    fun _allocation(): JsonField<Double> = allocation

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    fun _dimensions(): JsonField<List<String?>> = dimensions

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixWithAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        allocation()
                        defaultUnitAmount()
                        dimensions()
                        matrixValues().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var allocation: JsonField<Double>? = null
                        private var defaultUnitAmount: JsonField<String>? = null
                        private var dimensions: JsonField<MutableList<String?>>? = null
                        private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixWithAllocationConfig: MatrixWithAllocationConfig) =
                            apply {
                                allocation = matrixWithAllocationConfig.allocation
                                defaultUnitAmount = matrixWithAllocationConfig.defaultUnitAmount
                                dimensions =
                                    matrixWithAllocationConfig.dimensions.map { it.toMutableList() }
                                matrixValues =
                                    matrixWithAllocationConfig.matrixValues.map {
                                        it.toMutableList()
                                    }
                                additionalProperties =
                                    matrixWithAllocationConfig.additionalProperties.toMutableMap()
                            }

                        /** Allocation to be used to calculate the price */
                        fun allocation(allocation: Double) = allocation(JsonField.of(allocation))

                        /** Allocation to be used to calculate the price */
                        fun allocation(allocation: JsonField<Double>) = apply {
                            this.allocation = allocation
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) =
                            defaultUnitAmount(JsonField.of(defaultUnitAmount))

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) =
                            dimensions(JsonField.of(dimensions))

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                            this.dimensions = dimensions.map { it.toMutableList() }
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun addDimension(dimension: String) = apply {
                            dimensions =
                                (dimensions ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(dimension)
                                }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) =
                            matrixValues(JsonField.of(matrixValues))

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                            this.matrixValues = matrixValues.map { it.toMutableList() }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun addMatrixValue(matrixValue: MatrixValue) = apply {
                            matrixValues =
                                (matrixValues ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(matrixValue)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixWithAllocationConfig =
                            MatrixWithAllocationConfig(
                                checkRequired("allocation", allocation),
                                checkRequired("defaultUnitAmount", defaultUnitAmount),
                                checkRequired("dimensions", dimensions).map { it.toImmutable() },
                                checkRequired("matrixValues", matrixValues).map {
                                    it.toImmutable()
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        private val dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        fun dimensionValues(): List<String?> =
                            dimensionValues.getRequired("dimension_values")

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): MatrixValue = apply {
                            if (validated) {
                                return@apply
                            }

                            dimensionValues()
                            unitAmount()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var dimensionValues: JsonField<MutableList<String?>>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                dimensionValues =
                                    matrixValue.dimensionValues.map { it.toMutableList() }
                                unitAmount = matrixValue.unitAmount
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) =
                                dimensionValues(JsonField.of(dimensionValues))

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                                this.dimensionValues = dimensionValues.map { it.toMutableList() }
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun addDimensionValue(dimensionValue: String) = apply {
                                dimensionValues =
                                    (dimensionValues ?: JsonField.of(mutableListOf())).apply {
                                        asKnown()
                                            .orElseThrow {
                                                IllegalStateException(
                                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                                )
                                            }
                                            .add(dimensionValue)
                                    }
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkRequired("dimensionValues", dimensionValues).map {
                                        it.toImmutable()
                                    },
                                    checkRequired("unitAmount", unitAmount),
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixWithAllocationConfig && allocation == other.allocation && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(allocation, defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixWithAllocationConfig{allocation=$allocation, defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX_WITH_ALLOCATION = of("matrix_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX_WITH_ALLOCATION,
                    }

                    enum class Value {
                        MATRIX_WITH_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX_WITH_ALLOCATION -> Value.MATRIX_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX_WITH_ALLOCATION -> Known.MATRIX_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixWithAllocationPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixWithAllocationConfig == other.matrixWithAllocationConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixWithAllocationConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixWithAllocationPrice{cadence=$cadence, currency=$currency, itemId=$itemId, matrixWithAllocationConfig=$matrixWithAllocationConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_config")
                @ExcludeMissing
                private val tieredConfig: JsonField<TieredConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredConfig(): TieredConfig = tieredConfig.getRequired("tiered_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_config")
                @ExcludeMissing
                fun _tieredConfig(): JsonField<TieredConfig> = tieredConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredConfig: JsonField<TieredConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingTieredPrice: NewFloatingTieredPrice) = apply {
                        cadence = newFloatingTieredPrice.cadence
                        currency = newFloatingTieredPrice.currency
                        itemId = newFloatingTieredPrice.itemId
                        modelType = newFloatingTieredPrice.modelType
                        name = newFloatingTieredPrice.name
                        tieredConfig = newFloatingTieredPrice.tieredConfig
                        billableMetricId = newFloatingTieredPrice.billableMetricId
                        billedInAdvance = newFloatingTieredPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingTieredPrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredPrice.conversionRate
                        externalPriceId = newFloatingTieredPrice.externalPriceId
                        fixedPriceQuantity = newFloatingTieredPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredPrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredPrice.metadata
                        additionalProperties =
                            newFloatingTieredPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredConfig(tieredConfig: TieredConfig) =
                        tieredConfig(JsonField.of(tieredConfig))

                    fun tieredConfig(tieredConfig: JsonField<TieredConfig>) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPrice =
                        NewFloatingTieredPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredConfig", tieredConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED = of("tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED,
                    }

                    enum class Value {
                        TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            tiers = tieredConfig.tiers.map { it.toMutableList() }
                            additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredConfig =
                            TieredConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        private val firstUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        private val lastUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Inclusive tier starting value */
                        fun firstUnit(): Double = firstUnit.getRequired("first_unit")

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        fun lastUnit(): Optional<Double> =
                            Optional.ofNullable(lastUnit.getNullable("last_unit"))

                        /** Inclusive tier starting value */
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        fun _firstUnit(): JsonField<Double> = firstUnit

                        /** Amount per unit */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        fun _lastUnit(): JsonField<Double> = lastUnit

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            firstUnit()
                            unitAmount()
                            lastUnit()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var firstUnit: JsonField<Double>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var lastUnit: JsonField<Double> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                firstUnit = tier.firstUnit
                                unitAmount = tier.unitAmount
                                lastUnit = tier.lastUnit
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = firstUnit(JsonField.of(firstUnit))

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: JsonField<Double>) = apply {
                                this.firstUnit = firstUnit
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double?) =
                                lastUnit(JsonField.ofNullable(lastUnit))

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double) = lastUnit(lastUnit as Double?)

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun lastUnit(lastUnit: Optional<Double>) =
                                lastUnit(lastUnit.orElse(null) as Double?)

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: JsonField<Double>) = apply {
                                this.lastUnit = lastUnit
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("firstUnit", firstUnit),
                                    checkRequired("unitAmount", unitAmount),
                                    lastUnit,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && unitAmount == other.unitAmount && lastUnit == other.lastUnit && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(firstUnit, unitAmount, lastUnit, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, unitAmount=$unitAmount, lastUnit=$lastUnit, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredConfig == other.tieredConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredConfig=$tieredConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                private val tieredBpsConfig: JsonField<TieredBpsConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredBpsConfig(): TieredBpsConfig =
                    tieredBpsConfig.getRequired("tiered_bps_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                fun _tieredBpsConfig(): JsonField<TieredBpsConfig> = tieredBpsConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredBpsConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredBpsConfig: JsonField<TieredBpsConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingTieredBpsPrice: NewFloatingTieredBpsPrice) =
                        apply {
                            cadence = newFloatingTieredBpsPrice.cadence
                            currency = newFloatingTieredBpsPrice.currency
                            itemId = newFloatingTieredBpsPrice.itemId
                            modelType = newFloatingTieredBpsPrice.modelType
                            name = newFloatingTieredBpsPrice.name
                            tieredBpsConfig = newFloatingTieredBpsPrice.tieredBpsConfig
                            billableMetricId = newFloatingTieredBpsPrice.billableMetricId
                            billedInAdvance = newFloatingTieredBpsPrice.billedInAdvance
                            billingCycleConfiguration =
                                newFloatingTieredBpsPrice.billingCycleConfiguration
                            conversionRate = newFloatingTieredBpsPrice.conversionRate
                            externalPriceId = newFloatingTieredBpsPrice.externalPriceId
                            fixedPriceQuantity = newFloatingTieredBpsPrice.fixedPriceQuantity
                            invoiceGroupingKey = newFloatingTieredBpsPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newFloatingTieredBpsPrice.invoicingCycleConfiguration
                            metadata = newFloatingTieredBpsPrice.metadata
                            additionalProperties =
                                newFloatingTieredBpsPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) =
                        tieredBpsConfig(JsonField.of(tieredBpsConfig))

                    fun tieredBpsConfig(tieredBpsConfig: JsonField<TieredBpsConfig>) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredBpsPrice =
                        NewFloatingTieredBpsPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredBpsConfig", tieredBpsConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_BPS = of("tiered_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_BPS,
                    }

                    enum class Value {
                        TIERED_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredBpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            tiers = tieredBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties =
                                tieredBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        private val bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        private val minimumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        private val maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Per-event basis point rate */
                        fun bps(): Double = bps.getRequired("bps")

                        /** Inclusive tier starting value */
                        fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                        /** Exclusive tier ending value */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Per-event basis point rate */
                        @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                        /** Inclusive tier starting value */
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        fun _minimumAmount(): JsonField<String> = minimumAmount

                        /** Exclusive tier ending value */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount(): JsonField<String> = maximumAmount

                        /** Per unit maximum to charge */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            bps()
                            minimumAmount()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var bps: JsonField<Double>? = null
                            private var minimumAmount: JsonField<String>? = null
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                minimumAmount = tier.minimumAmount
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Per-event basis point rate */
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) =
                                minimumAmount(JsonField.of(minimumAmount))

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String?) =
                                maximumAmount(JsonField.ofNullable(maximumAmount))

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String?) =
                                perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("bps", bps),
                                    checkRequired("minimumAmount", minimumAmount),
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, minimumAmount, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredBpsPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredBpsConfig == other.tieredBpsConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredBpsConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredBpsPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredBpsConfig=$tieredBpsConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bps_config")
                @ExcludeMissing
                private val bpsConfig: JsonField<BpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bpsConfig(): BpsConfig = bpsConfig.getRequired("bps_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                @JsonProperty("bps_config")
                @ExcludeMissing
                fun _bpsConfig(): JsonField<BpsConfig> = bpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bpsConfig().validate()
                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bpsConfig: JsonField<BpsConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBpsPrice: NewFloatingBpsPrice) = apply {
                        bpsConfig = newFloatingBpsPrice.bpsConfig
                        cadence = newFloatingBpsPrice.cadence
                        currency = newFloatingBpsPrice.currency
                        itemId = newFloatingBpsPrice.itemId
                        modelType = newFloatingBpsPrice.modelType
                        name = newFloatingBpsPrice.name
                        billableMetricId = newFloatingBpsPrice.billableMetricId
                        billedInAdvance = newFloatingBpsPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingBpsPrice.billingCycleConfiguration
                        conversionRate = newFloatingBpsPrice.conversionRate
                        externalPriceId = newFloatingBpsPrice.externalPriceId
                        fixedPriceQuantity = newFloatingBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingBpsPrice.invoicingCycleConfiguration
                        metadata = newFloatingBpsPrice.metadata
                        additionalProperties =
                            newFloatingBpsPrice.additionalProperties.toMutableMap()
                    }

                    fun bpsConfig(bpsConfig: BpsConfig) = bpsConfig(JsonField.of(bpsConfig))

                    fun bpsConfig(bpsConfig: JsonField<BpsConfig>) = apply {
                        this.bpsConfig = bpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBpsPrice =
                        NewFloatingBpsPrice(
                            checkRequired("bpsConfig", bpsConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("bps")
                    @ExcludeMissing
                    private val bps: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Basis point take rate per event */
                    fun bps(): Double = bps.getRequired("bps")

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(): Optional<String> =
                        Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                    /** Basis point take rate per event */
                    @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                    /** Optional currency amount maximum to cap spend per event */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        bps()
                        perUnitMaximum()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var bps: JsonField<Double>? = null
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            bps = bpsConfig.bps
                            perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /** Basis point take rate per event */
                        fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String?) =
                            perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                            perUnitMaximum(perUnitMaximum.orElse(null))

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BpsConfig =
                            BpsConfig(
                                checkRequired("bps", bps),
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BPS = of("bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BPS,
                    }

                    enum class Value {
                        BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBpsPrice && bpsConfig == other.bpsConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bpsConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBpsPrice{bpsConfig=$bpsConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                private val bulkBpsConfig: JsonField<BulkBpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig.getRequired("bulk_bps_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                fun _bulkBpsConfig(): JsonField<BulkBpsConfig> = bulkBpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingBulkBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkBpsConfig().validate()
                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkBpsConfig: JsonField<BulkBpsConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBulkBpsPrice: NewFloatingBulkBpsPrice) = apply {
                        bulkBpsConfig = newFloatingBulkBpsPrice.bulkBpsConfig
                        cadence = newFloatingBulkBpsPrice.cadence
                        currency = newFloatingBulkBpsPrice.currency
                        itemId = newFloatingBulkBpsPrice.itemId
                        modelType = newFloatingBulkBpsPrice.modelType
                        name = newFloatingBulkBpsPrice.name
                        billableMetricId = newFloatingBulkBpsPrice.billableMetricId
                        billedInAdvance = newFloatingBulkBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingBulkBpsPrice.billingCycleConfiguration
                        conversionRate = newFloatingBulkBpsPrice.conversionRate
                        externalPriceId = newFloatingBulkBpsPrice.externalPriceId
                        fixedPriceQuantity = newFloatingBulkBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingBulkBpsPrice.invoicingCycleConfiguration
                        metadata = newFloatingBulkBpsPrice.metadata
                        additionalProperties =
                            newFloatingBulkBpsPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) =
                        bulkBpsConfig(JsonField.of(bulkBpsConfig))

                    fun bulkBpsConfig(bulkBpsConfig: JsonField<BulkBpsConfig>) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkBpsPrice =
                        NewFloatingBulkBpsPrice(
                            checkRequired("bulkBpsConfig", bulkBpsConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkBpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            tiers = bulkBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        private val bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        private val maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Basis points to rate on */
                        fun bps(): Double = bps.getRequired("bps")

                        /** Upper bound for tier */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Basis points to rate on */
                        @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                        /** Upper bound for tier */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount(): JsonField<String> = maximumAmount

                        /** The maximum amount to charge for any one event */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            bps()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var bps: JsonField<Double>? = null
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Basis points to rate on */
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String?) =
                                maximumAmount(JsonField.ofNullable(maximumAmount))

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String?) =
                                perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("bps", bps),
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_BPS = of("bulk_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_BPS,
                    }

                    enum class Value {
                        BULK_BPS,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkBpsPrice && bulkBpsConfig == other.bulkBpsConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkBpsConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkBpsPrice{bulkBpsConfig=$bulkBpsConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_config")
                @ExcludeMissing
                private val bulkConfig: JsonField<BulkConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkConfig(): BulkConfig = bulkConfig.getRequired("bulk_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                @JsonProperty("bulk_config")
                @ExcludeMissing
                fun _bulkConfig(): JsonField<BulkConfig> = bulkConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingBulkPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkConfig().validate()
                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkConfig: JsonField<BulkConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newFloatingBulkPrice: NewFloatingBulkPrice) = apply {
                        bulkConfig = newFloatingBulkPrice.bulkConfig
                        cadence = newFloatingBulkPrice.cadence
                        currency = newFloatingBulkPrice.currency
                        itemId = newFloatingBulkPrice.itemId
                        modelType = newFloatingBulkPrice.modelType
                        name = newFloatingBulkPrice.name
                        billableMetricId = newFloatingBulkPrice.billableMetricId
                        billedInAdvance = newFloatingBulkPrice.billedInAdvance
                        billingCycleConfiguration = newFloatingBulkPrice.billingCycleConfiguration
                        conversionRate = newFloatingBulkPrice.conversionRate
                        externalPriceId = newFloatingBulkPrice.externalPriceId
                        fixedPriceQuantity = newFloatingBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingBulkPrice.invoicingCycleConfiguration
                        metadata = newFloatingBulkPrice.metadata
                        additionalProperties =
                            newFloatingBulkPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkConfig(bulkConfig: BulkConfig) = bulkConfig(JsonField.of(bulkConfig))

                    fun bulkConfig(bulkConfig: JsonField<BulkConfig>) = apply {
                        this.bulkConfig = bulkConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkPrice =
                        NewFloatingBulkPrice(
                            checkRequired("bulkConfig", bulkConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Bulk tiers for rating based on total usage volume */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Bulk tiers for rating based on total usage volume */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            tiers = bulkConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkConfig =
                            BulkConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable()
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        private val maximumUnits: JsonField<Double> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /** Upper bound for this tier */
                        fun maximumUnits(): Optional<Double> =
                            Optional.ofNullable(maximumUnits.getNullable("maximum_units"))

                        /** Amount per unit */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        /** Upper bound for this tier */
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        fun _maximumUnits(): JsonField<Double> = maximumUnits

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            unitAmount()
                            maximumUnits()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        class Builder {

                            private var unitAmount: JsonField<String>? = null
                            private var maximumUnits: JsonField<Double> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                unitAmount = tier.unitAmount
                                maximumUnits = tier.maximumUnits
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double?) =
                                maximumUnits(JsonField.ofNullable(maximumUnits))

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double) =
                                maximumUnits(maximumUnits as Double?)

                            /** Upper bound for this tier */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun maximumUnits(maximumUnits: Optional<Double>) =
                                maximumUnits(maximumUnits.orElse(null) as Double?)

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: JsonField<Double>) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("unitAmount", unitAmount),
                                    maximumUnits,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && unitAmount == other.unitAmount && maximumUnits == other.maximumUnits && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(unitAmount, maximumUnits, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{unitAmount=$unitAmount, maximumUnits=$maximumUnits, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK = of("bulk")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK,
                    }

                    enum class Value {
                        BULK,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkPrice && bulkConfig == other.bulkConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkPrice{bulkConfig=$bulkConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingThresholdTotalAmountPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                private val thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig.getRequired("threshold_total_amount_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                fun _thresholdTotalAmountConfig(): JsonField<ThresholdTotalAmountConfig> =
                    thresholdTotalAmountConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingThresholdTotalAmountPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    thresholdTotalAmountConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingThresholdTotalAmountPrice: NewFloatingThresholdTotalAmountPrice
                    ) = apply {
                        cadence = newFloatingThresholdTotalAmountPrice.cadence
                        currency = newFloatingThresholdTotalAmountPrice.currency
                        itemId = newFloatingThresholdTotalAmountPrice.itemId
                        modelType = newFloatingThresholdTotalAmountPrice.modelType
                        name = newFloatingThresholdTotalAmountPrice.name
                        thresholdTotalAmountConfig =
                            newFloatingThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        billableMetricId = newFloatingThresholdTotalAmountPrice.billableMetricId
                        billedInAdvance = newFloatingThresholdTotalAmountPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingThresholdTotalAmountPrice.billingCycleConfiguration
                        conversionRate = newFloatingThresholdTotalAmountPrice.conversionRate
                        externalPriceId = newFloatingThresholdTotalAmountPrice.externalPriceId
                        fixedPriceQuantity = newFloatingThresholdTotalAmountPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingThresholdTotalAmountPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingThresholdTotalAmountPrice.invoicingCycleConfiguration
                        metadata = newFloatingThresholdTotalAmountPrice.metadata
                        additionalProperties =
                            newFloatingThresholdTotalAmountPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = thresholdTotalAmountConfig(JsonField.of(thresholdTotalAmountConfig))

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingThresholdTotalAmountPrice =
                        NewFloatingThresholdTotalAmountPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("thresholdTotalAmountConfig", thresholdTotalAmountConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val THRESHOLD_TOTAL_AMOUNT = of("threshold_total_amount")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT,
                    }

                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ThresholdTotalAmountConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): ThresholdTotalAmountConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties =
                                    thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingThresholdTotalAmountPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, thresholdTotalAmountConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingThresholdTotalAmountPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                private val tieredPackageConfig: JsonField<TieredPackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredPackageConfig(): TieredPackageConfig =
                    tieredPackageConfig.getRequired("tiered_package_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                fun _tieredPackageConfig(): JsonField<TieredPackageConfig> = tieredPackageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredPackageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredPackageConfig: JsonField<TieredPackageConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredPackagePrice: NewFloatingTieredPackagePrice
                    ) = apply {
                        cadence = newFloatingTieredPackagePrice.cadence
                        currency = newFloatingTieredPackagePrice.currency
                        itemId = newFloatingTieredPackagePrice.itemId
                        modelType = newFloatingTieredPackagePrice.modelType
                        name = newFloatingTieredPackagePrice.name
                        tieredPackageConfig = newFloatingTieredPackagePrice.tieredPackageConfig
                        billableMetricId = newFloatingTieredPackagePrice.billableMetricId
                        billedInAdvance = newFloatingTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredPackagePrice.conversionRate
                        externalPriceId = newFloatingTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newFloatingTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredPackagePrice.metadata
                        additionalProperties =
                            newFloatingTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) =
                        tieredPackageConfig(JsonField.of(tieredPackageConfig))

                    fun tieredPackageConfig(tieredPackageConfig: JsonField<TieredPackageConfig>) =
                        apply {
                            this.tieredPackageConfig = tieredPackageConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPackagePrice =
                        NewFloatingTieredPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredPackageConfig", tieredPackageConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_PACKAGE = of("tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_PACKAGE,
                    }

                    enum class Value {
                        TIERED_PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredPackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties =
                                tieredPackageConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPackagePrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageConfig == other.tieredPackageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredPackageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPackagePrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageConfig=$tieredPackageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_tiered_config")
                @ExcludeMissing
                private val groupedTieredConfig: JsonField<GroupedTieredConfig> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                fun groupedTieredConfig(): GroupedTieredConfig =
                    groupedTieredConfig.getRequired("grouped_tiered_config")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                @JsonProperty("grouped_tiered_config")
                @ExcludeMissing
                fun _groupedTieredConfig(): JsonField<GroupedTieredConfig> = groupedTieredConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedTieredPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedTieredConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedTieredConfig: JsonField<GroupedTieredConfig>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedTieredPrice: NewFloatingGroupedTieredPrice
                    ) = apply {
                        cadence = newFloatingGroupedTieredPrice.cadence
                        currency = newFloatingGroupedTieredPrice.currency
                        groupedTieredConfig = newFloatingGroupedTieredPrice.groupedTieredConfig
                        itemId = newFloatingGroupedTieredPrice.itemId
                        modelType = newFloatingGroupedTieredPrice.modelType
                        name = newFloatingGroupedTieredPrice.name
                        billableMetricId = newFloatingGroupedTieredPrice.billableMetricId
                        billedInAdvance = newFloatingGroupedTieredPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedTieredPrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedTieredPrice.conversionRate
                        externalPriceId = newFloatingGroupedTieredPrice.externalPriceId
                        fixedPriceQuantity = newFloatingGroupedTieredPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedTieredPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedTieredPrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedTieredPrice.metadata
                        additionalProperties =
                            newFloatingGroupedTieredPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedTieredConfig(groupedTieredConfig: GroupedTieredConfig) =
                        groupedTieredConfig(JsonField.of(groupedTieredConfig))

                    fun groupedTieredConfig(groupedTieredConfig: JsonField<GroupedTieredConfig>) =
                        apply {
                            this.groupedTieredConfig = groupedTieredConfig
                        }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedTieredPrice =
                        NewFloatingGroupedTieredPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("groupedTieredConfig", groupedTieredConfig),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedTieredConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedTieredConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedTieredConfig: GroupedTieredConfig) = apply {
                            additionalProperties =
                                groupedTieredConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedTieredConfig =
                            GroupedTieredConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedTieredConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedTieredConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_TIERED = of("grouped_tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_TIERED,
                    }

                    enum class Value {
                        GROUPED_TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_TIERED -> Value.GROUPED_TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_TIERED -> Known.GROUPED_TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedTieredPrice && cadence == other.cadence && currency == other.currency && groupedTieredConfig == other.groupedTieredConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedTieredConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedTieredPrice{cadence=$cadence, currency=$currency, groupedTieredConfig=$groupedTieredConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMaxGroupTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("max_group_tiered_config")
                @ExcludeMissing
                private val maxGroupTieredConfig: JsonField<MaxGroupTieredConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun maxGroupTieredConfig(): MaxGroupTieredConfig =
                    maxGroupTieredConfig.getRequired("max_group_tiered_config")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("max_group_tiered_config")
                @ExcludeMissing
                fun _maxGroupTieredConfig(): JsonField<MaxGroupTieredConfig> = maxGroupTieredConfig

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingMaxGroupTieredPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    maxGroupTieredConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var maxGroupTieredConfig: JsonField<MaxGroupTieredConfig>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingMaxGroupTieredPrice: NewFloatingMaxGroupTieredPrice
                    ) = apply {
                        cadence = newFloatingMaxGroupTieredPrice.cadence
                        currency = newFloatingMaxGroupTieredPrice.currency
                        itemId = newFloatingMaxGroupTieredPrice.itemId
                        maxGroupTieredConfig = newFloatingMaxGroupTieredPrice.maxGroupTieredConfig
                        modelType = newFloatingMaxGroupTieredPrice.modelType
                        name = newFloatingMaxGroupTieredPrice.name
                        billableMetricId = newFloatingMaxGroupTieredPrice.billableMetricId
                        billedInAdvance = newFloatingMaxGroupTieredPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingMaxGroupTieredPrice.billingCycleConfiguration
                        conversionRate = newFloatingMaxGroupTieredPrice.conversionRate
                        externalPriceId = newFloatingMaxGroupTieredPrice.externalPriceId
                        fixedPriceQuantity = newFloatingMaxGroupTieredPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingMaxGroupTieredPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingMaxGroupTieredPrice.invoicingCycleConfiguration
                        metadata = newFloatingMaxGroupTieredPrice.metadata
                        additionalProperties =
                            newFloatingMaxGroupTieredPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun maxGroupTieredConfig(maxGroupTieredConfig: MaxGroupTieredConfig) =
                        maxGroupTieredConfig(JsonField.of(maxGroupTieredConfig))

                    fun maxGroupTieredConfig(
                        maxGroupTieredConfig: JsonField<MaxGroupTieredConfig>
                    ) = apply { this.maxGroupTieredConfig = maxGroupTieredConfig }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMaxGroupTieredPrice =
                        NewFloatingMaxGroupTieredPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("maxGroupTieredConfig", maxGroupTieredConfig),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MaxGroupTieredConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MaxGroupTieredConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(maxGroupTieredConfig: MaxGroupTieredConfig) = apply {
                            additionalProperties =
                                maxGroupTieredConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MaxGroupTieredConfig =
                            MaxGroupTieredConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MaxGroupTieredConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MaxGroupTieredConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAX_GROUP_TIERED = of("max_group_tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MAX_GROUP_TIERED,
                    }

                    enum class Value {
                        MAX_GROUP_TIERED,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MAX_GROUP_TIERED -> Value.MAX_GROUP_TIERED
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MAX_GROUP_TIERED -> Known.MAX_GROUP_TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMaxGroupTieredPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && maxGroupTieredConfig == other.maxGroupTieredConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, maxGroupTieredConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMaxGroupTieredPrice{cadence=$cadence, currency=$currency, itemId=$itemId, maxGroupTieredConfig=$maxGroupTieredConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                private val tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredWithMinimumConfig(): TieredWithMinimumConfig =
                    tieredWithMinimumConfig.getRequired("tiered_with_minimum_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                fun _tieredWithMinimumConfig(): JsonField<TieredWithMinimumConfig> =
                    tieredWithMinimumConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredWithMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredWithMinimumConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredWithMinimumPrice: NewFloatingTieredWithMinimumPrice
                    ) = apply {
                        cadence = newFloatingTieredWithMinimumPrice.cadence
                        currency = newFloatingTieredWithMinimumPrice.currency
                        itemId = newFloatingTieredWithMinimumPrice.itemId
                        modelType = newFloatingTieredWithMinimumPrice.modelType
                        name = newFloatingTieredWithMinimumPrice.name
                        tieredWithMinimumConfig =
                            newFloatingTieredWithMinimumPrice.tieredWithMinimumConfig
                        billableMetricId = newFloatingTieredWithMinimumPrice.billableMetricId
                        billedInAdvance = newFloatingTieredWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingTieredWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredWithMinimumPrice.conversionRate
                        externalPriceId = newFloatingTieredWithMinimumPrice.externalPriceId
                        fixedPriceQuantity = newFloatingTieredWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredWithMinimumPrice.metadata
                        additionalProperties =
                            newFloatingTieredWithMinimumPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        tieredWithMinimumConfig(JsonField.of(tieredWithMinimumConfig))

                    fun tieredWithMinimumConfig(
                        tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>
                    ) = apply { this.tieredWithMinimumConfig = tieredWithMinimumConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredWithMinimumPrice =
                        NewFloatingTieredWithMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredWithMinimumConfig", tieredWithMinimumConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_MINIMUM = of("tiered_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_MINIMUM,
                    }

                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredWithMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithMinimumConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredWithMinimumPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithMinimumConfig == other.tieredWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredWithMinimumPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredWithMinimumConfig=$tieredWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingPackageWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                private val packageWithAllocationConfig: JsonField<PackageWithAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig.getRequired("package_with_allocation_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                fun _packageWithAllocationConfig(): JsonField<PackageWithAllocationConfig> =
                    packageWithAllocationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingPackageWithAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    packageWithAllocationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var packageWithAllocationConfig:
                        JsonField<PackageWithAllocationConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingPackageWithAllocationPrice: NewFloatingPackageWithAllocationPrice
                    ) = apply {
                        cadence = newFloatingPackageWithAllocationPrice.cadence
                        currency = newFloatingPackageWithAllocationPrice.currency
                        itemId = newFloatingPackageWithAllocationPrice.itemId
                        modelType = newFloatingPackageWithAllocationPrice.modelType
                        name = newFloatingPackageWithAllocationPrice.name
                        packageWithAllocationConfig =
                            newFloatingPackageWithAllocationPrice.packageWithAllocationConfig
                        billableMetricId = newFloatingPackageWithAllocationPrice.billableMetricId
                        billedInAdvance = newFloatingPackageWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingPackageWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newFloatingPackageWithAllocationPrice.conversionRate
                        externalPriceId = newFloatingPackageWithAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingPackageWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingPackageWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingPackageWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newFloatingPackageWithAllocationPrice.metadata
                        additionalProperties =
                            newFloatingPackageWithAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = packageWithAllocationConfig(JsonField.of(packageWithAllocationConfig))

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingPackageWithAllocationPrice =
                        NewFloatingPackageWithAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired(
                                "packageWithAllocationConfig",
                                packageWithAllocationConfig
                            ),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE_WITH_ALLOCATION = of("package_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        PACKAGE_WITH_ALLOCATION,
                    }

                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): PackageWithAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties =
                                packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingPackageWithAllocationPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && packageWithAllocationConfig == other.packageWithAllocationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, packageWithAllocationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingPackageWithAllocationPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, packageWithAllocationConfig=$packageWithAllocationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredPackageWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_package_with_minimum_config")
                @ExcludeMissing
                private val tieredPackageWithMinimumConfig:
                    JsonField<TieredPackageWithMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredPackageWithMinimumConfig(): TieredPackageWithMinimumConfig =
                    tieredPackageWithMinimumConfig.getRequired("tiered_package_with_minimum_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_package_with_minimum_config")
                @ExcludeMissing
                fun _tieredPackageWithMinimumConfig(): JsonField<TieredPackageWithMinimumConfig> =
                    tieredPackageWithMinimumConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredPackageWithMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredPackageWithMinimumConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredPackageWithMinimumConfig:
                        JsonField<TieredPackageWithMinimumConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredPackageWithMinimumPrice:
                            NewFloatingTieredPackageWithMinimumPrice
                    ) = apply {
                        cadence = newFloatingTieredPackageWithMinimumPrice.cadence
                        currency = newFloatingTieredPackageWithMinimumPrice.currency
                        itemId = newFloatingTieredPackageWithMinimumPrice.itemId
                        modelType = newFloatingTieredPackageWithMinimumPrice.modelType
                        name = newFloatingTieredPackageWithMinimumPrice.name
                        tieredPackageWithMinimumConfig =
                            newFloatingTieredPackageWithMinimumPrice.tieredPackageWithMinimumConfig
                        billableMetricId = newFloatingTieredPackageWithMinimumPrice.billableMetricId
                        billedInAdvance = newFloatingTieredPackageWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingTieredPackageWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredPackageWithMinimumPrice.conversionRate
                        externalPriceId = newFloatingTieredPackageWithMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingTieredPackageWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingTieredPackageWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredPackageWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredPackageWithMinimumPrice.metadata
                        additionalProperties =
                            newFloatingTieredPackageWithMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredPackageWithMinimumConfig(
                        tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig
                    ) = tieredPackageWithMinimumConfig(JsonField.of(tieredPackageWithMinimumConfig))

                    fun tieredPackageWithMinimumConfig(
                        tieredPackageWithMinimumConfig: JsonField<TieredPackageWithMinimumConfig>
                    ) = apply {
                        this.tieredPackageWithMinimumConfig = tieredPackageWithMinimumConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredPackageWithMinimumPrice =
                        NewFloatingTieredPackageWithMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired(
                                "tieredPackageWithMinimumConfig",
                                tieredPackageWithMinimumConfig
                            ),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val TIERED_PACKAGE_WITH_MINIMUM = of("tiered_package_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_PACKAGE_WITH_MINIMUM,
                    }

                    enum class Value {
                        TIERED_PACKAGE_WITH_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE_WITH_MINIMUM -> Value.TIERED_PACKAGE_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE_WITH_MINIMUM -> Known.TIERED_PACKAGE_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredPackageWithMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            tieredPackageWithMinimumConfig: TieredPackageWithMinimumConfig
                        ) = apply {
                            additionalProperties =
                                tieredPackageWithMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageWithMinimumConfig =
                            TieredPackageWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredPackageWithMinimumPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageWithMinimumConfig == other.tieredPackageWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredPackageWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredPackageWithMinimumPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageWithMinimumConfig=$tieredPackageWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingUnitWithPercentPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                private val unitWithPercentConfig: JsonField<UnitWithPercentConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitWithPercentConfig(): UnitWithPercentConfig =
                    unitWithPercentConfig.getRequired("unit_with_percent_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                fun _unitWithPercentConfig(): JsonField<UnitWithPercentConfig> =
                    unitWithPercentConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingUnitWithPercentPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    unitWithPercentConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitWithPercentConfig: JsonField<UnitWithPercentConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingUnitWithPercentPrice: NewFloatingUnitWithPercentPrice
                    ) = apply {
                        cadence = newFloatingUnitWithPercentPrice.cadence
                        currency = newFloatingUnitWithPercentPrice.currency
                        itemId = newFloatingUnitWithPercentPrice.itemId
                        modelType = newFloatingUnitWithPercentPrice.modelType
                        name = newFloatingUnitWithPercentPrice.name
                        unitWithPercentConfig =
                            newFloatingUnitWithPercentPrice.unitWithPercentConfig
                        billableMetricId = newFloatingUnitWithPercentPrice.billableMetricId
                        billedInAdvance = newFloatingUnitWithPercentPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingUnitWithPercentPrice.billingCycleConfiguration
                        conversionRate = newFloatingUnitWithPercentPrice.conversionRate
                        externalPriceId = newFloatingUnitWithPercentPrice.externalPriceId
                        fixedPriceQuantity = newFloatingUnitWithPercentPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitWithPercentPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingUnitWithPercentPrice.invoicingCycleConfiguration
                        metadata = newFloatingUnitWithPercentPrice.metadata
                        additionalProperties =
                            newFloatingUnitWithPercentPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        unitWithPercentConfig(JsonField.of(unitWithPercentConfig))

                    fun unitWithPercentConfig(
                        unitWithPercentConfig: JsonField<UnitWithPercentConfig>
                    ) = apply { this.unitWithPercentConfig = unitWithPercentConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitWithPercentPrice =
                        NewFloatingUnitWithPercentPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitWithPercentConfig", unitWithPercentConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PERCENT = of("unit_with_percent")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PERCENT,
                    }

                    enum class Value {
                        UNIT_WITH_PERCENT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithPercentConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitWithPercentConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties =
                                unitWithPercentConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitWithPercentPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithPercentConfig == other.unitWithPercentConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitWithPercentConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitWithPercentPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitWithPercentConfig=$unitWithPercentConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingTieredWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                private val tieredWithProrationConfig: JsonField<TieredWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig.getRequired("tiered_with_proration_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                fun _tieredWithProrationConfig(): JsonField<TieredWithProrationConfig> =
                    tieredWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingTieredWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    tieredWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredWithProrationConfig: JsonField<TieredWithProrationConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingTieredWithProrationPrice: NewFloatingTieredWithProrationPrice
                    ) = apply {
                        cadence = newFloatingTieredWithProrationPrice.cadence
                        currency = newFloatingTieredWithProrationPrice.currency
                        itemId = newFloatingTieredWithProrationPrice.itemId
                        modelType = newFloatingTieredWithProrationPrice.modelType
                        name = newFloatingTieredWithProrationPrice.name
                        tieredWithProrationConfig =
                            newFloatingTieredWithProrationPrice.tieredWithProrationConfig
                        billableMetricId = newFloatingTieredWithProrationPrice.billableMetricId
                        billedInAdvance = newFloatingTieredWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingTieredWithProrationPrice.billingCycleConfiguration
                        conversionRate = newFloatingTieredWithProrationPrice.conversionRate
                        externalPriceId = newFloatingTieredWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingTieredWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingTieredWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingTieredWithProrationPrice.invoicingCycleConfiguration
                        metadata = newFloatingTieredWithProrationPrice.metadata
                        additionalProperties =
                            newFloatingTieredWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = tieredWithProrationConfig(JsonField.of(tieredWithProrationConfig))

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: JsonField<TieredWithProrationConfig>
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingTieredWithProrationPrice =
                        NewFloatingTieredWithProrationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredWithProrationConfig", tieredWithProrationConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_PRORATION = of("tiered_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        TIERED_WITH_PRORATION,
                    }

                    enum class Value {
                        TIERED_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingTieredWithProrationPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithProrationConfig == other.tieredWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, tieredWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingTieredWithProrationPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, tieredWithProrationConfig=$tieredWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingUnitWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                private val unitWithProrationConfig: JsonField<UnitWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitWithProrationConfig(): UnitWithProrationConfig =
                    unitWithProrationConfig.getRequired("unit_with_proration_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                fun _unitWithProrationConfig(): JsonField<UnitWithProrationConfig> =
                    unitWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingUnitWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    unitWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitWithProrationConfig: JsonField<UnitWithProrationConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingUnitWithProrationPrice: NewFloatingUnitWithProrationPrice
                    ) = apply {
                        cadence = newFloatingUnitWithProrationPrice.cadence
                        currency = newFloatingUnitWithProrationPrice.currency
                        itemId = newFloatingUnitWithProrationPrice.itemId
                        modelType = newFloatingUnitWithProrationPrice.modelType
                        name = newFloatingUnitWithProrationPrice.name
                        unitWithProrationConfig =
                            newFloatingUnitWithProrationPrice.unitWithProrationConfig
                        billableMetricId = newFloatingUnitWithProrationPrice.billableMetricId
                        billedInAdvance = newFloatingUnitWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingUnitWithProrationPrice.billingCycleConfiguration
                        conversionRate = newFloatingUnitWithProrationPrice.conversionRate
                        externalPriceId = newFloatingUnitWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingUnitWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingUnitWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingUnitWithProrationPrice.invoicingCycleConfiguration
                        metadata = newFloatingUnitWithProrationPrice.metadata
                        additionalProperties =
                            newFloatingUnitWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        unitWithProrationConfig(JsonField.of(unitWithProrationConfig))

                    fun unitWithProrationConfig(
                        unitWithProrationConfig: JsonField<UnitWithProrationConfig>
                    ) = apply { this.unitWithProrationConfig = unitWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingUnitWithProrationPrice =
                        NewFloatingUnitWithProrationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitWithProrationConfig", unitWithProrationConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PRORATION = of("unit_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        UNIT_WITH_PRORATION,
                    }

                    enum class Value {
                        UNIT_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    unitWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingUnitWithProrationPrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithProrationConfig == other.unitWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, modelType, name, unitWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingUnitWithProrationPrice{cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, unitWithProrationConfig=$unitWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                private val groupedAllocationConfig: JsonField<GroupedAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                fun groupedAllocationConfig(): GroupedAllocationConfig =
                    groupedAllocationConfig.getRequired("grouped_allocation_config")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                fun _groupedAllocationConfig(): JsonField<GroupedAllocationConfig> =
                    groupedAllocationConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedAllocationConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedAllocationConfig: JsonField<GroupedAllocationConfig>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedAllocationPrice: NewFloatingGroupedAllocationPrice
                    ) = apply {
                        cadence = newFloatingGroupedAllocationPrice.cadence
                        currency = newFloatingGroupedAllocationPrice.currency
                        groupedAllocationConfig =
                            newFloatingGroupedAllocationPrice.groupedAllocationConfig
                        itemId = newFloatingGroupedAllocationPrice.itemId
                        modelType = newFloatingGroupedAllocationPrice.modelType
                        name = newFloatingGroupedAllocationPrice.name
                        billableMetricId = newFloatingGroupedAllocationPrice.billableMetricId
                        billedInAdvance = newFloatingGroupedAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedAllocationPrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedAllocationPrice.conversionRate
                        externalPriceId = newFloatingGroupedAllocationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingGroupedAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedAllocationPrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedAllocationPrice.metadata
                        additionalProperties =
                            newFloatingGroupedAllocationPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        groupedAllocationConfig(JsonField.of(groupedAllocationConfig))

                    fun groupedAllocationConfig(
                        groupedAllocationConfig: JsonField<GroupedAllocationConfig>
                    ) = apply { this.groupedAllocationConfig = groupedAllocationConfig }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedAllocationPrice =
                        NewFloatingGroupedAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("groupedAllocationConfig", groupedAllocationConfig),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties =
                                    groupedAllocationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_ALLOCATION = of("grouped_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_ALLOCATION,
                    }

                    enum class Value {
                        GROUPED_ALLOCATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedAllocationPrice && cadence == other.cadence && currency == other.currency && groupedAllocationConfig == other.groupedAllocationConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedAllocationConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedAllocationPrice{cadence=$cadence, currency=$currency, groupedAllocationConfig=$groupedAllocationConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedWithProratedMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                private val groupedWithProratedMinimumConfig:
                    JsonField<GroupedWithProratedMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig.getRequired(
                        "grouped_with_prorated_minimum_config"
                    )

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                fun _groupedWithProratedMinimumConfig():
                    JsonField<GroupedWithProratedMinimumConfig> = groupedWithProratedMinimumConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedWithProratedMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedWithProratedMinimumConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedWithProratedMinimumConfig:
                        JsonField<GroupedWithProratedMinimumConfig>? =
                        null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedWithProratedMinimumPrice:
                            NewFloatingGroupedWithProratedMinimumPrice
                    ) = apply {
                        cadence = newFloatingGroupedWithProratedMinimumPrice.cadence
                        currency = newFloatingGroupedWithProratedMinimumPrice.currency
                        groupedWithProratedMinimumConfig =
                            newFloatingGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        itemId = newFloatingGroupedWithProratedMinimumPrice.itemId
                        modelType = newFloatingGroupedWithProratedMinimumPrice.modelType
                        name = newFloatingGroupedWithProratedMinimumPrice.name
                        billableMetricId =
                            newFloatingGroupedWithProratedMinimumPrice.billableMetricId
                        billedInAdvance = newFloatingGroupedWithProratedMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedWithProratedMinimumPrice.conversionRate
                        externalPriceId = newFloatingGroupedWithProratedMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedWithProratedMinimumPrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedWithProratedMinimumPrice.metadata
                        additionalProperties =
                            newFloatingGroupedWithProratedMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) =
                        groupedWithProratedMinimumConfig(
                            JsonField.of(groupedWithProratedMinimumConfig)
                        )

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig:
                            JsonField<GroupedWithProratedMinimumConfig>
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedWithProratedMinimumPrice =
                        NewFloatingGroupedWithProratedMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired(
                                "groupedWithProratedMinimumConfig",
                                groupedWithProratedMinimumConfig
                            ),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedWithProratedMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM = of("grouped_with_prorated_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM,
                    }

                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedWithProratedMinimumPrice && cadence == other.cadence && currency == other.currency && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedWithProratedMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedWithProratedMinimumPrice{cadence=$cadence, currency=$currency, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedWithMeteredMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_with_metered_minimum_config")
                @ExcludeMissing
                private val groupedWithMeteredMinimumConfig:
                    JsonField<GroupedWithMeteredMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                fun groupedWithMeteredMinimumConfig(): GroupedWithMeteredMinimumConfig =
                    groupedWithMeteredMinimumConfig.getRequired(
                        "grouped_with_metered_minimum_config"
                    )

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                @JsonProperty("grouped_with_metered_minimum_config")
                @ExcludeMissing
                fun _groupedWithMeteredMinimumConfig(): JsonField<GroupedWithMeteredMinimumConfig> =
                    groupedWithMeteredMinimumConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedWithMeteredMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedWithMeteredMinimumConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedWithMeteredMinimumConfig:
                        JsonField<GroupedWithMeteredMinimumConfig>? =
                        null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedWithMeteredMinimumPrice:
                            NewFloatingGroupedWithMeteredMinimumPrice
                    ) = apply {
                        cadence = newFloatingGroupedWithMeteredMinimumPrice.cadence
                        currency = newFloatingGroupedWithMeteredMinimumPrice.currency
                        groupedWithMeteredMinimumConfig =
                            newFloatingGroupedWithMeteredMinimumPrice
                                .groupedWithMeteredMinimumConfig
                        itemId = newFloatingGroupedWithMeteredMinimumPrice.itemId
                        modelType = newFloatingGroupedWithMeteredMinimumPrice.modelType
                        name = newFloatingGroupedWithMeteredMinimumPrice.name
                        billableMetricId =
                            newFloatingGroupedWithMeteredMinimumPrice.billableMetricId
                        billedInAdvance = newFloatingGroupedWithMeteredMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedWithMeteredMinimumPrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedWithMeteredMinimumPrice.conversionRate
                        externalPriceId = newFloatingGroupedWithMeteredMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingGroupedWithMeteredMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingGroupedWithMeteredMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedWithMeteredMinimumPrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedWithMeteredMinimumPrice.metadata
                        additionalProperties =
                            newFloatingGroupedWithMeteredMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedWithMeteredMinimumConfig(
                        groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig
                    ) =
                        groupedWithMeteredMinimumConfig(
                            JsonField.of(groupedWithMeteredMinimumConfig)
                        )

                    fun groupedWithMeteredMinimumConfig(
                        groupedWithMeteredMinimumConfig: JsonField<GroupedWithMeteredMinimumConfig>
                    ) = apply {
                        this.groupedWithMeteredMinimumConfig = groupedWithMeteredMinimumConfig
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedWithMeteredMinimumPrice =
                        NewFloatingGroupedWithMeteredMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired(
                                "groupedWithMeteredMinimumConfig",
                                groupedWithMeteredMinimumConfig
                            ),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithMeteredMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedWithMeteredMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithMeteredMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithMeteredMinimumConfig =
                            GroupedWithMeteredMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithMeteredMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithMeteredMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_METERED_MINIMUM = of("grouped_with_metered_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_WITH_METERED_MINIMUM,
                    }

                    enum class Value {
                        GROUPED_WITH_METERED_MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_METERED_MINIMUM -> Value.GROUPED_WITH_METERED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_METERED_MINIMUM -> Known.GROUPED_WITH_METERED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedWithMeteredMinimumPrice && cadence == other.cadence && currency == other.currency && groupedWithMeteredMinimumConfig == other.groupedWithMeteredMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedWithMeteredMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedWithMeteredMinimumPrice{cadence=$cadence, currency=$currency, groupedWithMeteredMinimumConfig=$groupedWithMeteredMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingMatrixWithDisplayNamePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_with_display_name_config")
                @ExcludeMissing
                private val matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig> =
                    JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun matrixWithDisplayNameConfig(): MatrixWithDisplayNameConfig =
                    matrixWithDisplayNameConfig.getRequired("matrix_with_display_name_config")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("matrix_with_display_name_config")
                @ExcludeMissing
                fun _matrixWithDisplayNameConfig(): JsonField<MatrixWithDisplayNameConfig> =
                    matrixWithDisplayNameConfig

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingMatrixWithDisplayNamePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    itemId()
                    matrixWithDisplayNameConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var matrixWithDisplayNameConfig:
                        JsonField<MatrixWithDisplayNameConfig>? =
                        null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingMatrixWithDisplayNamePrice: NewFloatingMatrixWithDisplayNamePrice
                    ) = apply {
                        cadence = newFloatingMatrixWithDisplayNamePrice.cadence
                        currency = newFloatingMatrixWithDisplayNamePrice.currency
                        itemId = newFloatingMatrixWithDisplayNamePrice.itemId
                        matrixWithDisplayNameConfig =
                            newFloatingMatrixWithDisplayNamePrice.matrixWithDisplayNameConfig
                        modelType = newFloatingMatrixWithDisplayNamePrice.modelType
                        name = newFloatingMatrixWithDisplayNamePrice.name
                        billableMetricId = newFloatingMatrixWithDisplayNamePrice.billableMetricId
                        billedInAdvance = newFloatingMatrixWithDisplayNamePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingMatrixWithDisplayNamePrice.billingCycleConfiguration
                        conversionRate = newFloatingMatrixWithDisplayNamePrice.conversionRate
                        externalPriceId = newFloatingMatrixWithDisplayNamePrice.externalPriceId
                        fixedPriceQuantity =
                            newFloatingMatrixWithDisplayNamePrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newFloatingMatrixWithDisplayNamePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingMatrixWithDisplayNamePrice.invoicingCycleConfiguration
                        metadata = newFloatingMatrixWithDisplayNamePrice.metadata
                        additionalProperties =
                            newFloatingMatrixWithDisplayNamePrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun matrixWithDisplayNameConfig(
                        matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig
                    ) = matrixWithDisplayNameConfig(JsonField.of(matrixWithDisplayNameConfig))

                    fun matrixWithDisplayNameConfig(
                        matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig>
                    ) = apply { this.matrixWithDisplayNameConfig = matrixWithDisplayNameConfig }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingMatrixWithDisplayNamePrice =
                        NewFloatingMatrixWithDisplayNamePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired(
                                "matrixWithDisplayNameConfig",
                                matrixWithDisplayNameConfig
                            ),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixWithDisplayNameConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixWithDisplayNameConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig
                        ) = apply {
                            additionalProperties =
                                matrixWithDisplayNameConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixWithDisplayNameConfig =
                            MatrixWithDisplayNameConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixWithDisplayNameConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixWithDisplayNameConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX_WITH_DISPLAY_NAME = of("matrix_with_display_name")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        MATRIX_WITH_DISPLAY_NAME,
                    }

                    enum class Value {
                        MATRIX_WITH_DISPLAY_NAME,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MATRIX_WITH_DISPLAY_NAME -> Value.MATRIX_WITH_DISPLAY_NAME
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MATRIX_WITH_DISPLAY_NAME -> Known.MATRIX_WITH_DISPLAY_NAME
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingMatrixWithDisplayNamePrice && cadence == other.cadence && currency == other.currency && itemId == other.itemId && matrixWithDisplayNameConfig == other.matrixWithDisplayNameConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, itemId, matrixWithDisplayNameConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingMatrixWithDisplayNamePrice{cadence=$cadence, currency=$currency, itemId=$itemId, matrixWithDisplayNameConfig=$matrixWithDisplayNameConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingBulkWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                private val bulkWithProrationConfig: JsonField<BulkWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkWithProrationConfig(): BulkWithProrationConfig =
                    bulkWithProrationConfig.getRequired("bulk_with_proration_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                fun _bulkWithProrationConfig(): JsonField<BulkWithProrationConfig> =
                    bulkWithProrationConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingBulkWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkWithProrationConfig().validate()
                    cadence()
                    currency()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var bulkWithProrationConfig: JsonField<BulkWithProrationConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingBulkWithProrationPrice: NewFloatingBulkWithProrationPrice
                    ) = apply {
                        bulkWithProrationConfig =
                            newFloatingBulkWithProrationPrice.bulkWithProrationConfig
                        cadence = newFloatingBulkWithProrationPrice.cadence
                        currency = newFloatingBulkWithProrationPrice.currency
                        itemId = newFloatingBulkWithProrationPrice.itemId
                        modelType = newFloatingBulkWithProrationPrice.modelType
                        name = newFloatingBulkWithProrationPrice.name
                        billableMetricId = newFloatingBulkWithProrationPrice.billableMetricId
                        billedInAdvance = newFloatingBulkWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingBulkWithProrationPrice.billingCycleConfiguration
                        conversionRate = newFloatingBulkWithProrationPrice.conversionRate
                        externalPriceId = newFloatingBulkWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newFloatingBulkWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingBulkWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingBulkWithProrationPrice.invoicingCycleConfiguration
                        metadata = newFloatingBulkWithProrationPrice.metadata
                        additionalProperties =
                            newFloatingBulkWithProrationPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        bulkWithProrationConfig(JsonField.of(bulkWithProrationConfig))

                    fun bulkWithProrationConfig(
                        bulkWithProrationConfig: JsonField<BulkWithProrationConfig>
                    ) = apply { this.bulkWithProrationConfig = bulkWithProrationConfig }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingBulkWithProrationPrice =
                        NewFloatingBulkWithProrationPrice(
                            checkRequired("bulkWithProrationConfig", bulkWithProrationConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    bulkWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_WITH_PRORATION = of("bulk_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        BULK_WITH_PRORATION,
                    }

                    enum class Value {
                        BULK_WITH_PRORATION,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingBulkWithProrationPrice && bulkWithProrationConfig == other.bulkWithProrationConfig && cadence == other.cadence && currency == other.currency && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkWithProrationConfig, cadence, currency, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingBulkWithProrationPrice{bulkWithProrationConfig=$bulkWithProrationConfig, cadence=$cadence, currency=$currency, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewFloatingGroupedTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("grouped_tiered_package_config")
                @ExcludeMissing
                private val groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** An ISO 4217 currency string for which this price is billed in. */
                fun currency(): String = currency.getRequired("currency")

                fun groupedTieredPackageConfig(): GroupedTieredPackageConfig =
                    groupedTieredPackageConfig.getRequired("grouped_tiered_package_config")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** An ISO 4217 currency string for which this price is billed in. */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                @JsonProperty("grouped_tiered_package_config")
                @ExcludeMissing
                fun _groupedTieredPackageConfig(): JsonField<GroupedTieredPackageConfig> =
                    groupedTieredPackageConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewFloatingGroupedTieredPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    currency()
                    groupedTieredPackageConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var cadence: JsonField<Cadence>? = null
                    private var currency: JsonField<String>? = null
                    private var groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>? =
                        null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newFloatingGroupedTieredPackagePrice: NewFloatingGroupedTieredPackagePrice
                    ) = apply {
                        cadence = newFloatingGroupedTieredPackagePrice.cadence
                        currency = newFloatingGroupedTieredPackagePrice.currency
                        groupedTieredPackageConfig =
                            newFloatingGroupedTieredPackagePrice.groupedTieredPackageConfig
                        itemId = newFloatingGroupedTieredPackagePrice.itemId
                        modelType = newFloatingGroupedTieredPackagePrice.modelType
                        name = newFloatingGroupedTieredPackagePrice.name
                        billableMetricId = newFloatingGroupedTieredPackagePrice.billableMetricId
                        billedInAdvance = newFloatingGroupedTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newFloatingGroupedTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newFloatingGroupedTieredPackagePrice.conversionRate
                        externalPriceId = newFloatingGroupedTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newFloatingGroupedTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newFloatingGroupedTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newFloatingGroupedTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newFloatingGroupedTieredPackagePrice.metadata
                        additionalProperties =
                            newFloatingGroupedTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: String) = currency(JsonField.of(currency))

                    /** An ISO 4217 currency string for which this price is billed in. */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    fun groupedTieredPackageConfig(
                        groupedTieredPackageConfig: GroupedTieredPackageConfig
                    ) = groupedTieredPackageConfig(JsonField.of(groupedTieredPackageConfig))

                    fun groupedTieredPackageConfig(
                        groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>
                    ) = apply { this.groupedTieredPackageConfig = groupedTieredPackageConfig }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewFloatingGroupedTieredPackagePrice =
                        NewFloatingGroupedTieredPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("currency", currency),
                            checkRequired("groupedTieredPackageConfig", groupedTieredPackageConfig),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedTieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedTieredPackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedTieredPackageConfig: GroupedTieredPackageConfig) =
                            apply {
                                additionalProperties =
                                    groupedTieredPackageConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedTieredPackageConfig =
                            GroupedTieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedTieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedTieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_TIERED_PACKAGE = of("grouped_tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    enum class Known {
                        GROUPED_TIERED_PACKAGE,
                    }

                    enum class Value {
                        GROUPED_TIERED_PACKAGE,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            GROUPED_TIERED_PACKAGE -> Value.GROUPED_TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            GROUPED_TIERED_PACKAGE -> Known.GROUPED_TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(
                        private val value: JsonField<String>,
                    ) : Enum {

                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        enum class Value {
                            DAY,
                            MONTH,
                            _UNKNOWN,
                        }

                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    class Builder {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewFloatingGroupedTieredPackagePrice && cadence == other.cadence && currency == other.currency && groupedTieredPackageConfig == other.groupedTieredPackageConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, currency, groupedTieredPackageConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewFloatingGroupedTieredPackagePrice{cadence=$cadence, currency=$currency, groupedTieredPackageConfig=$groupedTieredPackageConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Add && startDate == other.startDate && allocationPrice == other.allocationPrice && discounts == other.discounts && endDate == other.endDate && externalPriceId == other.externalPriceId && fixedFeeQuantityTransitions == other.fixedFeeQuantityTransitions && maximumAmount == other.maximumAmount && minimumAmount == other.minimumAmount && price == other.price && priceId == other.priceId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(startDate, allocationPrice, discounts, endDate, externalPriceId, fixedFeeQuantityTransitions, maximumAmount, minimumAmount, price, priceId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Add{startDate=$startDate, allocationPrice=$allocationPrice, discounts=$discounts, endDate=$endDate, externalPriceId=$externalPriceId, fixedFeeQuantityTransitions=$fixedFeeQuantityTransitions, maximumAmount=$maximumAmount, minimumAmount=$minimumAmount, price=$price, priceId=$priceId, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class AddAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment")
        @ExcludeMissing
        private val adjustment: JsonField<Adjustment> = JsonMissing.of(),
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<StartDate> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<EndDate> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The definition of a new adjustment to create and add to the subscription. */
        fun adjustment(): Adjustment = adjustment.getRequired("adjustment")

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription.
         */
        fun startDate(): StartDate = startDate.getRequired("start_date")

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription.
         */
        fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate.getNullable("end_date"))

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonProperty("adjustment")
        @ExcludeMissing
        fun _adjustment(): JsonField<Adjustment> = adjustment

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<StartDate> = startDate

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription.
         */
        @JsonProperty("end_date") @ExcludeMissing fun _endDate(): JsonField<EndDate> = endDate

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): AddAdjustment = apply {
            if (validated) {
                return@apply
            }

            adjustment().validate()
            startDate().validate()
            endDate().ifPresent { it.validate() }
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustment: JsonField<Adjustment>? = null
            private var startDate: JsonField<StartDate>? = null
            private var endDate: JsonField<EndDate> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addAdjustment: AddAdjustment) = apply {
                adjustment = addAdjustment.adjustment
                startDate = addAdjustment.startDate
                endDate = addAdjustment.endDate
                additionalProperties = addAdjustment.additionalProperties.toMutableMap()
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: Adjustment) = adjustment(JsonField.of(adjustment))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: JsonField<Adjustment>) = apply {
                this.adjustment = adjustment
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newPercentageDiscount: Adjustment.NewPercentageDiscount) =
                adjustment(Adjustment.ofNewPercentageDiscount(newPercentageDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newUsageDiscount: Adjustment.NewUsageDiscount) =
                adjustment(Adjustment.ofNewUsageDiscount(newUsageDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newAmountDiscount: Adjustment.NewAmountDiscount) =
                adjustment(Adjustment.ofNewAmountDiscount(newAmountDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newMinimum: Adjustment.NewMinimum) =
                adjustment(Adjustment.ofNewMinimum(newMinimum))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newMaximum: Adjustment.NewMaximum) =
                adjustment(Adjustment.ofNewMaximum(newMaximum))

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription.
             */
            fun startDate(startDate: StartDate) = startDate(JsonField.of(startDate))

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription.
             */
            fun startDate(startDate: JsonField<StartDate>) = apply { this.startDate = startDate }

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription.
             */
            fun startDate(dateTime: OffsetDateTime) = startDate(StartDate.ofDateTime(dateTime))

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription.
             */
            fun startDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                startDate(StartDate.ofBillingCycleRelativeDate(billingCycleRelativeDate))

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(endDate: EndDate?) = endDate(JsonField.ofNullable(endDate))

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(endDate: Optional<EndDate>) = endDate(endDate.orElse(null))

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(endDate: JsonField<EndDate>) = apply { this.endDate = endDate }

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(dateTime: OffsetDateTime) = endDate(EndDate.ofDateTime(dateTime))

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                endDate(EndDate.ofBillingCycleRelativeDate(billingCycleRelativeDate))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): AddAdjustment =
                AddAdjustment(
                    checkRequired("adjustment", adjustment),
                    checkRequired("startDate", startDate),
                    endDate,
                    additionalProperties.toImmutable(),
                )
        }

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newUsageDiscount: NewUsageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newUsageDiscount(): Optional<NewUsageDiscount> =
                Optional.ofNullable(newUsageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewUsageDiscount(): Boolean = newUsageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewUsageDiscount(): NewUsageDiscount =
                newUsageDiscount.getOrThrow("newUsageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newUsageDiscount != null -> visitor.visitNewUsageDiscount(newUsageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Adjustment = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitNewPercentageDiscount(
                            newPercentageDiscount: NewPercentageDiscount
                        ) {
                            newPercentageDiscount.validate()
                        }

                        override fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount) {
                            newUsageDiscount.validate()
                        }

                        override fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount) {
                            newAmountDiscount.validate()
                        }

                        override fun visitNewMinimum(newMinimum: NewMinimum) {
                            newMinimum.validate()
                        }

                        override fun visitNewMaximum(newMaximum: NewMaximum) {
                            newMaximum.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && newPercentageDiscount == other.newPercentageDiscount && newUsageDiscount == other.newUsageDiscount && newAmountDiscount == other.newAmountDiscount && newMinimum == other.newMinimum && newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newPercentageDiscount, newUsageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */

            override fun toString(): String =
                when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newUsageDiscount != null -> "Adjustment{newUsageDiscount=$newUsageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewUsageDiscount(newUsageDiscount: NewUsageDiscount) =
                    Adjustment(newUsageDiscount = newUsageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newPercentageDiscount = it, _json = json)
                                }
                        }
                        "usage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewUsageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newUsageDiscount = it, _json = json)
                                }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newAmountDiscount = it, _json = json)
                                }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMinimum = it, _json = json)
                                }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMaximum = it, _json = json)
                                }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newUsageDiscount != null ->
                            generator.writeObject(value.newUsageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @NoAutoDetect
            class NewPercentageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                private val percentageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun percentageDiscount(): Double =
                    percentageDiscount.getRequired("percentage_discount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("percentage_discount")
                @ExcludeMissing
                fun _percentageDiscount(): JsonField<Double> = percentageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewPercentageDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    percentageDiscount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var percentageDiscount: JsonField<Double>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        adjustmentType = newPercentageDiscount.adjustmentType
                        appliesToPriceIds =
                            newPercentageDiscount.appliesToPriceIds.map { it.toMutableList() }
                        percentageDiscount = newPercentageDiscount.percentageDiscount
                        isInvoiceLevel = newPercentageDiscount.isInvoiceLevel
                        additionalProperties =
                            newPercentageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun percentageDiscount(percentageDiscount: Double) =
                        percentageDiscount(JsonField.of(percentageDiscount))

                    fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("percentageDiscount", percentageDiscount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE_DISCOUNT = of("percentage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        PERCENTAGE_DISCOUNT,
                    }

                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && percentageDiscount == other.percentageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, percentageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewPercentageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, percentageDiscount=$percentageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewUsageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("usage_discount")
                @ExcludeMissing
                private val usageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun usageDiscount(): Double = usageDiscount.getRequired("usage_discount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("usage_discount")
                @ExcludeMissing
                fun _usageDiscount(): JsonField<Double> = usageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewUsageDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    usageDiscount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var usageDiscount: JsonField<Double>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newUsageDiscount: NewUsageDiscount) = apply {
                        adjustmentType = newUsageDiscount.adjustmentType
                        appliesToPriceIds =
                            newUsageDiscount.appliesToPriceIds.map { it.toMutableList() }
                        usageDiscount = newUsageDiscount.usageDiscount
                        isInvoiceLevel = newUsageDiscount.isInvoiceLevel
                        additionalProperties = newUsageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun usageDiscount(usageDiscount: Double) =
                        usageDiscount(JsonField.of(usageDiscount))

                    fun usageDiscount(usageDiscount: JsonField<Double>) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewUsageDiscount =
                        NewUsageDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("usageDiscount", usageDiscount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE_DISCOUNT = of("usage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        USAGE_DISCOUNT,
                    }

                    enum class Value {
                        USAGE_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            USAGE_DISCOUNT -> Value.USAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            USAGE_DISCOUNT -> Known.USAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewUsageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && usageDiscount == other.usageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, usageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewUsageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, usageDiscount=$usageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewAmountDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("amount_discount")
                @ExcludeMissing
                private val amountDiscount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun amountDiscount(): String = amountDiscount.getRequired("amount_discount")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                @JsonProperty("amount_discount")
                @ExcludeMissing
                fun _amountDiscount(): JsonField<String> = amountDiscount

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewAmountDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    amountDiscount()
                    appliesToPriceIds()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var amountDiscount: JsonField<String>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        adjustmentType = newAmountDiscount.adjustmentType
                        amountDiscount = newAmountDiscount.amountDiscount
                        appliesToPriceIds =
                            newAmountDiscount.appliesToPriceIds.map { it.toMutableList() }
                        isInvoiceLevel = newAmountDiscount.isInvoiceLevel
                        additionalProperties = newAmountDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) =
                        amountDiscount(JsonField.of(amountDiscount))

                    fun amountDiscount(amountDiscount: JsonField<String>) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("amountDiscount", amountDiscount),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT_DISCOUNT = of("amount_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        AMOUNT_DISCOUNT,
                    }

                    enum class Value {
                        AMOUNT_DISCOUNT,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && adjustmentType == other.adjustmentType && amountDiscount == other.amountDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, amountDiscount, appliesToPriceIds, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewAmountDiscount{adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMinimum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("minimum_amount")
                @ExcludeMissing
                private val minimumAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /** The item ID that revenue from this minimum will be attributed to. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /** The item ID that revenue from this minimum will be attributed to. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("minimum_amount")
                @ExcludeMissing
                fun _minimumAmount(): JsonField<String> = minimumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewMinimum = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    itemId()
                    minimumAmount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var itemId: JsonField<String>? = null
                    private var minimumAmount: JsonField<String>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        adjustmentType = newMinimum.adjustmentType
                        appliesToPriceIds = newMinimum.appliesToPriceIds.map { it.toMutableList() }
                        itemId = newMinimum.itemId
                        minimumAmount = newMinimum.minimumAmount
                        isInvoiceLevel = newMinimum.isInvoiceLevel
                        additionalProperties = newMinimum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun minimumAmount(minimumAmount: String) =
                        minimumAmount(JsonField.of(minimumAmount))

                    fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMinimum =
                        NewMinimum(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("itemId", itemId),
                            checkRequired("minimumAmount", minimumAmount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MINIMUM = of("minimum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MINIMUM,
                    }

                    enum class Value {
                        MINIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && itemId == other.itemId && minimumAmount == other.minimumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, itemId, minimumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMinimum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, itemId=$itemId, minimumAmount=$minimumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMaximum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("maximum_amount")
                @ExcludeMissing
                private val maximumAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun maximumAmount(): String = maximumAmount.getRequired("maximum_amount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("maximum_amount")
                @ExcludeMissing
                fun _maximumAmount(): JsonField<String> = maximumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewMaximum = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    maximumAmount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                class Builder {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var maximumAmount: JsonField<String>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        adjustmentType = newMaximum.adjustmentType
                        appliesToPriceIds = newMaximum.appliesToPriceIds.map { it.toMutableList() }
                        maximumAmount = newMaximum.maximumAmount
                        isInvoiceLevel = newMaximum.isInvoiceLevel
                        additionalProperties = newMaximum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun maximumAmount(maximumAmount: String) =
                        maximumAmount(JsonField.of(maximumAmount))

                    fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMaximum =
                        NewMaximum(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("maximumAmount", maximumAmount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(
                    private val value: JsonField<String>,
                ) : Enum {

                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAXIMUM = of("maximum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    enum class Known {
                        MAXIMUM,
                    }

                    enum class Value {
                        MAXIMUM,
                        _UNKNOWN,
                    }

                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && maximumAmount == other.maximumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, maximumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMaximum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, maximumAmount=$maximumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }
        }

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription.
         */
        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): StartDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelativeDate(
                            billingCycleRelativeDate: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "StartDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription.
         */
        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): EndDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelativeDate(
                            billingCycleRelativeDate: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "EndDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddAdjustment && adjustment == other.adjustment && startDate == other.startDate && endDate == other.endDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustment, startDate, endDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AddAdjustment{adjustment=$adjustment, startDate=$startDate, endDate=$endDate, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class Edit
    @JsonCreator
    private constructor(
        @JsonProperty("price_interval_id")
        @ExcludeMissing
        private val priceIntervalId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("billing_cycle_day")
        @ExcludeMissing
        private val billingCycleDay: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<EndDate> = JsonMissing.of(),
        @JsonProperty("fixed_fee_quantity_transitions")
        @ExcludeMissing
        private val fixedFeeQuantityTransitions: JsonField<List<FixedFeeQuantityTransition>> =
            JsonMissing.of(),
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<StartDate> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the price interval to edit. */
        fun priceIntervalId(): String = priceIntervalId.getRequired("price_interval_id")

        /**
         * The updated billing cycle day for this price interval. If not specified, the billing
         * cycle day will not be updated. Note that overlapping price intervals must have the same
         * billing cycle day.
         */
        fun billingCycleDay(): Optional<Long> =
            Optional.ofNullable(billingCycleDay.getNullable("billing_cycle_day"))

        /**
         * The updated end date of this price interval. If not specified, the start date will not be
         * updated.
         */
        fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate.getNullable("end_date"))

        /**
         * A list of fixed fee quantity transitions to use for this price interval. Note that this
         * list will overwrite all existing fixed fee quantity transitions on the price interval.
         */
        fun fixedFeeQuantityTransitions(): Optional<List<FixedFeeQuantityTransition>> =
            Optional.ofNullable(
                fixedFeeQuantityTransitions.getNullable("fixed_fee_quantity_transitions")
            )

        /**
         * The updated start date of this price interval. If not specified, the start date will not
         * be updated.
         */
        fun startDate(): Optional<StartDate> =
            Optional.ofNullable(startDate.getNullable("start_date"))

        /** The id of the price interval to edit. */
        @JsonProperty("price_interval_id")
        @ExcludeMissing
        fun _priceIntervalId(): JsonField<String> = priceIntervalId

        /**
         * The updated billing cycle day for this price interval. If not specified, the billing
         * cycle day will not be updated. Note that overlapping price intervals must have the same
         * billing cycle day.
         */
        @JsonProperty("billing_cycle_day")
        @ExcludeMissing
        fun _billingCycleDay(): JsonField<Long> = billingCycleDay

        /**
         * The updated end date of this price interval. If not specified, the start date will not be
         * updated.
         */
        @JsonProperty("end_date") @ExcludeMissing fun _endDate(): JsonField<EndDate> = endDate

        /**
         * A list of fixed fee quantity transitions to use for this price interval. Note that this
         * list will overwrite all existing fixed fee quantity transitions on the price interval.
         */
        @JsonProperty("fixed_fee_quantity_transitions")
        @ExcludeMissing
        fun _fixedFeeQuantityTransitions(): JsonField<List<FixedFeeQuantityTransition>> =
            fixedFeeQuantityTransitions

        /**
         * The updated start date of this price interval. If not specified, the start date will not
         * be updated.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<StartDate> = startDate

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Edit = apply {
            if (validated) {
                return@apply
            }

            priceIntervalId()
            billingCycleDay()
            endDate().ifPresent { it.validate() }
            fixedFeeQuantityTransitions().ifPresent { it.forEach { it.validate() } }
            startDate().ifPresent { it.validate() }
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var priceIntervalId: JsonField<String>? = null
            private var billingCycleDay: JsonField<Long> = JsonMissing.of()
            private var endDate: JsonField<EndDate> = JsonMissing.of()
            private var fixedFeeQuantityTransitions:
                JsonField<MutableList<FixedFeeQuantityTransition>>? =
                null
            private var startDate: JsonField<StartDate> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(edit: Edit) = apply {
                priceIntervalId = edit.priceIntervalId
                billingCycleDay = edit.billingCycleDay
                endDate = edit.endDate
                fixedFeeQuantityTransitions =
                    edit.fixedFeeQuantityTransitions.map { it.toMutableList() }
                startDate = edit.startDate
                additionalProperties = edit.additionalProperties.toMutableMap()
            }

            /** The id of the price interval to edit. */
            fun priceIntervalId(priceIntervalId: String) =
                priceIntervalId(JsonField.of(priceIntervalId))

            /** The id of the price interval to edit. */
            fun priceIntervalId(priceIntervalId: JsonField<String>) = apply {
                this.priceIntervalId = priceIntervalId
            }

            /**
             * The updated billing cycle day for this price interval. If not specified, the billing
             * cycle day will not be updated. Note that overlapping price intervals must have the
             * same billing cycle day.
             */
            fun billingCycleDay(billingCycleDay: Long?) =
                billingCycleDay(JsonField.ofNullable(billingCycleDay))

            /**
             * The updated billing cycle day for this price interval. If not specified, the billing
             * cycle day will not be updated. Note that overlapping price intervals must have the
             * same billing cycle day.
             */
            fun billingCycleDay(billingCycleDay: Long) = billingCycleDay(billingCycleDay as Long?)

            /**
             * The updated billing cycle day for this price interval. If not specified, the billing
             * cycle day will not be updated. Note that overlapping price intervals must have the
             * same billing cycle day.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun billingCycleDay(billingCycleDay: Optional<Long>) =
                billingCycleDay(billingCycleDay.orElse(null) as Long?)

            /**
             * The updated billing cycle day for this price interval. If not specified, the billing
             * cycle day will not be updated. Note that overlapping price intervals must have the
             * same billing cycle day.
             */
            fun billingCycleDay(billingCycleDay: JsonField<Long>) = apply {
                this.billingCycleDay = billingCycleDay
            }

            /**
             * The updated end date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun endDate(endDate: EndDate?) = endDate(JsonField.ofNullable(endDate))

            /**
             * The updated end date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun endDate(endDate: Optional<EndDate>) = endDate(endDate.orElse(null))

            /**
             * The updated end date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun endDate(endDate: JsonField<EndDate>) = apply { this.endDate = endDate }

            /**
             * The updated end date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun endDate(dateTime: OffsetDateTime) = endDate(EndDate.ofDateTime(dateTime))

            /**
             * The updated end date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun endDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                endDate(EndDate.ofBillingCycleRelativeDate(billingCycleRelativeDate))

            /**
             * A list of fixed fee quantity transitions to use for this price interval. Note that
             * this list will overwrite all existing fixed fee quantity transitions on the price
             * interval.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: List<FixedFeeQuantityTransition>?
            ) = fixedFeeQuantityTransitions(JsonField.ofNullable(fixedFeeQuantityTransitions))

            /**
             * A list of fixed fee quantity transitions to use for this price interval. Note that
             * this list will overwrite all existing fixed fee quantity transitions on the price
             * interval.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: Optional<List<FixedFeeQuantityTransition>>
            ) = fixedFeeQuantityTransitions(fixedFeeQuantityTransitions.orElse(null))

            /**
             * A list of fixed fee quantity transitions to use for this price interval. Note that
             * this list will overwrite all existing fixed fee quantity transitions on the price
             * interval.
             */
            fun fixedFeeQuantityTransitions(
                fixedFeeQuantityTransitions: JsonField<List<FixedFeeQuantityTransition>>
            ) = apply {
                this.fixedFeeQuantityTransitions =
                    fixedFeeQuantityTransitions.map { it.toMutableList() }
            }

            /**
             * A list of fixed fee quantity transitions to use for this price interval. Note that
             * this list will overwrite all existing fixed fee quantity transitions on the price
             * interval.
             */
            fun addFixedFeeQuantityTransition(
                fixedFeeQuantityTransition: FixedFeeQuantityTransition
            ) = apply {
                fixedFeeQuantityTransitions =
                    (fixedFeeQuantityTransitions ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(fixedFeeQuantityTransition)
                    }
            }

            /**
             * The updated start date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun startDate(startDate: StartDate) = startDate(JsonField.of(startDate))

            /**
             * The updated start date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun startDate(startDate: JsonField<StartDate>) = apply { this.startDate = startDate }

            /**
             * The updated start date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun startDate(dateTime: OffsetDateTime) = startDate(StartDate.ofDateTime(dateTime))

            /**
             * The updated start date of this price interval. If not specified, the start date will
             * not be updated.
             */
            fun startDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                startDate(StartDate.ofBillingCycleRelativeDate(billingCycleRelativeDate))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Edit =
                Edit(
                    checkRequired("priceIntervalId", priceIntervalId),
                    billingCycleDay,
                    endDate,
                    (fixedFeeQuantityTransitions ?: JsonMissing.of()).map { it.toImmutable() },
                    startDate,
                    additionalProperties.toImmutable(),
                )
        }

        /**
         * The updated end date of this price interval. If not specified, the start date will not be
         * updated.
         */
        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): EndDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelativeDate(
                            billingCycleRelativeDate: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "EndDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        @NoAutoDetect
        class FixedFeeQuantityTransition
        @JsonCreator
        private constructor(
            @JsonProperty("effective_date")
            @ExcludeMissing
            private val effectiveDate: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("quantity")
            @ExcludeMissing
            private val quantity: JsonField<Long> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** The date that the fixed fee quantity transition should take effect. */
            fun effectiveDate(): OffsetDateTime = effectiveDate.getRequired("effective_date")

            /** The quantity of the fixed fee quantity transition. */
            fun quantity(): Long = quantity.getRequired("quantity")

            /** The date that the fixed fee quantity transition should take effect. */
            @JsonProperty("effective_date")
            @ExcludeMissing
            fun _effectiveDate(): JsonField<OffsetDateTime> = effectiveDate

            /** The quantity of the fixed fee quantity transition. */
            @JsonProperty("quantity") @ExcludeMissing fun _quantity(): JsonField<Long> = quantity

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): FixedFeeQuantityTransition = apply {
                if (validated) {
                    return@apply
                }

                effectiveDate()
                quantity()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            class Builder {

                private var effectiveDate: JsonField<OffsetDateTime>? = null
                private var quantity: JsonField<Long>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(fixedFeeQuantityTransition: FixedFeeQuantityTransition) = apply {
                    effectiveDate = fixedFeeQuantityTransition.effectiveDate
                    quantity = fixedFeeQuantityTransition.quantity
                    additionalProperties =
                        fixedFeeQuantityTransition.additionalProperties.toMutableMap()
                }

                /** The date that the fixed fee quantity transition should take effect. */
                fun effectiveDate(effectiveDate: OffsetDateTime) =
                    effectiveDate(JsonField.of(effectiveDate))

                /** The date that the fixed fee quantity transition should take effect. */
                fun effectiveDate(effectiveDate: JsonField<OffsetDateTime>) = apply {
                    this.effectiveDate = effectiveDate
                }

                /** The quantity of the fixed fee quantity transition. */
                fun quantity(quantity: Long) = quantity(JsonField.of(quantity))

                /** The quantity of the fixed fee quantity transition. */
                fun quantity(quantity: JsonField<Long>) = apply { this.quantity = quantity }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): FixedFeeQuantityTransition =
                    FixedFeeQuantityTransition(
                        checkRequired("effectiveDate", effectiveDate),
                        checkRequired("quantity", quantity),
                        additionalProperties.toImmutable(),
                    )
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is FixedFeeQuantityTransition && effectiveDate == other.effectiveDate && quantity == other.quantity && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(effectiveDate, quantity, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "FixedFeeQuantityTransition{effectiveDate=$effectiveDate, quantity=$quantity, additionalProperties=$additionalProperties}"
        }

        /**
         * The updated start date of this price interval. If not specified, the start date will not
         * be updated.
         */
        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): StartDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelativeDate(
                            billingCycleRelativeDate: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "StartDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Edit && priceIntervalId == other.priceIntervalId && billingCycleDay == other.billingCycleDay && endDate == other.endDate && fixedFeeQuantityTransitions == other.fixedFeeQuantityTransitions && startDate == other.startDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(priceIntervalId, billingCycleDay, endDate, fixedFeeQuantityTransitions, startDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Edit{priceIntervalId=$priceIntervalId, billingCycleDay=$billingCycleDay, endDate=$endDate, fixedFeeQuantityTransitions=$fixedFeeQuantityTransitions, startDate=$startDate, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class EditAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment_interval_id")
        @ExcludeMissing
        private val adjustmentIntervalId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<EndDate> = JsonMissing.of(),
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<StartDate> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the adjustment interval to edit. */
        fun adjustmentIntervalId(): String =
            adjustmentIntervalId.getRequired("adjustment_interval_id")

        /**
         * The updated end date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        fun endDate(): Optional<EndDate> = Optional.ofNullable(endDate.getNullable("end_date"))

        /**
         * The updated start date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        fun startDate(): Optional<StartDate> =
            Optional.ofNullable(startDate.getNullable("start_date"))

        /** The id of the adjustment interval to edit. */
        @JsonProperty("adjustment_interval_id")
        @ExcludeMissing
        fun _adjustmentIntervalId(): JsonField<String> = adjustmentIntervalId

        /**
         * The updated end date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        @JsonProperty("end_date") @ExcludeMissing fun _endDate(): JsonField<EndDate> = endDate

        /**
         * The updated start date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<StartDate> = startDate

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): EditAdjustment = apply {
            if (validated) {
                return@apply
            }

            adjustmentIntervalId()
            endDate().ifPresent { it.validate() }
            startDate().ifPresent { it.validate() }
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var adjustmentIntervalId: JsonField<String>? = null
            private var endDate: JsonField<EndDate> = JsonMissing.of()
            private var startDate: JsonField<StartDate> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(editAdjustment: EditAdjustment) = apply {
                adjustmentIntervalId = editAdjustment.adjustmentIntervalId
                endDate = editAdjustment.endDate
                startDate = editAdjustment.startDate
                additionalProperties = editAdjustment.additionalProperties.toMutableMap()
            }

            /** The id of the adjustment interval to edit. */
            fun adjustmentIntervalId(adjustmentIntervalId: String) =
                adjustmentIntervalId(JsonField.of(adjustmentIntervalId))

            /** The id of the adjustment interval to edit. */
            fun adjustmentIntervalId(adjustmentIntervalId: JsonField<String>) = apply {
                this.adjustmentIntervalId = adjustmentIntervalId
            }

            /**
             * The updated end date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun endDate(endDate: EndDate?) = endDate(JsonField.ofNullable(endDate))

            /**
             * The updated end date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun endDate(endDate: Optional<EndDate>) = endDate(endDate.orElse(null))

            /**
             * The updated end date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun endDate(endDate: JsonField<EndDate>) = apply { this.endDate = endDate }

            /**
             * The updated end date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun endDate(dateTime: OffsetDateTime) = endDate(EndDate.ofDateTime(dateTime))

            /**
             * The updated end date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun endDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                endDate(EndDate.ofBillingCycleRelativeDate(billingCycleRelativeDate))

            /**
             * The updated start date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun startDate(startDate: StartDate) = startDate(JsonField.of(startDate))

            /**
             * The updated start date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun startDate(startDate: JsonField<StartDate>) = apply { this.startDate = startDate }

            /**
             * The updated start date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun startDate(dateTime: OffsetDateTime) = startDate(StartDate.ofDateTime(dateTime))

            /**
             * The updated start date of this adjustment interval. If not specified, the start date
             * will not be updated.
             */
            fun startDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                startDate(StartDate.ofBillingCycleRelativeDate(billingCycleRelativeDate))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): EditAdjustment =
                EditAdjustment(
                    checkRequired("adjustmentIntervalId", adjustmentIntervalId),
                    endDate,
                    startDate,
                    additionalProperties.toImmutable(),
                )
        }

        /**
         * The updated end date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        @JsonDeserialize(using = EndDate.Deserializer::class)
        @JsonSerialize(using = EndDate.Serializer::class)
        class EndDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): EndDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelativeDate(
                            billingCycleRelativeDate: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is EndDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "EndDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "EndDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "EndDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid EndDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = EndDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    EndDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown EndDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<EndDate>(EndDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): EndDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return EndDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return EndDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return EndDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<EndDate>(EndDate::class) {

                override fun serialize(
                    value: EndDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid EndDate")
                    }
                }
            }
        }

        /**
         * The updated start date of this adjustment interval. If not specified, the start date will
         * not be updated.
         */
        @JsonDeserialize(using = StartDate.Deserializer::class)
        @JsonSerialize(using = StartDate.Serializer::class)
        class StartDate
        private constructor(
            private val dateTime: OffsetDateTime? = null,
            private val billingCycleRelativeDate: BillingCycleRelativeDate? = null,
            private val _json: JsonValue? = null,
        ) {

            fun dateTime(): Optional<OffsetDateTime> = Optional.ofNullable(dateTime)

            fun billingCycleRelativeDate(): Optional<BillingCycleRelativeDate> =
                Optional.ofNullable(billingCycleRelativeDate)

            fun isDateTime(): Boolean = dateTime != null

            fun isBillingCycleRelativeDate(): Boolean = billingCycleRelativeDate != null

            fun asDateTime(): OffsetDateTime = dateTime.getOrThrow("dateTime")

            fun asBillingCycleRelativeDate(): BillingCycleRelativeDate =
                billingCycleRelativeDate.getOrThrow("billingCycleRelativeDate")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    dateTime != null -> visitor.visitDateTime(dateTime)
                    billingCycleRelativeDate != null ->
                        visitor.visitBillingCycleRelativeDate(billingCycleRelativeDate)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): StartDate = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitDateTime(dateTime: OffsetDateTime) {}

                        override fun visitBillingCycleRelativeDate(
                            billingCycleRelativeDate: BillingCycleRelativeDate
                        ) {}
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is StartDate && dateTime == other.dateTime && billingCycleRelativeDate == other.billingCycleRelativeDate /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(dateTime, billingCycleRelativeDate) /* spotless:on */

            override fun toString(): String =
                when {
                    dateTime != null -> "StartDate{dateTime=$dateTime}"
                    billingCycleRelativeDate != null ->
                        "StartDate{billingCycleRelativeDate=$billingCycleRelativeDate}"
                    _json != null -> "StartDate{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid StartDate")
                }

            companion object {

                @JvmStatic fun ofDateTime(dateTime: OffsetDateTime) = StartDate(dateTime = dateTime)

                @JvmStatic
                fun ofBillingCycleRelativeDate(billingCycleRelativeDate: BillingCycleRelativeDate) =
                    StartDate(billingCycleRelativeDate = billingCycleRelativeDate)
            }

            interface Visitor<out T> {

                fun visitDateTime(dateTime: OffsetDateTime): T

                fun visitBillingCycleRelativeDate(
                    billingCycleRelativeDate: BillingCycleRelativeDate
                ): T

                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown StartDate: $json")
                }
            }

            class Deserializer : BaseDeserializer<StartDate>(StartDate::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): StartDate {
                    val json = JsonValue.fromJsonNode(node)

                    tryDeserialize(node, jacksonTypeRef<OffsetDateTime>())?.let {
                        return StartDate(dateTime = it, _json = json)
                    }
                    tryDeserialize(node, jacksonTypeRef<BillingCycleRelativeDate>())?.let {
                        return StartDate(billingCycleRelativeDate = it, _json = json)
                    }

                    return StartDate(_json = json)
                }
            }

            class Serializer : BaseSerializer<StartDate>(StartDate::class) {

                override fun serialize(
                    value: StartDate,
                    generator: JsonGenerator,
                    provider: SerializerProvider
                ) {
                    when {
                        value.dateTime != null -> generator.writeObject(value.dateTime)
                        value.billingCycleRelativeDate != null ->
                            generator.writeObject(value.billingCycleRelativeDate)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid StartDate")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is EditAdjustment && adjustmentIntervalId == other.adjustmentIntervalId && endDate == other.endDate && startDate == other.startDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustmentIntervalId, endDate, startDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "EditAdjustment{adjustmentIntervalId=$adjustmentIntervalId, endDate=$endDate, startDate=$startDate, additionalProperties=$additionalProperties}"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is SubscriptionPriceIntervalsParams && subscriptionId == other.subscriptionId && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(subscriptionId, body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() =
        "SubscriptionPriceIntervalsParams{subscriptionId=$subscriptionId, body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
