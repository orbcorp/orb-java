// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.google.common.collect.ArrayListMultimap
import com.google.common.collect.ListMultimap
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import com.withorb.api.models.*
import java.util.Objects
import java.util.Optional

class CustomerCreditTopUpCreateParams
constructor(
    private val customerId: String,
    private val amount: String,
    private val currency: String,
    private val invoiceSettings: InvoiceSettings,
    private val perUnitCostBasis: String,
    private val threshold: String,
    private val expiresAfter: Long?,
    private val expiresAfterUnit: ExpiresAfterUnit?,
    private val additionalHeaders: Map<String, List<String>>,
    private val additionalQueryParams: Map<String, List<String>>,
    private val additionalBodyProperties: Map<String, JsonValue>,
) {

    fun customerId(): String = customerId

    fun amount(): String = amount

    fun currency(): String = currency

    fun invoiceSettings(): InvoiceSettings = invoiceSettings

    fun perUnitCostBasis(): String = perUnitCostBasis

    fun threshold(): String = threshold

    fun expiresAfter(): Optional<Long> = Optional.ofNullable(expiresAfter)

    fun expiresAfterUnit(): Optional<ExpiresAfterUnit> = Optional.ofNullable(expiresAfterUnit)

    @JvmSynthetic
    internal fun getBody(): CustomerCreditTopUpCreateBody {
        return CustomerCreditTopUpCreateBody(
            amount,
            currency,
            invoiceSettings,
            perUnitCostBasis,
            threshold,
            expiresAfter,
            expiresAfterUnit,
            additionalBodyProperties,
        )
    }

    @JvmSynthetic internal fun getHeaders(): Map<String, List<String>> = additionalHeaders

    @JvmSynthetic internal fun getQueryParams(): Map<String, List<String>> = additionalQueryParams

    fun getPathParam(index: Int): String {
        return when (index) {
            0 -> customerId
            else -> ""
        }
    }

    @JsonDeserialize(builder = CustomerCreditTopUpCreateBody.Builder::class)
    @NoAutoDetect
    class CustomerCreditTopUpCreateBody
    internal constructor(
        private val amount: String?,
        private val currency: String?,
        private val invoiceSettings: InvoiceSettings?,
        private val perUnitCostBasis: String?,
        private val threshold: String?,
        private val expiresAfter: Long?,
        private val expiresAfterUnit: ExpiresAfterUnit?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /** The amount to increment when the threshold is reached. */
        @JsonProperty("amount") fun amount(): String? = amount

        /**
         * The currency or custom pricing unit to use for this top-up. If this is a real-world
         * currency, it must match the customer's invoicing currency.
         */
        @JsonProperty("currency") fun currency(): String? = currency

        /** Settings for invoices generated by triggered top-ups. */
        @JsonProperty("invoice_settings") fun invoiceSettings(): InvoiceSettings? = invoiceSettings

        /** How much, in the customer's currency, to charge for each unit. */
        @JsonProperty("per_unit_cost_basis") fun perUnitCostBasis(): String? = perUnitCostBasis

        /**
         * The threshold at which to trigger the top-up. If the balance is at or below this
         * threshold, the top-up will be triggered.
         */
        @JsonProperty("threshold") fun threshold(): String? = threshold

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        @JsonProperty("expires_after") fun expiresAfter(): Long? = expiresAfter

        /** The unit of expires_after. */
        @JsonProperty("expires_after_unit")
        fun expiresAfterUnit(): ExpiresAfterUnit? = expiresAfterUnit

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var amount: String? = null
            private var currency: String? = null
            private var invoiceSettings: InvoiceSettings? = null
            private var perUnitCostBasis: String? = null
            private var threshold: String? = null
            private var expiresAfter: Long? = null
            private var expiresAfterUnit: ExpiresAfterUnit? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(customerCreditTopUpCreateBody: CustomerCreditTopUpCreateBody) =
                apply {
                    this.amount = customerCreditTopUpCreateBody.amount
                    this.currency = customerCreditTopUpCreateBody.currency
                    this.invoiceSettings = customerCreditTopUpCreateBody.invoiceSettings
                    this.perUnitCostBasis = customerCreditTopUpCreateBody.perUnitCostBasis
                    this.threshold = customerCreditTopUpCreateBody.threshold
                    this.expiresAfter = customerCreditTopUpCreateBody.expiresAfter
                    this.expiresAfterUnit = customerCreditTopUpCreateBody.expiresAfterUnit
                    additionalProperties(customerCreditTopUpCreateBody.additionalProperties)
                }

            /** The amount to increment when the threshold is reached. */
            @JsonProperty("amount") fun amount(amount: String) = apply { this.amount = amount }

            /**
             * The currency or custom pricing unit to use for this top-up. If this is a real-world
             * currency, it must match the customer's invoicing currency.
             */
            @JsonProperty("currency")
            fun currency(currency: String) = apply { this.currency = currency }

            /** Settings for invoices generated by triggered top-ups. */
            @JsonProperty("invoice_settings")
            fun invoiceSettings(invoiceSettings: InvoiceSettings) = apply {
                this.invoiceSettings = invoiceSettings
            }

            /** How much, in the customer's currency, to charge for each unit. */
            @JsonProperty("per_unit_cost_basis")
            fun perUnitCostBasis(perUnitCostBasis: String) = apply {
                this.perUnitCostBasis = perUnitCostBasis
            }

            /**
             * The threshold at which to trigger the top-up. If the balance is at or below this
             * threshold, the top-up will be triggered.
             */
            @JsonProperty("threshold")
            fun threshold(threshold: String) = apply { this.threshold = threshold }

            /**
             * The number of days or months after which the top-up expires. If unspecified, it does
             * not expire.
             */
            @JsonProperty("expires_after")
            fun expiresAfter(expiresAfter: Long) = apply { this.expiresAfter = expiresAfter }

            /** The unit of expires_after. */
            @JsonProperty("expires_after_unit")
            fun expiresAfterUnit(expiresAfterUnit: ExpiresAfterUnit) = apply {
                this.expiresAfterUnit = expiresAfterUnit
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): CustomerCreditTopUpCreateBody =
                CustomerCreditTopUpCreateBody(
                    checkNotNull(amount) { "`amount` is required but was not set" },
                    checkNotNull(currency) { "`currency` is required but was not set" },
                    checkNotNull(invoiceSettings) {
                        "`invoiceSettings` is required but was not set"
                    },
                    checkNotNull(perUnitCostBasis) {
                        "`perUnitCostBasis` is required but was not set"
                    },
                    checkNotNull(threshold) { "`threshold` is required but was not set" },
                    expiresAfter,
                    expiresAfterUnit,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is CustomerCreditTopUpCreateBody && this.amount == other.amount && this.currency == other.currency && this.invoiceSettings == other.invoiceSettings && this.perUnitCostBasis == other.perUnitCostBasis && this.threshold == other.threshold && this.expiresAfter == other.expiresAfter && this.expiresAfterUnit == other.expiresAfterUnit && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(amount, currency, invoiceSettings, perUnitCostBasis, threshold, expiresAfter, expiresAfterUnit, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "CustomerCreditTopUpCreateBody{amount=$amount, currency=$currency, invoiceSettings=$invoiceSettings, perUnitCostBasis=$perUnitCostBasis, threshold=$threshold, expiresAfter=$expiresAfter, expiresAfterUnit=$expiresAfterUnit, additionalProperties=$additionalProperties}"
    }

    fun _additionalHeaders(): Map<String, List<String>> = additionalHeaders

    fun _additionalQueryParams(): Map<String, List<String>> = additionalQueryParams

    fun _additionalBodyProperties(): Map<String, JsonValue> = additionalBodyProperties

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is CustomerCreditTopUpCreateParams && this.customerId == other.customerId && this.amount == other.amount && this.currency == other.currency && this.invoiceSettings == other.invoiceSettings && this.perUnitCostBasis == other.perUnitCostBasis && this.threshold == other.threshold && this.expiresAfter == other.expiresAfter && this.expiresAfterUnit == other.expiresAfterUnit && this.additionalHeaders == other.additionalHeaders && this.additionalQueryParams == other.additionalQueryParams && this.additionalBodyProperties == other.additionalBodyProperties /* spotless:on */
    }

    override fun hashCode(): Int {
        return /* spotless:off */ Objects.hash(customerId, amount, currency, invoiceSettings, perUnitCostBasis, threshold, expiresAfter, expiresAfterUnit, additionalHeaders, additionalQueryParams, additionalBodyProperties) /* spotless:on */
    }

    override fun toString() =
        "CustomerCreditTopUpCreateParams{customerId=$customerId, amount=$amount, currency=$currency, invoiceSettings=$invoiceSettings, perUnitCostBasis=$perUnitCostBasis, threshold=$threshold, expiresAfter=$expiresAfter, expiresAfterUnit=$expiresAfterUnit, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams, additionalBodyProperties=$additionalBodyProperties}"

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    @NoAutoDetect
    class Builder {

        private var customerId: String? = null
        private var amount: String? = null
        private var currency: String? = null
        private var invoiceSettings: InvoiceSettings? = null
        private var perUnitCostBasis: String? = null
        private var threshold: String? = null
        private var expiresAfter: Long? = null
        private var expiresAfterUnit: ExpiresAfterUnit? = null
        private var additionalHeaders: ListMultimap<String, String> = ArrayListMultimap.create()
        private var additionalQueryParams: ListMultimap<String, String> = ArrayListMultimap.create()
        private var additionalBodyProperties: MutableMap<String, JsonValue> = mutableMapOf()

        @JvmSynthetic
        internal fun from(customerCreditTopUpCreateParams: CustomerCreditTopUpCreateParams) =
            apply {
                this.customerId = customerCreditTopUpCreateParams.customerId
                this.amount = customerCreditTopUpCreateParams.amount
                this.currency = customerCreditTopUpCreateParams.currency
                this.invoiceSettings = customerCreditTopUpCreateParams.invoiceSettings
                this.perUnitCostBasis = customerCreditTopUpCreateParams.perUnitCostBasis
                this.threshold = customerCreditTopUpCreateParams.threshold
                this.expiresAfter = customerCreditTopUpCreateParams.expiresAfter
                this.expiresAfterUnit = customerCreditTopUpCreateParams.expiresAfterUnit
                additionalHeaders(customerCreditTopUpCreateParams.additionalHeaders)
                additionalQueryParams(customerCreditTopUpCreateParams.additionalQueryParams)
                additionalBodyProperties(customerCreditTopUpCreateParams.additionalBodyProperties)
            }

        fun customerId(customerId: String) = apply { this.customerId = customerId }

        /** The amount to increment when the threshold is reached. */
        fun amount(amount: String) = apply { this.amount = amount }

        /**
         * The currency or custom pricing unit to use for this top-up. If this is a real-world
         * currency, it must match the customer's invoicing currency.
         */
        fun currency(currency: String) = apply { this.currency = currency }

        /** Settings for invoices generated by triggered top-ups. */
        fun invoiceSettings(invoiceSettings: InvoiceSettings) = apply {
            this.invoiceSettings = invoiceSettings
        }

        /** How much, in the customer's currency, to charge for each unit. */
        fun perUnitCostBasis(perUnitCostBasis: String) = apply {
            this.perUnitCostBasis = perUnitCostBasis
        }

        /**
         * The threshold at which to trigger the top-up. If the balance is at or below this
         * threshold, the top-up will be triggered.
         */
        fun threshold(threshold: String) = apply { this.threshold = threshold }

        /**
         * The number of days or months after which the top-up expires. If unspecified, it does not
         * expire.
         */
        fun expiresAfter(expiresAfter: Long) = apply { this.expiresAfter = expiresAfter }

        /** The unit of expires_after. */
        fun expiresAfterUnit(expiresAfterUnit: ExpiresAfterUnit) = apply {
            this.expiresAfterUnit = expiresAfterUnit
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.putAll(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            additionalHeaders.forEach(::putAdditionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replaceValues(name, listOf(value))
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replaceValues(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            additionalHeaders.forEach(::replaceAdditionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.removeAll(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            names.forEach(::removeAdditionalHeaders)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.putAll(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                additionalQueryParams.forEach(::putAdditionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replaceValues(key, listOf(value))
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replaceValues(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                additionalQueryParams.forEach(::replaceAdditionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply {
            additionalQueryParams.removeAll(key)
        }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            keys.forEach(::removeAdditionalQueryParams)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            this.additionalBodyProperties.clear()
            this.additionalBodyProperties.putAll(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            this.additionalBodyProperties.put(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                this.additionalBodyProperties.putAll(additionalBodyProperties)
            }

        fun build(): CustomerCreditTopUpCreateParams =
            CustomerCreditTopUpCreateParams(
                checkNotNull(customerId) { "`customerId` is required but was not set" },
                checkNotNull(amount) { "`amount` is required but was not set" },
                checkNotNull(currency) { "`currency` is required but was not set" },
                checkNotNull(invoiceSettings) { "`invoiceSettings` is required but was not set" },
                checkNotNull(perUnitCostBasis) { "`perUnitCostBasis` is required but was not set" },
                checkNotNull(threshold) { "`threshold` is required but was not set" },
                expiresAfter,
                expiresAfterUnit,
                additionalHeaders
                    .asMap()
                    .mapValues { it.value.toList().toImmutable() }
                    .toImmutable(),
                additionalQueryParams
                    .asMap()
                    .mapValues { it.value.toList().toImmutable() }
                    .toImmutable(),
                additionalBodyProperties.toImmutable(),
            )
    }

    /** Settings for invoices generated by triggered top-ups. */
    @JsonDeserialize(builder = InvoiceSettings.Builder::class)
    @NoAutoDetect
    class InvoiceSettings
    private constructor(
        private val autoCollection: Boolean?,
        private val netTerms: Long?,
        private val memo: String?,
        private val requireSuccessfulPayment: Boolean?,
        private val additionalProperties: Map<String, JsonValue>,
    ) {

        /**
         * Whether the credits purchase invoice should auto collect with the customer's saved
         * payment method.
         */
        @JsonProperty("auto_collection") fun autoCollection(): Boolean? = autoCollection

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0.
         */
        @JsonProperty("net_terms") fun netTerms(): Long? = netTerms

        /** An optional memo to display on the invoice. */
        @JsonProperty("memo") fun memo(): String? = memo

        /**
         * If true, new credit blocks created by this top-up will require that the corresponding
         * invoice is paid before they can be drawn down from.
         */
        @JsonProperty("require_successful_payment")
        fun requireSuccessfulPayment(): Boolean? = requireSuccessfulPayment

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        class Builder {

            private var autoCollection: Boolean? = null
            private var netTerms: Long? = null
            private var memo: String? = null
            private var requireSuccessfulPayment: Boolean? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(invoiceSettings: InvoiceSettings) = apply {
                this.autoCollection = invoiceSettings.autoCollection
                this.netTerms = invoiceSettings.netTerms
                this.memo = invoiceSettings.memo
                this.requireSuccessfulPayment = invoiceSettings.requireSuccessfulPayment
                additionalProperties(invoiceSettings.additionalProperties)
            }

            /**
             * Whether the credits purchase invoice should auto collect with the customer's saved
             * payment method.
             */
            @JsonProperty("auto_collection")
            fun autoCollection(autoCollection: Boolean) = apply {
                this.autoCollection = autoCollection
            }

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0.
             */
            @JsonProperty("net_terms")
            fun netTerms(netTerms: Long) = apply { this.netTerms = netTerms }

            /** An optional memo to display on the invoice. */
            @JsonProperty("memo") fun memo(memo: String) = apply { this.memo = memo }

            /**
             * If true, new credit blocks created by this top-up will require that the corresponding
             * invoice is paid before they can be drawn down from.
             */
            @JsonProperty("require_successful_payment")
            fun requireSuccessfulPayment(requireSuccessfulPayment: Boolean) = apply {
                this.requireSuccessfulPayment = requireSuccessfulPayment
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                this.additionalProperties.putAll(additionalProperties)
            }

            @JsonAnySetter
            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                this.additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun build(): InvoiceSettings =
                InvoiceSettings(
                    checkNotNull(autoCollection) { "`autoCollection` is required but was not set" },
                    checkNotNull(netTerms) { "`netTerms` is required but was not set" },
                    memo,
                    requireSuccessfulPayment,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is InvoiceSettings && this.autoCollection == other.autoCollection && this.netTerms == other.netTerms && this.memo == other.memo && this.requireSuccessfulPayment == other.requireSuccessfulPayment && this.additionalProperties == other.additionalProperties /* spotless:on */
        }

        private var hashCode: Int = 0

        override fun hashCode(): Int {
            if (hashCode == 0) {
                hashCode = /* spotless:off */ Objects.hash(autoCollection, netTerms, memo, requireSuccessfulPayment, additionalProperties) /* spotless:on */
            }
            return hashCode
        }

        override fun toString() =
            "InvoiceSettings{autoCollection=$autoCollection, netTerms=$netTerms, memo=$memo, requireSuccessfulPayment=$requireSuccessfulPayment, additionalProperties=$additionalProperties}"
    }

    class ExpiresAfterUnit
    @JsonCreator
    private constructor(
        private val value: JsonField<String>,
    ) : Enum {

        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ExpiresAfterUnit && this.value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()

        companion object {

            @JvmField val DAY = ExpiresAfterUnit(JsonField.of("day"))

            @JvmField val MONTH = ExpiresAfterUnit(JsonField.of("month"))

            @JvmStatic fun of(value: String) = ExpiresAfterUnit(JsonField.of(value))
        }

        enum class Known {
            DAY,
            MONTH,
        }

        enum class Value {
            DAY,
            MONTH,
            _UNKNOWN,
        }

        fun value(): Value =
            when (this) {
                DAY -> Value.DAY
                MONTH -> Value.MONTH
                else -> Value._UNKNOWN
            }

        fun known(): Known =
            when (this) {
                DAY -> Known.DAY
                MONTH -> Known.MONTH
                else -> throw OrbInvalidDataException("Unknown ExpiresAfterUnit: $value")
            }

        fun asString(): String = _value().asStringOrThrow()
    }
}
