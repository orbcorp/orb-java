// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.Params
import com.withorb.api.core.checkKnown
import com.withorb.api.core.checkRequired
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/** This endpoint allows creation of plans including their prices. */
class PlanCreateParams
private constructor(
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    /**
     * An ISO 4217 currency string for invoices generated by subscriptions on this plan.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun currency(): String = body.currency()

    /**
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun name(): String = body.name()

    /**
     * Prices for this plan. If the plan has phases, this includes prices across all phases of the
     * plan.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun prices(): List<Price> = body.prices()

    /**
     * Adjustments for this plan. If the plan has phases, this includes adjustments across all
     * phases of the plan.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun adjustments(): Optional<List<Adjustment>> = body.adjustments()

    /**
     * Free-form text which is available on the invoice PDF and the Orb invoice portal.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun defaultInvoiceMemo(): Optional<String> = body.defaultInvoiceMemo()

    /**
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun externalPlanId(): Optional<String> = body.externalPlanId()

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed by setting
     * the value to `null`, and the entire metadata mapping can be cleared by setting `metadata` to
     * `null`.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun metadata(): Optional<Metadata> = body.metadata()

    /**
     * The net terms determines the difference between the invoice date and the issue date for the
     * invoice. If you intend the invoice to be due on issue, set this to 0.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun netTerms(): Optional<Long> = body.netTerms()

    /**
     * Configuration of pre-defined phases, each with their own prices and adjustments. Leave
     * unspecified for plans with a single phase.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun planPhases(): Optional<List<PlanPhase>> = body.planPhases()

    /**
     * The status of the plan to create (either active or draft). If not specified, this defaults to
     * active.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun status(): Optional<Status> = body.status()

    /**
     * Returns the raw JSON value of [currency].
     *
     * Unlike [currency], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _currency(): JsonField<String> = body._currency()

    /**
     * Returns the raw JSON value of [name].
     *
     * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _name(): JsonField<String> = body._name()

    /**
     * Returns the raw JSON value of [prices].
     *
     * Unlike [prices], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _prices(): JsonField<List<Price>> = body._prices()

    /**
     * Returns the raw JSON value of [adjustments].
     *
     * Unlike [adjustments], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _adjustments(): JsonField<List<Adjustment>> = body._adjustments()

    /**
     * Returns the raw JSON value of [defaultInvoiceMemo].
     *
     * Unlike [defaultInvoiceMemo], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _defaultInvoiceMemo(): JsonField<String> = body._defaultInvoiceMemo()

    /**
     * Returns the raw JSON value of [externalPlanId].
     *
     * Unlike [externalPlanId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _externalPlanId(): JsonField<String> = body._externalPlanId()

    /**
     * Returns the raw JSON value of [metadata].
     *
     * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _metadata(): JsonField<Metadata> = body._metadata()

    /**
     * Returns the raw JSON value of [netTerms].
     *
     * Unlike [netTerms], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _netTerms(): JsonField<Long> = body._netTerms()

    /**
     * Returns the raw JSON value of [planPhases].
     *
     * Unlike [planPhases], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _planPhases(): JsonField<List<PlanPhase>> = body._planPhases()

    /**
     * Returns the raw JSON value of [status].
     *
     * Unlike [status], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _status(): JsonField<Status> = body._status()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    /** Additional headers to send with the request. */
    fun _additionalHeaders(): Headers = additionalHeaders

    /** Additional query param to send with the request. */
    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [PlanCreateParams].
         *
         * The following fields are required:
         * ```java
         * .currency()
         * .name()
         * .prices()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [PlanCreateParams]. */
    class Builder internal constructor() {

        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(planCreateParams: PlanCreateParams) = apply {
            body = planCreateParams.body.toBuilder()
            additionalHeaders = planCreateParams.additionalHeaders.toBuilder()
            additionalQueryParams = planCreateParams.additionalQueryParams.toBuilder()
        }

        /**
         * Sets the entire request body.
         *
         * This is generally only useful if you are already constructing the body separately.
         * Otherwise, it's more convenient to use the top-level setters instead:
         * - [currency]
         * - [name]
         * - [prices]
         * - [adjustments]
         * - [defaultInvoiceMemo]
         * - etc.
         */
        fun body(body: Body) = apply { this.body = body.toBuilder() }

        /** An ISO 4217 currency string for invoices generated by subscriptions on this plan. */
        fun currency(currency: String) = apply { body.currency(currency) }

        /**
         * Sets [Builder.currency] to an arbitrary JSON value.
         *
         * You should usually call [Builder.currency] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun currency(currency: JsonField<String>) = apply { body.currency(currency) }

        fun name(name: String) = apply { body.name(name) }

        /**
         * Sets [Builder.name] to an arbitrary JSON value.
         *
         * You should usually call [Builder.name] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun name(name: JsonField<String>) = apply { body.name(name) }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all phases of
         * the plan.
         */
        fun prices(prices: List<Price>) = apply { body.prices(prices) }

        /**
         * Sets [Builder.prices] to an arbitrary JSON value.
         *
         * You should usually call [Builder.prices] with a well-typed `List<Price>` value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun prices(prices: JsonField<List<Price>>) = apply { body.prices(prices) }

        /**
         * Adds a single [Price] to [prices].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addPrice(price: Price) = apply { body.addPrice(price) }

        /**
         * Adjustments for this plan. If the plan has phases, this includes adjustments across all
         * phases of the plan.
         */
        fun adjustments(adjustments: List<Adjustment>?) = apply { body.adjustments(adjustments) }

        /** Alias for calling [Builder.adjustments] with `adjustments.orElse(null)`. */
        fun adjustments(adjustments: Optional<List<Adjustment>>) =
            adjustments(adjustments.getOrNull())

        /**
         * Sets [Builder.adjustments] to an arbitrary JSON value.
         *
         * You should usually call [Builder.adjustments] with a well-typed `List<Adjustment>` value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun adjustments(adjustments: JsonField<List<Adjustment>>) = apply {
            body.adjustments(adjustments)
        }

        /**
         * Adds a single [Adjustment] to [adjustments].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAdjustment(adjustment: Adjustment) = apply { body.addAdjustment(adjustment) }

        /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
        fun defaultInvoiceMemo(defaultInvoiceMemo: String?) = apply {
            body.defaultInvoiceMemo(defaultInvoiceMemo)
        }

        /**
         * Alias for calling [Builder.defaultInvoiceMemo] with `defaultInvoiceMemo.orElse(null)`.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) =
            defaultInvoiceMemo(defaultInvoiceMemo.getOrNull())

        /**
         * Sets [Builder.defaultInvoiceMemo] to an arbitrary JSON value.
         *
         * You should usually call [Builder.defaultInvoiceMemo] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: JsonField<String>) = apply {
            body.defaultInvoiceMemo(defaultInvoiceMemo)
        }

        fun externalPlanId(externalPlanId: String?) = apply { body.externalPlanId(externalPlanId) }

        /** Alias for calling [Builder.externalPlanId] with `externalPlanId.orElse(null)`. */
        fun externalPlanId(externalPlanId: Optional<String>) =
            externalPlanId(externalPlanId.getOrNull())

        /**
         * Sets [Builder.externalPlanId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.externalPlanId] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun externalPlanId(externalPlanId: JsonField<String>) = apply {
            body.externalPlanId(externalPlanId)
        }

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         */
        fun metadata(metadata: Metadata?) = apply { body.metadata(metadata) }

        /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
        fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

        /**
         * Sets [Builder.metadata] to an arbitrary JSON value.
         *
         * You should usually call [Builder.metadata] with a well-typed [Metadata] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun metadata(metadata: JsonField<Metadata>) = apply { body.metadata(metadata) }

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0.
         */
        fun netTerms(netTerms: Long?) = apply { body.netTerms(netTerms) }

        /**
         * Alias for [Builder.netTerms].
         *
         * This unboxed primitive overload exists for backwards compatibility.
         */
        fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

        /** Alias for calling [Builder.netTerms] with `netTerms.orElse(null)`. */
        fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.getOrNull())

        /**
         * Sets [Builder.netTerms] to an arbitrary JSON value.
         *
         * You should usually call [Builder.netTerms] with a well-typed [Long] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun netTerms(netTerms: JsonField<Long>) = apply { body.netTerms(netTerms) }

        /**
         * Configuration of pre-defined phases, each with their own prices and adjustments. Leave
         * unspecified for plans with a single phase.
         */
        fun planPhases(planPhases: List<PlanPhase>?) = apply { body.planPhases(planPhases) }

        /** Alias for calling [Builder.planPhases] with `planPhases.orElse(null)`. */
        fun planPhases(planPhases: Optional<List<PlanPhase>>) = planPhases(planPhases.getOrNull())

        /**
         * Sets [Builder.planPhases] to an arbitrary JSON value.
         *
         * You should usually call [Builder.planPhases] with a well-typed `List<PlanPhase>` value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun planPhases(planPhases: JsonField<List<PlanPhase>>) = apply {
            body.planPhases(planPhases)
        }

        /**
         * Adds a single [PlanPhase] to [planPhases].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addPlanPhase(planPhase: PlanPhase) = apply { body.addPlanPhase(planPhase) }

        /**
         * The status of the plan to create (either active or draft). If not specified, this
         * defaults to active.
         */
        fun status(status: Status) = apply { body.status(status) }

        /**
         * Sets [Builder.status] to an arbitrary JSON value.
         *
         * You should usually call [Builder.status] with a well-typed [Status] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun status(status: JsonField<Status>) = apply { body.status(status) }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [PlanCreateParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .currency()
         * .name()
         * .prices()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): PlanCreateParams =
            PlanCreateParams(body.build(), additionalHeaders.build(), additionalQueryParams.build())
    }

    fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    class Body
    private constructor(
        private val currency: JsonField<String>,
        private val name: JsonField<String>,
        private val prices: JsonField<List<Price>>,
        private val adjustments: JsonField<List<Adjustment>>,
        private val defaultInvoiceMemo: JsonField<String>,
        private val externalPlanId: JsonField<String>,
        private val metadata: JsonField<Metadata>,
        private val netTerms: JsonField<Long>,
        private val planPhases: JsonField<List<PlanPhase>>,
        private val status: JsonField<Status>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("currency")
            @ExcludeMissing
            currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("prices")
            @ExcludeMissing
            prices: JsonField<List<Price>> = JsonMissing.of(),
            @JsonProperty("adjustments")
            @ExcludeMissing
            adjustments: JsonField<List<Adjustment>> = JsonMissing.of(),
            @JsonProperty("default_invoice_memo")
            @ExcludeMissing
            defaultInvoiceMemo: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_plan_id")
            @ExcludeMissing
            externalPlanId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("metadata")
            @ExcludeMissing
            metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonProperty("net_terms") @ExcludeMissing netTerms: JsonField<Long> = JsonMissing.of(),
            @JsonProperty("plan_phases")
            @ExcludeMissing
            planPhases: JsonField<List<PlanPhase>> = JsonMissing.of(),
            @JsonProperty("status") @ExcludeMissing status: JsonField<Status> = JsonMissing.of(),
        ) : this(
            currency,
            name,
            prices,
            adjustments,
            defaultInvoiceMemo,
            externalPlanId,
            metadata,
            netTerms,
            planPhases,
            status,
            mutableMapOf(),
        )

        /**
         * An ISO 4217 currency string for invoices generated by subscriptions on this plan.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun currency(): String = currency.getRequired("currency")

        /**
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun name(): String = name.getRequired("name")

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all phases of
         * the plan.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun prices(): List<Price> = prices.getRequired("prices")

        /**
         * Adjustments for this plan. If the plan has phases, this includes adjustments across all
         * phases of the plan.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun adjustments(): Optional<List<Adjustment>> = adjustments.getOptional("adjustments")

        /**
         * Free-form text which is available on the invoice PDF and the Orb invoice portal.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun defaultInvoiceMemo(): Optional<String> =
            defaultInvoiceMemo.getOptional("default_invoice_memo")

        /**
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun externalPlanId(): Optional<String> = externalPlanId.getOptional("external_plan_id")

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun netTerms(): Optional<Long> = netTerms.getOptional("net_terms")

        /**
         * Configuration of pre-defined phases, each with their own prices and adjustments. Leave
         * unspecified for plans with a single phase.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun planPhases(): Optional<List<PlanPhase>> = planPhases.getOptional("plan_phases")

        /**
         * The status of the plan to create (either active or draft). If not specified, this
         * defaults to active.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun status(): Optional<Status> = status.getOptional("status")

        /**
         * Returns the raw JSON value of [currency].
         *
         * Unlike [currency], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

        /**
         * Returns the raw JSON value of [name].
         *
         * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

        /**
         * Returns the raw JSON value of [prices].
         *
         * Unlike [prices], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("prices") @ExcludeMissing fun _prices(): JsonField<List<Price>> = prices

        /**
         * Returns the raw JSON value of [adjustments].
         *
         * Unlike [adjustments], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("adjustments")
        @ExcludeMissing
        fun _adjustments(): JsonField<List<Adjustment>> = adjustments

        /**
         * Returns the raw JSON value of [defaultInvoiceMemo].
         *
         * Unlike [defaultInvoiceMemo], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("default_invoice_memo")
        @ExcludeMissing
        fun _defaultInvoiceMemo(): JsonField<String> = defaultInvoiceMemo

        /**
         * Returns the raw JSON value of [externalPlanId].
         *
         * Unlike [externalPlanId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("external_plan_id")
        @ExcludeMissing
        fun _externalPlanId(): JsonField<String> = externalPlanId

        /**
         * Returns the raw JSON value of [metadata].
         *
         * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("metadata") @ExcludeMissing fun _metadata(): JsonField<Metadata> = metadata

        /**
         * Returns the raw JSON value of [netTerms].
         *
         * Unlike [netTerms], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("net_terms") @ExcludeMissing fun _netTerms(): JsonField<Long> = netTerms

        /**
         * Returns the raw JSON value of [planPhases].
         *
         * Unlike [planPhases], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("plan_phases")
        @ExcludeMissing
        fun _planPhases(): JsonField<List<PlanPhase>> = planPhases

        /**
         * Returns the raw JSON value of [status].
         *
         * Unlike [status], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("status") @ExcludeMissing fun _status(): JsonField<Status> = status

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             * ```java
             * .currency()
             * .name()
             * .prices()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var currency: JsonField<String>? = null
            private var name: JsonField<String>? = null
            private var prices: JsonField<MutableList<Price>>? = null
            private var adjustments: JsonField<MutableList<Adjustment>>? = null
            private var defaultInvoiceMemo: JsonField<String> = JsonMissing.of()
            private var externalPlanId: JsonField<String> = JsonMissing.of()
            private var metadata: JsonField<Metadata> = JsonMissing.of()
            private var netTerms: JsonField<Long> = JsonMissing.of()
            private var planPhases: JsonField<MutableList<PlanPhase>>? = null
            private var status: JsonField<Status> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                currency = body.currency
                name = body.name
                prices = body.prices.map { it.toMutableList() }
                adjustments = body.adjustments.map { it.toMutableList() }
                defaultInvoiceMemo = body.defaultInvoiceMemo
                externalPlanId = body.externalPlanId
                metadata = body.metadata
                netTerms = body.netTerms
                planPhases = body.planPhases.map { it.toMutableList() }
                status = body.status
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            /** An ISO 4217 currency string for invoices generated by subscriptions on this plan. */
            fun currency(currency: String) = currency(JsonField.of(currency))

            /**
             * Sets [Builder.currency] to an arbitrary JSON value.
             *
             * You should usually call [Builder.currency] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun currency(currency: JsonField<String>) = apply { this.currency = currency }

            fun name(name: String) = name(JsonField.of(name))

            /**
             * Sets [Builder.name] to an arbitrary JSON value.
             *
             * You should usually call [Builder.name] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun name(name: JsonField<String>) = apply { this.name = name }

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all phases
             * of the plan.
             */
            fun prices(prices: List<Price>) = prices(JsonField.of(prices))

            /**
             * Sets [Builder.prices] to an arbitrary JSON value.
             *
             * You should usually call [Builder.prices] with a well-typed `List<Price>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun prices(prices: JsonField<List<Price>>) = apply {
                this.prices = prices.map { it.toMutableList() }
            }

            /**
             * Adds a single [Price] to [prices].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addPrice(price: Price) = apply {
                prices =
                    (prices ?: JsonField.of(mutableListOf())).also {
                        checkKnown("prices", it).add(price)
                    }
            }

            /**
             * Adjustments for this plan. If the plan has phases, this includes adjustments across
             * all phases of the plan.
             */
            fun adjustments(adjustments: List<Adjustment>?) =
                adjustments(JsonField.ofNullable(adjustments))

            /** Alias for calling [Builder.adjustments] with `adjustments.orElse(null)`. */
            fun adjustments(adjustments: Optional<List<Adjustment>>) =
                adjustments(adjustments.getOrNull())

            /**
             * Sets [Builder.adjustments] to an arbitrary JSON value.
             *
             * You should usually call [Builder.adjustments] with a well-typed `List<Adjustment>`
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun adjustments(adjustments: JsonField<List<Adjustment>>) = apply {
                this.adjustments = adjustments.map { it.toMutableList() }
            }

            /**
             * Adds a single [Adjustment] to [adjustments].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAdjustment(adjustment: Adjustment) = apply {
                adjustments =
                    (adjustments ?: JsonField.of(mutableListOf())).also {
                        checkKnown("adjustments", it).add(adjustment)
                    }
            }

            /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
            fun defaultInvoiceMemo(defaultInvoiceMemo: String?) =
                defaultInvoiceMemo(JsonField.ofNullable(defaultInvoiceMemo))

            /**
             * Alias for calling [Builder.defaultInvoiceMemo] with
             * `defaultInvoiceMemo.orElse(null)`.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) =
                defaultInvoiceMemo(defaultInvoiceMemo.getOrNull())

            /**
             * Sets [Builder.defaultInvoiceMemo] to an arbitrary JSON value.
             *
             * You should usually call [Builder.defaultInvoiceMemo] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: JsonField<String>) = apply {
                this.defaultInvoiceMemo = defaultInvoiceMemo
            }

            fun externalPlanId(externalPlanId: String?) =
                externalPlanId(JsonField.ofNullable(externalPlanId))

            /** Alias for calling [Builder.externalPlanId] with `externalPlanId.orElse(null)`. */
            fun externalPlanId(externalPlanId: Optional<String>) =
                externalPlanId(externalPlanId.getOrNull())

            /**
             * Sets [Builder.externalPlanId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.externalPlanId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun externalPlanId(externalPlanId: JsonField<String>) = apply {
                this.externalPlanId = externalPlanId
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

            /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
            fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

            /**
             * Sets [Builder.metadata] to an arbitrary JSON value.
             *
             * You should usually call [Builder.metadata] with a well-typed [Metadata] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0.
             */
            fun netTerms(netTerms: Long?) = netTerms(JsonField.ofNullable(netTerms))

            /**
             * Alias for [Builder.netTerms].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

            /** Alias for calling [Builder.netTerms] with `netTerms.orElse(null)`. */
            fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.getOrNull())

            /**
             * Sets [Builder.netTerms] to an arbitrary JSON value.
             *
             * You should usually call [Builder.netTerms] with a well-typed [Long] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun netTerms(netTerms: JsonField<Long>) = apply { this.netTerms = netTerms }

            /**
             * Configuration of pre-defined phases, each with their own prices and adjustments.
             * Leave unspecified for plans with a single phase.
             */
            fun planPhases(planPhases: List<PlanPhase>?) =
                planPhases(JsonField.ofNullable(planPhases))

            /** Alias for calling [Builder.planPhases] with `planPhases.orElse(null)`. */
            fun planPhases(planPhases: Optional<List<PlanPhase>>) =
                planPhases(planPhases.getOrNull())

            /**
             * Sets [Builder.planPhases] to an arbitrary JSON value.
             *
             * You should usually call [Builder.planPhases] with a well-typed `List<PlanPhase>`
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun planPhases(planPhases: JsonField<List<PlanPhase>>) = apply {
                this.planPhases = planPhases.map { it.toMutableList() }
            }

            /**
             * Adds a single [PlanPhase] to [planPhases].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addPlanPhase(planPhase: PlanPhase) = apply {
                planPhases =
                    (planPhases ?: JsonField.of(mutableListOf())).also {
                        checkKnown("planPhases", it).add(planPhase)
                    }
            }

            /**
             * The status of the plan to create (either active or draft). If not specified, this
             * defaults to active.
             */
            fun status(status: Status) = status(JsonField.of(status))

            /**
             * Sets [Builder.status] to an arbitrary JSON value.
             *
             * You should usually call [Builder.status] with a well-typed [Status] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun status(status: JsonField<Status>) = apply { this.status = status }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Body].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .currency()
             * .name()
             * .prices()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Body =
                Body(
                    checkRequired("currency", currency),
                    checkRequired("name", name),
                    checkRequired("prices", prices).map { it.toImmutable() },
                    (adjustments ?: JsonMissing.of()).map { it.toImmutable() },
                    defaultInvoiceMemo,
                    externalPlanId,
                    metadata,
                    netTerms,
                    (planPhases ?: JsonMissing.of()).map { it.toImmutable() },
                    status,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            currency()
            name()
            prices().forEach { it.validate() }
            adjustments().ifPresent { it.forEach { it.validate() } }
            defaultInvoiceMemo()
            externalPlanId()
            metadata().ifPresent { it.validate() }
            netTerms()
            planPhases().ifPresent { it.forEach { it.validate() } }
            status().ifPresent { it.validate() }
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (currency.asKnown().isPresent) 1 else 0) +
                (if (name.asKnown().isPresent) 1 else 0) +
                (prices.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0) +
                (adjustments.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0) +
                (if (defaultInvoiceMemo.asKnown().isPresent) 1 else 0) +
                (if (externalPlanId.asKnown().isPresent) 1 else 0) +
                (metadata.asKnown().getOrNull()?.validity() ?: 0) +
                (if (netTerms.asKnown().isPresent) 1 else 0) +
                (planPhases.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0) +
                (status.asKnown().getOrNull()?.validity() ?: 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Body && currency == other.currency && name == other.name && prices == other.prices && adjustments == other.adjustments && defaultInvoiceMemo == other.defaultInvoiceMemo && externalPlanId == other.externalPlanId && metadata == other.metadata && netTerms == other.netTerms && planPhases == other.planPhases && status == other.status && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(currency, name, prices, adjustments, defaultInvoiceMemo, externalPlanId, metadata, netTerms, planPhases, status, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{currency=$currency, name=$name, prices=$prices, adjustments=$adjustments, defaultInvoiceMemo=$defaultInvoiceMemo, externalPlanId=$externalPlanId, metadata=$metadata, netTerms=$netTerms, planPhases=$planPhases, status=$status, additionalProperties=$additionalProperties}"
    }

    class Price
    private constructor(
        private val allocationPrice: JsonField<NewAllocationPrice>,
        private val planPhaseOrder: JsonField<Long>,
        private val price: JsonField<InnerPrice>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("allocation_price")
            @ExcludeMissing
            allocationPrice: JsonField<NewAllocationPrice> = JsonMissing.of(),
            @JsonProperty("plan_phase_order")
            @ExcludeMissing
            planPhaseOrder: JsonField<Long> = JsonMissing.of(),
            @JsonProperty("price") @ExcludeMissing price: JsonField<InnerPrice> = JsonMissing.of(),
        ) : this(allocationPrice, planPhaseOrder, price, mutableMapOf())

        /**
         * The allocation price to add to the plan.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun allocationPrice(): Optional<NewAllocationPrice> =
            allocationPrice.getOptional("allocation_price")

        /**
         * The phase to add this price to.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun planPhaseOrder(): Optional<Long> = planPhaseOrder.getOptional("plan_phase_order")

        /**
         * The price to add to the plan
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun price(): Optional<InnerPrice> = price.getOptional("price")

        /**
         * Returns the raw JSON value of [allocationPrice].
         *
         * Unlike [allocationPrice], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("allocation_price")
        @ExcludeMissing
        fun _allocationPrice(): JsonField<NewAllocationPrice> = allocationPrice

        /**
         * Returns the raw JSON value of [planPhaseOrder].
         *
         * Unlike [planPhaseOrder], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("plan_phase_order")
        @ExcludeMissing
        fun _planPhaseOrder(): JsonField<Long> = planPhaseOrder

        /**
         * Returns the raw JSON value of [price].
         *
         * Unlike [price], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("price") @ExcludeMissing fun _price(): JsonField<InnerPrice> = price

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [Price]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Price]. */
        class Builder internal constructor() {

            private var allocationPrice: JsonField<NewAllocationPrice> = JsonMissing.of()
            private var planPhaseOrder: JsonField<Long> = JsonMissing.of()
            private var price: JsonField<InnerPrice> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(price: Price) = apply {
                allocationPrice = price.allocationPrice
                planPhaseOrder = price.planPhaseOrder
                this.price = price.price
                additionalProperties = price.additionalProperties.toMutableMap()
            }

            /** The allocation price to add to the plan. */
            fun allocationPrice(allocationPrice: NewAllocationPrice?) =
                allocationPrice(JsonField.ofNullable(allocationPrice))

            /** Alias for calling [Builder.allocationPrice] with `allocationPrice.orElse(null)`. */
            fun allocationPrice(allocationPrice: Optional<NewAllocationPrice>) =
                allocationPrice(allocationPrice.getOrNull())

            /**
             * Sets [Builder.allocationPrice] to an arbitrary JSON value.
             *
             * You should usually call [Builder.allocationPrice] with a well-typed
             * [NewAllocationPrice] value instead. This method is primarily for setting the field to
             * an undocumented or not yet supported value.
             */
            fun allocationPrice(allocationPrice: JsonField<NewAllocationPrice>) = apply {
                this.allocationPrice = allocationPrice
            }

            /** The phase to add this price to. */
            fun planPhaseOrder(planPhaseOrder: Long?) =
                planPhaseOrder(JsonField.ofNullable(planPhaseOrder))

            /**
             * Alias for [Builder.planPhaseOrder].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun planPhaseOrder(planPhaseOrder: Long) = planPhaseOrder(planPhaseOrder as Long?)

            /** Alias for calling [Builder.planPhaseOrder] with `planPhaseOrder.orElse(null)`. */
            fun planPhaseOrder(planPhaseOrder: Optional<Long>) =
                planPhaseOrder(planPhaseOrder.getOrNull())

            /**
             * Sets [Builder.planPhaseOrder] to an arbitrary JSON value.
             *
             * You should usually call [Builder.planPhaseOrder] with a well-typed [Long] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun planPhaseOrder(planPhaseOrder: JsonField<Long>) = apply {
                this.planPhaseOrder = planPhaseOrder
            }

            /** The price to add to the plan */
            fun price(price: InnerPrice?) = price(JsonField.ofNullable(price))

            /** Alias for calling [Builder.price] with `price.orElse(null)`. */
            fun price(price: Optional<InnerPrice>) = price(price.getOrNull())

            /**
             * Sets [Builder.price] to an arbitrary JSON value.
             *
             * You should usually call [Builder.price] with a well-typed [InnerPrice] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun price(price: JsonField<InnerPrice>) = apply { this.price = price }

            /** Alias for calling [price] with `InnerPrice.ofUnit(unit)`. */
            fun price(unit: NewPlanUnitPrice) = price(InnerPrice.ofUnit(unit))

            /** Alias for calling [price] with `InnerPrice.ofPackage(package_)`. */
            fun price(package_: NewPlanPackagePrice) = price(InnerPrice.ofPackage(package_))

            /** Alias for calling [price] with `InnerPrice.ofMatrix(matrix)`. */
            fun price(matrix: NewPlanMatrixPrice) = price(InnerPrice.ofMatrix(matrix))

            /** Alias for calling [price] with `InnerPrice.ofTiered(tiered)`. */
            fun price(tiered: NewPlanTieredPrice) = price(InnerPrice.ofTiered(tiered))

            /** Alias for calling [price] with `InnerPrice.ofTieredBps(tieredBps)`. */
            fun price(tieredBps: NewPlanTieredBpsPrice) = price(InnerPrice.ofTieredBps(tieredBps))

            /** Alias for calling [price] with `InnerPrice.ofBps(bps)`. */
            fun price(bps: NewPlanBpsPrice) = price(InnerPrice.ofBps(bps))

            /** Alias for calling [price] with `InnerPrice.ofBulkBps(bulkBps)`. */
            fun price(bulkBps: NewPlanBulkBpsPrice) = price(InnerPrice.ofBulkBps(bulkBps))

            /** Alias for calling [price] with `InnerPrice.ofBulk(bulk)`. */
            fun price(bulk: NewPlanBulkPrice) = price(InnerPrice.ofBulk(bulk))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofThresholdTotalAmount(thresholdTotalAmount)`.
             */
            fun price(thresholdTotalAmount: NewPlanThresholdTotalAmountPrice) =
                price(InnerPrice.ofThresholdTotalAmount(thresholdTotalAmount))

            /** Alias for calling [price] with `InnerPrice.ofTieredPackage(tieredPackage)`. */
            fun price(tieredPackage: NewPlanTieredPackagePrice) =
                price(InnerPrice.ofTieredPackage(tieredPackage))

            /**
             * Alias for calling [price] with `InnerPrice.ofTieredWithMinimum(tieredWithMinimum)`.
             */
            fun price(tieredWithMinimum: NewPlanTieredWithMinimumPrice) =
                price(InnerPrice.ofTieredWithMinimum(tieredWithMinimum))

            /** Alias for calling [price] with `InnerPrice.ofUnitWithPercent(unitWithPercent)`. */
            fun price(unitWithPercent: NewPlanUnitWithPercentPrice) =
                price(InnerPrice.ofUnitWithPercent(unitWithPercent))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofPackageWithAllocation(packageWithAllocation)`.
             */
            fun price(packageWithAllocation: NewPlanPackageWithAllocationPrice) =
                price(InnerPrice.ofPackageWithAllocation(packageWithAllocation))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofTieredWithProration(tieredWithProration)`.
             */
            fun price(tieredWithProration: NewPlanTierWithProrationPrice) =
                price(InnerPrice.ofTieredWithProration(tieredWithProration))

            /**
             * Alias for calling [price] with `InnerPrice.ofUnitWithProration(unitWithProration)`.
             */
            fun price(unitWithProration: NewPlanUnitWithProrationPrice) =
                price(InnerPrice.ofUnitWithProration(unitWithProration))

            /**
             * Alias for calling [price] with `InnerPrice.ofGroupedAllocation(groupedAllocation)`.
             */
            fun price(groupedAllocation: NewPlanGroupedAllocationPrice) =
                price(InnerPrice.ofGroupedAllocation(groupedAllocation))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofGroupedWithProratedMinimum(groupedWithProratedMinimum)`.
             */
            fun price(groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice) =
                price(InnerPrice.ofGroupedWithProratedMinimum(groupedWithProratedMinimum))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofGroupedWithMeteredMinimum(groupedWithMeteredMinimum)`.
             */
            fun price(groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice) =
                price(InnerPrice.ofGroupedWithMeteredMinimum(groupedWithMeteredMinimum))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofMatrixWithDisplayName(matrixWithDisplayName)`.
             */
            fun price(matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice) =
                price(InnerPrice.ofMatrixWithDisplayName(matrixWithDisplayName))

            /**
             * Alias for calling [price] with `InnerPrice.ofBulkWithProration(bulkWithProration)`.
             */
            fun price(bulkWithProration: NewPlanBulkWithProrationPrice) =
                price(InnerPrice.ofBulkWithProration(bulkWithProration))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofGroupedTieredPackage(groupedTieredPackage)`.
             */
            fun price(groupedTieredPackage: NewPlanGroupedTieredPackagePrice) =
                price(InnerPrice.ofGroupedTieredPackage(groupedTieredPackage))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofMaxGroupTieredPackage(maxGroupTieredPackage)`.
             */
            fun price(maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice) =
                price(InnerPrice.ofMaxGroupTieredPackage(maxGroupTieredPackage))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing)`.
             */
            fun price(scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice) =
                price(InnerPrice.ofScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing)`.
             */
            fun price(
                scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice
            ) = price(InnerPrice.ofScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofCumulativeGroupedBulk(cumulativeGroupedBulk)`.
             */
            fun price(cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice) =
                price(InnerPrice.ofCumulativeGroupedBulk(cumulativeGroupedBulk))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofTieredPackageWithMinimum(tieredPackageWithMinimum)`.
             */
            fun price(tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice) =
                price(InnerPrice.ofTieredPackageWithMinimum(tieredPackageWithMinimum))

            /**
             * Alias for calling [price] with
             * `InnerPrice.ofMatrixWithAllocation(matrixWithAllocation)`.
             */
            fun price(matrixWithAllocation: NewPlanMatrixWithAllocationPrice) =
                price(InnerPrice.ofMatrixWithAllocation(matrixWithAllocation))

            /** Alias for calling [price] with `InnerPrice.ofGroupedTiered(groupedTiered)`. */
            fun price(groupedTiered: NewPlanGroupedTieredPrice) =
                price(InnerPrice.ofGroupedTiered(groupedTiered))

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Price].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             */
            fun build(): Price =
                Price(allocationPrice, planPhaseOrder, price, additionalProperties.toMutableMap())
        }

        private var validated: Boolean = false

        fun validate(): Price = apply {
            if (validated) {
                return@apply
            }

            allocationPrice().ifPresent { it.validate() }
            planPhaseOrder()
            price().ifPresent { it.validate() }
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (allocationPrice.asKnown().getOrNull()?.validity() ?: 0) +
                (if (planPhaseOrder.asKnown().isPresent) 1 else 0) +
                (price.asKnown().getOrNull()?.validity() ?: 0)

        /** The price to add to the plan */
        @JsonDeserialize(using = InnerPrice.Deserializer::class)
        @JsonSerialize(using = InnerPrice.Serializer::class)
        class InnerPrice
        private constructor(
            private val unit: NewPlanUnitPrice? = null,
            private val package_: NewPlanPackagePrice? = null,
            private val matrix: NewPlanMatrixPrice? = null,
            private val tiered: NewPlanTieredPrice? = null,
            private val tieredBps: NewPlanTieredBpsPrice? = null,
            private val bps: NewPlanBpsPrice? = null,
            private val bulkBps: NewPlanBulkBpsPrice? = null,
            private val bulk: NewPlanBulkPrice? = null,
            private val thresholdTotalAmount: NewPlanThresholdTotalAmountPrice? = null,
            private val tieredPackage: NewPlanTieredPackagePrice? = null,
            private val tieredWithMinimum: NewPlanTieredWithMinimumPrice? = null,
            private val unitWithPercent: NewPlanUnitWithPercentPrice? = null,
            private val packageWithAllocation: NewPlanPackageWithAllocationPrice? = null,
            private val tieredWithProration: NewPlanTierWithProrationPrice? = null,
            private val unitWithProration: NewPlanUnitWithProrationPrice? = null,
            private val groupedAllocation: NewPlanGroupedAllocationPrice? = null,
            private val groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice? = null,
            private val groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice? = null,
            private val matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice? = null,
            private val bulkWithProration: NewPlanBulkWithProrationPrice? = null,
            private val groupedTieredPackage: NewPlanGroupedTieredPackagePrice? = null,
            private val maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice? = null,
            private val scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice? =
                null,
            private val scalableMatrixWithTieredPricing:
                NewPlanScalableMatrixWithTieredPricingPrice? =
                null,
            private val cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice? = null,
            private val tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice? = null,
            private val matrixWithAllocation: NewPlanMatrixWithAllocationPrice? = null,
            private val groupedTiered: NewPlanGroupedTieredPrice? = null,
            private val _json: JsonValue? = null,
        ) {

            fun unit(): Optional<NewPlanUnitPrice> = Optional.ofNullable(unit)

            fun package_(): Optional<NewPlanPackagePrice> = Optional.ofNullable(package_)

            fun matrix(): Optional<NewPlanMatrixPrice> = Optional.ofNullable(matrix)

            fun tiered(): Optional<NewPlanTieredPrice> = Optional.ofNullable(tiered)

            fun tieredBps(): Optional<NewPlanTieredBpsPrice> = Optional.ofNullable(tieredBps)

            fun bps(): Optional<NewPlanBpsPrice> = Optional.ofNullable(bps)

            fun bulkBps(): Optional<NewPlanBulkBpsPrice> = Optional.ofNullable(bulkBps)

            fun bulk(): Optional<NewPlanBulkPrice> = Optional.ofNullable(bulk)

            fun thresholdTotalAmount(): Optional<NewPlanThresholdTotalAmountPrice> =
                Optional.ofNullable(thresholdTotalAmount)

            fun tieredPackage(): Optional<NewPlanTieredPackagePrice> =
                Optional.ofNullable(tieredPackage)

            fun tieredWithMinimum(): Optional<NewPlanTieredWithMinimumPrice> =
                Optional.ofNullable(tieredWithMinimum)

            fun unitWithPercent(): Optional<NewPlanUnitWithPercentPrice> =
                Optional.ofNullable(unitWithPercent)

            fun packageWithAllocation(): Optional<NewPlanPackageWithAllocationPrice> =
                Optional.ofNullable(packageWithAllocation)

            fun tieredWithProration(): Optional<NewPlanTierWithProrationPrice> =
                Optional.ofNullable(tieredWithProration)

            fun unitWithProration(): Optional<NewPlanUnitWithProrationPrice> =
                Optional.ofNullable(unitWithProration)

            fun groupedAllocation(): Optional<NewPlanGroupedAllocationPrice> =
                Optional.ofNullable(groupedAllocation)

            fun groupedWithProratedMinimum(): Optional<NewPlanGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(groupedWithProratedMinimum)

            fun groupedWithMeteredMinimum(): Optional<NewPlanGroupedWithMeteredMinimumPrice> =
                Optional.ofNullable(groupedWithMeteredMinimum)

            fun matrixWithDisplayName(): Optional<NewPlanMatrixWithDisplayNamePrice> =
                Optional.ofNullable(matrixWithDisplayName)

            fun bulkWithProration(): Optional<NewPlanBulkWithProrationPrice> =
                Optional.ofNullable(bulkWithProration)

            fun groupedTieredPackage(): Optional<NewPlanGroupedTieredPackagePrice> =
                Optional.ofNullable(groupedTieredPackage)

            fun maxGroupTieredPackage(): Optional<NewPlanMaxGroupTieredPackagePrice> =
                Optional.ofNullable(maxGroupTieredPackage)

            fun scalableMatrixWithUnitPricing():
                Optional<NewPlanScalableMatrixWithUnitPricingPrice> =
                Optional.ofNullable(scalableMatrixWithUnitPricing)

            fun scalableMatrixWithTieredPricing():
                Optional<NewPlanScalableMatrixWithTieredPricingPrice> =
                Optional.ofNullable(scalableMatrixWithTieredPricing)

            fun cumulativeGroupedBulk(): Optional<NewPlanCumulativeGroupedBulkPrice> =
                Optional.ofNullable(cumulativeGroupedBulk)

            fun tieredPackageWithMinimum(): Optional<NewPlanTieredPackageWithMinimumPrice> =
                Optional.ofNullable(tieredPackageWithMinimum)

            fun matrixWithAllocation(): Optional<NewPlanMatrixWithAllocationPrice> =
                Optional.ofNullable(matrixWithAllocation)

            fun groupedTiered(): Optional<NewPlanGroupedTieredPrice> =
                Optional.ofNullable(groupedTiered)

            fun isUnit(): Boolean = unit != null

            fun isPackage(): Boolean = package_ != null

            fun isMatrix(): Boolean = matrix != null

            fun isTiered(): Boolean = tiered != null

            fun isTieredBps(): Boolean = tieredBps != null

            fun isBps(): Boolean = bps != null

            fun isBulkBps(): Boolean = bulkBps != null

            fun isBulk(): Boolean = bulk != null

            fun isThresholdTotalAmount(): Boolean = thresholdTotalAmount != null

            fun isTieredPackage(): Boolean = tieredPackage != null

            fun isTieredWithMinimum(): Boolean = tieredWithMinimum != null

            fun isUnitWithPercent(): Boolean = unitWithPercent != null

            fun isPackageWithAllocation(): Boolean = packageWithAllocation != null

            fun isTieredWithProration(): Boolean = tieredWithProration != null

            fun isUnitWithProration(): Boolean = unitWithProration != null

            fun isGroupedAllocation(): Boolean = groupedAllocation != null

            fun isGroupedWithProratedMinimum(): Boolean = groupedWithProratedMinimum != null

            fun isGroupedWithMeteredMinimum(): Boolean = groupedWithMeteredMinimum != null

            fun isMatrixWithDisplayName(): Boolean = matrixWithDisplayName != null

            fun isBulkWithProration(): Boolean = bulkWithProration != null

            fun isGroupedTieredPackage(): Boolean = groupedTieredPackage != null

            fun isMaxGroupTieredPackage(): Boolean = maxGroupTieredPackage != null

            fun isScalableMatrixWithUnitPricing(): Boolean = scalableMatrixWithUnitPricing != null

            fun isScalableMatrixWithTieredPricing(): Boolean =
                scalableMatrixWithTieredPricing != null

            fun isCumulativeGroupedBulk(): Boolean = cumulativeGroupedBulk != null

            fun isTieredPackageWithMinimum(): Boolean = tieredPackageWithMinimum != null

            fun isMatrixWithAllocation(): Boolean = matrixWithAllocation != null

            fun isGroupedTiered(): Boolean = groupedTiered != null

            fun asUnit(): NewPlanUnitPrice = unit.getOrThrow("unit")

            fun asPackage(): NewPlanPackagePrice = package_.getOrThrow("package_")

            fun asMatrix(): NewPlanMatrixPrice = matrix.getOrThrow("matrix")

            fun asTiered(): NewPlanTieredPrice = tiered.getOrThrow("tiered")

            fun asTieredBps(): NewPlanTieredBpsPrice = tieredBps.getOrThrow("tieredBps")

            fun asBps(): NewPlanBpsPrice = bps.getOrThrow("bps")

            fun asBulkBps(): NewPlanBulkBpsPrice = bulkBps.getOrThrow("bulkBps")

            fun asBulk(): NewPlanBulkPrice = bulk.getOrThrow("bulk")

            fun asThresholdTotalAmount(): NewPlanThresholdTotalAmountPrice =
                thresholdTotalAmount.getOrThrow("thresholdTotalAmount")

            fun asTieredPackage(): NewPlanTieredPackagePrice =
                tieredPackage.getOrThrow("tieredPackage")

            fun asTieredWithMinimum(): NewPlanTieredWithMinimumPrice =
                tieredWithMinimum.getOrThrow("tieredWithMinimum")

            fun asUnitWithPercent(): NewPlanUnitWithPercentPrice =
                unitWithPercent.getOrThrow("unitWithPercent")

            fun asPackageWithAllocation(): NewPlanPackageWithAllocationPrice =
                packageWithAllocation.getOrThrow("packageWithAllocation")

            fun asTieredWithProration(): NewPlanTierWithProrationPrice =
                tieredWithProration.getOrThrow("tieredWithProration")

            fun asUnitWithProration(): NewPlanUnitWithProrationPrice =
                unitWithProration.getOrThrow("unitWithProration")

            fun asGroupedAllocation(): NewPlanGroupedAllocationPrice =
                groupedAllocation.getOrThrow("groupedAllocation")

            fun asGroupedWithProratedMinimum(): NewPlanGroupedWithProratedMinimumPrice =
                groupedWithProratedMinimum.getOrThrow("groupedWithProratedMinimum")

            fun asGroupedWithMeteredMinimum(): NewPlanGroupedWithMeteredMinimumPrice =
                groupedWithMeteredMinimum.getOrThrow("groupedWithMeteredMinimum")

            fun asMatrixWithDisplayName(): NewPlanMatrixWithDisplayNamePrice =
                matrixWithDisplayName.getOrThrow("matrixWithDisplayName")

            fun asBulkWithProration(): NewPlanBulkWithProrationPrice =
                bulkWithProration.getOrThrow("bulkWithProration")

            fun asGroupedTieredPackage(): NewPlanGroupedTieredPackagePrice =
                groupedTieredPackage.getOrThrow("groupedTieredPackage")

            fun asMaxGroupTieredPackage(): NewPlanMaxGroupTieredPackagePrice =
                maxGroupTieredPackage.getOrThrow("maxGroupTieredPackage")

            fun asScalableMatrixWithUnitPricing(): NewPlanScalableMatrixWithUnitPricingPrice =
                scalableMatrixWithUnitPricing.getOrThrow("scalableMatrixWithUnitPricing")

            fun asScalableMatrixWithTieredPricing(): NewPlanScalableMatrixWithTieredPricingPrice =
                scalableMatrixWithTieredPricing.getOrThrow("scalableMatrixWithTieredPricing")

            fun asCumulativeGroupedBulk(): NewPlanCumulativeGroupedBulkPrice =
                cumulativeGroupedBulk.getOrThrow("cumulativeGroupedBulk")

            fun asTieredPackageWithMinimum(): NewPlanTieredPackageWithMinimumPrice =
                tieredPackageWithMinimum.getOrThrow("tieredPackageWithMinimum")

            fun asMatrixWithAllocation(): NewPlanMatrixWithAllocationPrice =
                matrixWithAllocation.getOrThrow("matrixWithAllocation")

            fun asGroupedTiered(): NewPlanGroupedTieredPrice =
                groupedTiered.getOrThrow("groupedTiered")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T =
                when {
                    unit != null -> visitor.visitUnit(unit)
                    package_ != null -> visitor.visitPackage(package_)
                    matrix != null -> visitor.visitMatrix(matrix)
                    tiered != null -> visitor.visitTiered(tiered)
                    tieredBps != null -> visitor.visitTieredBps(tieredBps)
                    bps != null -> visitor.visitBps(bps)
                    bulkBps != null -> visitor.visitBulkBps(bulkBps)
                    bulk != null -> visitor.visitBulk(bulk)
                    thresholdTotalAmount != null ->
                        visitor.visitThresholdTotalAmount(thresholdTotalAmount)
                    tieredPackage != null -> visitor.visitTieredPackage(tieredPackage)
                    tieredWithMinimum != null -> visitor.visitTieredWithMinimum(tieredWithMinimum)
                    unitWithPercent != null -> visitor.visitUnitWithPercent(unitWithPercent)
                    packageWithAllocation != null ->
                        visitor.visitPackageWithAllocation(packageWithAllocation)
                    tieredWithProration != null ->
                        visitor.visitTieredWithProration(tieredWithProration)
                    unitWithProration != null -> visitor.visitUnitWithProration(unitWithProration)
                    groupedAllocation != null -> visitor.visitGroupedAllocation(groupedAllocation)
                    groupedWithProratedMinimum != null ->
                        visitor.visitGroupedWithProratedMinimum(groupedWithProratedMinimum)
                    groupedWithMeteredMinimum != null ->
                        visitor.visitGroupedWithMeteredMinimum(groupedWithMeteredMinimum)
                    matrixWithDisplayName != null ->
                        visitor.visitMatrixWithDisplayName(matrixWithDisplayName)
                    bulkWithProration != null -> visitor.visitBulkWithProration(bulkWithProration)
                    groupedTieredPackage != null ->
                        visitor.visitGroupedTieredPackage(groupedTieredPackage)
                    maxGroupTieredPackage != null ->
                        visitor.visitMaxGroupTieredPackage(maxGroupTieredPackage)
                    scalableMatrixWithUnitPricing != null ->
                        visitor.visitScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing)
                    scalableMatrixWithTieredPricing != null ->
                        visitor.visitScalableMatrixWithTieredPricing(
                            scalableMatrixWithTieredPricing
                        )
                    cumulativeGroupedBulk != null ->
                        visitor.visitCumulativeGroupedBulk(cumulativeGroupedBulk)
                    tieredPackageWithMinimum != null ->
                        visitor.visitTieredPackageWithMinimum(tieredPackageWithMinimum)
                    matrixWithAllocation != null ->
                        visitor.visitMatrixWithAllocation(matrixWithAllocation)
                    groupedTiered != null -> visitor.visitGroupedTiered(groupedTiered)
                    else -> visitor.unknown(_json)
                }

            private var validated: Boolean = false

            fun validate(): InnerPrice = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitUnit(unit: NewPlanUnitPrice) {
                            unit.validate()
                        }

                        override fun visitPackage(package_: NewPlanPackagePrice) {
                            package_.validate()
                        }

                        override fun visitMatrix(matrix: NewPlanMatrixPrice) {
                            matrix.validate()
                        }

                        override fun visitTiered(tiered: NewPlanTieredPrice) {
                            tiered.validate()
                        }

                        override fun visitTieredBps(tieredBps: NewPlanTieredBpsPrice) {
                            tieredBps.validate()
                        }

                        override fun visitBps(bps: NewPlanBpsPrice) {
                            bps.validate()
                        }

                        override fun visitBulkBps(bulkBps: NewPlanBulkBpsPrice) {
                            bulkBps.validate()
                        }

                        override fun visitBulk(bulk: NewPlanBulkPrice) {
                            bulk.validate()
                        }

                        override fun visitThresholdTotalAmount(
                            thresholdTotalAmount: NewPlanThresholdTotalAmountPrice
                        ) {
                            thresholdTotalAmount.validate()
                        }

                        override fun visitTieredPackage(tieredPackage: NewPlanTieredPackagePrice) {
                            tieredPackage.validate()
                        }

                        override fun visitTieredWithMinimum(
                            tieredWithMinimum: NewPlanTieredWithMinimumPrice
                        ) {
                            tieredWithMinimum.validate()
                        }

                        override fun visitUnitWithPercent(
                            unitWithPercent: NewPlanUnitWithPercentPrice
                        ) {
                            unitWithPercent.validate()
                        }

                        override fun visitPackageWithAllocation(
                            packageWithAllocation: NewPlanPackageWithAllocationPrice
                        ) {
                            packageWithAllocation.validate()
                        }

                        override fun visitTieredWithProration(
                            tieredWithProration: NewPlanTierWithProrationPrice
                        ) {
                            tieredWithProration.validate()
                        }

                        override fun visitUnitWithProration(
                            unitWithProration: NewPlanUnitWithProrationPrice
                        ) {
                            unitWithProration.validate()
                        }

                        override fun visitGroupedAllocation(
                            groupedAllocation: NewPlanGroupedAllocationPrice
                        ) {
                            groupedAllocation.validate()
                        }

                        override fun visitGroupedWithProratedMinimum(
                            groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice
                        ) {
                            groupedWithProratedMinimum.validate()
                        }

                        override fun visitGroupedWithMeteredMinimum(
                            groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice
                        ) {
                            groupedWithMeteredMinimum.validate()
                        }

                        override fun visitMatrixWithDisplayName(
                            matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice
                        ) {
                            matrixWithDisplayName.validate()
                        }

                        override fun visitBulkWithProration(
                            bulkWithProration: NewPlanBulkWithProrationPrice
                        ) {
                            bulkWithProration.validate()
                        }

                        override fun visitGroupedTieredPackage(
                            groupedTieredPackage: NewPlanGroupedTieredPackagePrice
                        ) {
                            groupedTieredPackage.validate()
                        }

                        override fun visitMaxGroupTieredPackage(
                            maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice
                        ) {
                            maxGroupTieredPackage.validate()
                        }

                        override fun visitScalableMatrixWithUnitPricing(
                            scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice
                        ) {
                            scalableMatrixWithUnitPricing.validate()
                        }

                        override fun visitScalableMatrixWithTieredPricing(
                            scalableMatrixWithTieredPricing:
                                NewPlanScalableMatrixWithTieredPricingPrice
                        ) {
                            scalableMatrixWithTieredPricing.validate()
                        }

                        override fun visitCumulativeGroupedBulk(
                            cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice
                        ) {
                            cumulativeGroupedBulk.validate()
                        }

                        override fun visitTieredPackageWithMinimum(
                            tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice
                        ) {
                            tieredPackageWithMinimum.validate()
                        }

                        override fun visitMatrixWithAllocation(
                            matrixWithAllocation: NewPlanMatrixWithAllocationPrice
                        ) {
                            matrixWithAllocation.validate()
                        }

                        override fun visitGroupedTiered(groupedTiered: NewPlanGroupedTieredPrice) {
                            groupedTiered.validate()
                        }
                    }
                )
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                accept(
                    object : Visitor<Int> {
                        override fun visitUnit(unit: NewPlanUnitPrice) = unit.validity()

                        override fun visitPackage(package_: NewPlanPackagePrice) =
                            package_.validity()

                        override fun visitMatrix(matrix: NewPlanMatrixPrice) = matrix.validity()

                        override fun visitTiered(tiered: NewPlanTieredPrice) = tiered.validity()

                        override fun visitTieredBps(tieredBps: NewPlanTieredBpsPrice) =
                            tieredBps.validity()

                        override fun visitBps(bps: NewPlanBpsPrice) = bps.validity()

                        override fun visitBulkBps(bulkBps: NewPlanBulkBpsPrice) = bulkBps.validity()

                        override fun visitBulk(bulk: NewPlanBulkPrice) = bulk.validity()

                        override fun visitThresholdTotalAmount(
                            thresholdTotalAmount: NewPlanThresholdTotalAmountPrice
                        ) = thresholdTotalAmount.validity()

                        override fun visitTieredPackage(tieredPackage: NewPlanTieredPackagePrice) =
                            tieredPackage.validity()

                        override fun visitTieredWithMinimum(
                            tieredWithMinimum: NewPlanTieredWithMinimumPrice
                        ) = tieredWithMinimum.validity()

                        override fun visitUnitWithPercent(
                            unitWithPercent: NewPlanUnitWithPercentPrice
                        ) = unitWithPercent.validity()

                        override fun visitPackageWithAllocation(
                            packageWithAllocation: NewPlanPackageWithAllocationPrice
                        ) = packageWithAllocation.validity()

                        override fun visitTieredWithProration(
                            tieredWithProration: NewPlanTierWithProrationPrice
                        ) = tieredWithProration.validity()

                        override fun visitUnitWithProration(
                            unitWithProration: NewPlanUnitWithProrationPrice
                        ) = unitWithProration.validity()

                        override fun visitGroupedAllocation(
                            groupedAllocation: NewPlanGroupedAllocationPrice
                        ) = groupedAllocation.validity()

                        override fun visitGroupedWithProratedMinimum(
                            groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice
                        ) = groupedWithProratedMinimum.validity()

                        override fun visitGroupedWithMeteredMinimum(
                            groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice
                        ) = groupedWithMeteredMinimum.validity()

                        override fun visitMatrixWithDisplayName(
                            matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice
                        ) = matrixWithDisplayName.validity()

                        override fun visitBulkWithProration(
                            bulkWithProration: NewPlanBulkWithProrationPrice
                        ) = bulkWithProration.validity()

                        override fun visitGroupedTieredPackage(
                            groupedTieredPackage: NewPlanGroupedTieredPackagePrice
                        ) = groupedTieredPackage.validity()

                        override fun visitMaxGroupTieredPackage(
                            maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice
                        ) = maxGroupTieredPackage.validity()

                        override fun visitScalableMatrixWithUnitPricing(
                            scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice
                        ) = scalableMatrixWithUnitPricing.validity()

                        override fun visitScalableMatrixWithTieredPricing(
                            scalableMatrixWithTieredPricing:
                                NewPlanScalableMatrixWithTieredPricingPrice
                        ) = scalableMatrixWithTieredPricing.validity()

                        override fun visitCumulativeGroupedBulk(
                            cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice
                        ) = cumulativeGroupedBulk.validity()

                        override fun visitTieredPackageWithMinimum(
                            tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice
                        ) = tieredPackageWithMinimum.validity()

                        override fun visitMatrixWithAllocation(
                            matrixWithAllocation: NewPlanMatrixWithAllocationPrice
                        ) = matrixWithAllocation.validity()

                        override fun visitGroupedTiered(groupedTiered: NewPlanGroupedTieredPrice) =
                            groupedTiered.validity()

                        override fun unknown(json: JsonValue?) = 0
                    }
                )

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is InnerPrice && unit == other.unit && package_ == other.package_ && matrix == other.matrix && tiered == other.tiered && tieredBps == other.tieredBps && bps == other.bps && bulkBps == other.bulkBps && bulk == other.bulk && thresholdTotalAmount == other.thresholdTotalAmount && tieredPackage == other.tieredPackage && tieredWithMinimum == other.tieredWithMinimum && unitWithPercent == other.unitWithPercent && packageWithAllocation == other.packageWithAllocation && tieredWithProration == other.tieredWithProration && unitWithProration == other.unitWithProration && groupedAllocation == other.groupedAllocation && groupedWithProratedMinimum == other.groupedWithProratedMinimum && groupedWithMeteredMinimum == other.groupedWithMeteredMinimum && matrixWithDisplayName == other.matrixWithDisplayName && bulkWithProration == other.bulkWithProration && groupedTieredPackage == other.groupedTieredPackage && maxGroupTieredPackage == other.maxGroupTieredPackage && scalableMatrixWithUnitPricing == other.scalableMatrixWithUnitPricing && scalableMatrixWithTieredPricing == other.scalableMatrixWithTieredPricing && cumulativeGroupedBulk == other.cumulativeGroupedBulk && tieredPackageWithMinimum == other.tieredPackageWithMinimum && matrixWithAllocation == other.matrixWithAllocation && groupedTiered == other.groupedTiered /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(unit, package_, matrix, tiered, tieredBps, bps, bulkBps, bulk, thresholdTotalAmount, tieredPackage, tieredWithMinimum, unitWithPercent, packageWithAllocation, tieredWithProration, unitWithProration, groupedAllocation, groupedWithProratedMinimum, groupedWithMeteredMinimum, matrixWithDisplayName, bulkWithProration, groupedTieredPackage, maxGroupTieredPackage, scalableMatrixWithUnitPricing, scalableMatrixWithTieredPricing, cumulativeGroupedBulk, tieredPackageWithMinimum, matrixWithAllocation, groupedTiered) /* spotless:on */

            override fun toString(): String =
                when {
                    unit != null -> "InnerPrice{unit=$unit}"
                    package_ != null -> "InnerPrice{package_=$package_}"
                    matrix != null -> "InnerPrice{matrix=$matrix}"
                    tiered != null -> "InnerPrice{tiered=$tiered}"
                    tieredBps != null -> "InnerPrice{tieredBps=$tieredBps}"
                    bps != null -> "InnerPrice{bps=$bps}"
                    bulkBps != null -> "InnerPrice{bulkBps=$bulkBps}"
                    bulk != null -> "InnerPrice{bulk=$bulk}"
                    thresholdTotalAmount != null ->
                        "InnerPrice{thresholdTotalAmount=$thresholdTotalAmount}"
                    tieredPackage != null -> "InnerPrice{tieredPackage=$tieredPackage}"
                    tieredWithMinimum != null -> "InnerPrice{tieredWithMinimum=$tieredWithMinimum}"
                    unitWithPercent != null -> "InnerPrice{unitWithPercent=$unitWithPercent}"
                    packageWithAllocation != null ->
                        "InnerPrice{packageWithAllocation=$packageWithAllocation}"
                    tieredWithProration != null ->
                        "InnerPrice{tieredWithProration=$tieredWithProration}"
                    unitWithProration != null -> "InnerPrice{unitWithProration=$unitWithProration}"
                    groupedAllocation != null -> "InnerPrice{groupedAllocation=$groupedAllocation}"
                    groupedWithProratedMinimum != null ->
                        "InnerPrice{groupedWithProratedMinimum=$groupedWithProratedMinimum}"
                    groupedWithMeteredMinimum != null ->
                        "InnerPrice{groupedWithMeteredMinimum=$groupedWithMeteredMinimum}"
                    matrixWithDisplayName != null ->
                        "InnerPrice{matrixWithDisplayName=$matrixWithDisplayName}"
                    bulkWithProration != null -> "InnerPrice{bulkWithProration=$bulkWithProration}"
                    groupedTieredPackage != null ->
                        "InnerPrice{groupedTieredPackage=$groupedTieredPackage}"
                    maxGroupTieredPackage != null ->
                        "InnerPrice{maxGroupTieredPackage=$maxGroupTieredPackage}"
                    scalableMatrixWithUnitPricing != null ->
                        "InnerPrice{scalableMatrixWithUnitPricing=$scalableMatrixWithUnitPricing}"
                    scalableMatrixWithTieredPricing != null ->
                        "InnerPrice{scalableMatrixWithTieredPricing=$scalableMatrixWithTieredPricing}"
                    cumulativeGroupedBulk != null ->
                        "InnerPrice{cumulativeGroupedBulk=$cumulativeGroupedBulk}"
                    tieredPackageWithMinimum != null ->
                        "InnerPrice{tieredPackageWithMinimum=$tieredPackageWithMinimum}"
                    matrixWithAllocation != null ->
                        "InnerPrice{matrixWithAllocation=$matrixWithAllocation}"
                    groupedTiered != null -> "InnerPrice{groupedTiered=$groupedTiered}"
                    _json != null -> "InnerPrice{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid InnerPrice")
                }

            companion object {

                @JvmStatic fun ofUnit(unit: NewPlanUnitPrice) = InnerPrice(unit = unit)

                @JvmStatic
                fun ofPackage(package_: NewPlanPackagePrice) = InnerPrice(package_ = package_)

                @JvmStatic fun ofMatrix(matrix: NewPlanMatrixPrice) = InnerPrice(matrix = matrix)

                @JvmStatic fun ofTiered(tiered: NewPlanTieredPrice) = InnerPrice(tiered = tiered)

                @JvmStatic
                fun ofTieredBps(tieredBps: NewPlanTieredBpsPrice) =
                    InnerPrice(tieredBps = tieredBps)

                @JvmStatic fun ofBps(bps: NewPlanBpsPrice) = InnerPrice(bps = bps)

                @JvmStatic
                fun ofBulkBps(bulkBps: NewPlanBulkBpsPrice) = InnerPrice(bulkBps = bulkBps)

                @JvmStatic fun ofBulk(bulk: NewPlanBulkPrice) = InnerPrice(bulk = bulk)

                @JvmStatic
                fun ofThresholdTotalAmount(thresholdTotalAmount: NewPlanThresholdTotalAmountPrice) =
                    InnerPrice(thresholdTotalAmount = thresholdTotalAmount)

                @JvmStatic
                fun ofTieredPackage(tieredPackage: NewPlanTieredPackagePrice) =
                    InnerPrice(tieredPackage = tieredPackage)

                @JvmStatic
                fun ofTieredWithMinimum(tieredWithMinimum: NewPlanTieredWithMinimumPrice) =
                    InnerPrice(tieredWithMinimum = tieredWithMinimum)

                @JvmStatic
                fun ofUnitWithPercent(unitWithPercent: NewPlanUnitWithPercentPrice) =
                    InnerPrice(unitWithPercent = unitWithPercent)

                @JvmStatic
                fun ofPackageWithAllocation(
                    packageWithAllocation: NewPlanPackageWithAllocationPrice
                ) = InnerPrice(packageWithAllocation = packageWithAllocation)

                @JvmStatic
                fun ofTieredWithProration(tieredWithProration: NewPlanTierWithProrationPrice) =
                    InnerPrice(tieredWithProration = tieredWithProration)

                @JvmStatic
                fun ofUnitWithProration(unitWithProration: NewPlanUnitWithProrationPrice) =
                    InnerPrice(unitWithProration = unitWithProration)

                @JvmStatic
                fun ofGroupedAllocation(groupedAllocation: NewPlanGroupedAllocationPrice) =
                    InnerPrice(groupedAllocation = groupedAllocation)

                @JvmStatic
                fun ofGroupedWithProratedMinimum(
                    groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice
                ) = InnerPrice(groupedWithProratedMinimum = groupedWithProratedMinimum)

                @JvmStatic
                fun ofGroupedWithMeteredMinimum(
                    groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice
                ) = InnerPrice(groupedWithMeteredMinimum = groupedWithMeteredMinimum)

                @JvmStatic
                fun ofMatrixWithDisplayName(
                    matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice
                ) = InnerPrice(matrixWithDisplayName = matrixWithDisplayName)

                @JvmStatic
                fun ofBulkWithProration(bulkWithProration: NewPlanBulkWithProrationPrice) =
                    InnerPrice(bulkWithProration = bulkWithProration)

                @JvmStatic
                fun ofGroupedTieredPackage(groupedTieredPackage: NewPlanGroupedTieredPackagePrice) =
                    InnerPrice(groupedTieredPackage = groupedTieredPackage)

                @JvmStatic
                fun ofMaxGroupTieredPackage(
                    maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice
                ) = InnerPrice(maxGroupTieredPackage = maxGroupTieredPackage)

                @JvmStatic
                fun ofScalableMatrixWithUnitPricing(
                    scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice
                ) = InnerPrice(scalableMatrixWithUnitPricing = scalableMatrixWithUnitPricing)

                @JvmStatic
                fun ofScalableMatrixWithTieredPricing(
                    scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice
                ) = InnerPrice(scalableMatrixWithTieredPricing = scalableMatrixWithTieredPricing)

                @JvmStatic
                fun ofCumulativeGroupedBulk(
                    cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice
                ) = InnerPrice(cumulativeGroupedBulk = cumulativeGroupedBulk)

                @JvmStatic
                fun ofTieredPackageWithMinimum(
                    tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice
                ) = InnerPrice(tieredPackageWithMinimum = tieredPackageWithMinimum)

                @JvmStatic
                fun ofMatrixWithAllocation(matrixWithAllocation: NewPlanMatrixWithAllocationPrice) =
                    InnerPrice(matrixWithAllocation = matrixWithAllocation)

                @JvmStatic
                fun ofGroupedTiered(groupedTiered: NewPlanGroupedTieredPrice) =
                    InnerPrice(groupedTiered = groupedTiered)
            }

            /**
             * An interface that defines how to map each variant of [InnerPrice] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitUnit(unit: NewPlanUnitPrice): T

                fun visitPackage(package_: NewPlanPackagePrice): T

                fun visitMatrix(matrix: NewPlanMatrixPrice): T

                fun visitTiered(tiered: NewPlanTieredPrice): T

                fun visitTieredBps(tieredBps: NewPlanTieredBpsPrice): T

                fun visitBps(bps: NewPlanBpsPrice): T

                fun visitBulkBps(bulkBps: NewPlanBulkBpsPrice): T

                fun visitBulk(bulk: NewPlanBulkPrice): T

                fun visitThresholdTotalAmount(
                    thresholdTotalAmount: NewPlanThresholdTotalAmountPrice
                ): T

                fun visitTieredPackage(tieredPackage: NewPlanTieredPackagePrice): T

                fun visitTieredWithMinimum(tieredWithMinimum: NewPlanTieredWithMinimumPrice): T

                fun visitUnitWithPercent(unitWithPercent: NewPlanUnitWithPercentPrice): T

                fun visitPackageWithAllocation(
                    packageWithAllocation: NewPlanPackageWithAllocationPrice
                ): T

                fun visitTieredWithProration(tieredWithProration: NewPlanTierWithProrationPrice): T

                fun visitUnitWithProration(unitWithProration: NewPlanUnitWithProrationPrice): T

                fun visitGroupedAllocation(groupedAllocation: NewPlanGroupedAllocationPrice): T

                fun visitGroupedWithProratedMinimum(
                    groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice
                ): T

                fun visitGroupedWithMeteredMinimum(
                    groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice
                ): T

                fun visitMatrixWithDisplayName(
                    matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice
                ): T

                fun visitBulkWithProration(bulkWithProration: NewPlanBulkWithProrationPrice): T

                fun visitGroupedTieredPackage(
                    groupedTieredPackage: NewPlanGroupedTieredPackagePrice
                ): T

                fun visitMaxGroupTieredPackage(
                    maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice
                ): T

                fun visitScalableMatrixWithUnitPricing(
                    scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice
                ): T

                fun visitScalableMatrixWithTieredPricing(
                    scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice
                ): T

                fun visitCumulativeGroupedBulk(
                    cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice
                ): T

                fun visitTieredPackageWithMinimum(
                    tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice
                ): T

                fun visitMatrixWithAllocation(
                    matrixWithAllocation: NewPlanMatrixWithAllocationPrice
                ): T

                fun visitGroupedTiered(groupedTiered: NewPlanGroupedTieredPrice): T

                /**
                 * Maps an unknown variant of [InnerPrice] to a value of type [T].
                 *
                 * An instance of [InnerPrice] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown InnerPrice: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<InnerPrice>(InnerPrice::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): InnerPrice {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanUnitPrice>())?.let {
                                InnerPrice(unit = it, _json = json)
                            } ?: InnerPrice(_json = json)
                        }
                        "package" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanPackagePrice>())
                                ?.let { InnerPrice(package_ = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "matrix" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanMatrixPrice>())?.let {
                                InnerPrice(matrix = it, _json = json)
                            } ?: InnerPrice(_json = json)
                        }
                        "tiered" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanTieredPrice>())?.let {
                                InnerPrice(tiered = it, _json = json)
                            } ?: InnerPrice(_json = json)
                        }
                        "tiered_bps" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanTieredBpsPrice>())
                                ?.let { InnerPrice(tieredBps = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "bps" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanBpsPrice>())?.let {
                                InnerPrice(bps = it, _json = json)
                            } ?: InnerPrice(_json = json)
                        }
                        "bulk_bps" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanBulkBpsPrice>())
                                ?.let { InnerPrice(bulkBps = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "bulk" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanBulkPrice>())?.let {
                                InnerPrice(bulk = it, _json = json)
                            } ?: InnerPrice(_json = json)
                        }
                        "threshold_total_amount" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanThresholdTotalAmountPrice>(),
                                )
                                ?.let { InnerPrice(thresholdTotalAmount = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "tiered_package" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanTieredPackagePrice>())
                                ?.let { InnerPrice(tieredPackage = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "tiered_with_minimum" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanTieredWithMinimumPrice>(),
                                )
                                ?.let { InnerPrice(tieredWithMinimum = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "unit_with_percent" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanUnitWithPercentPrice>(),
                                )
                                ?.let { InnerPrice(unitWithPercent = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "package_with_allocation" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanPackageWithAllocationPrice>(),
                                )
                                ?.let { InnerPrice(packageWithAllocation = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "tiered_with_proration" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanTierWithProrationPrice>(),
                                )
                                ?.let { InnerPrice(tieredWithProration = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "unit_with_proration" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanUnitWithProrationPrice>(),
                                )
                                ?.let { InnerPrice(unitWithProration = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "grouped_allocation" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanGroupedAllocationPrice>(),
                                )
                                ?.let { InnerPrice(groupedAllocation = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "grouped_with_prorated_minimum" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanGroupedWithProratedMinimumPrice>(),
                                )
                                ?.let { InnerPrice(groupedWithProratedMinimum = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "grouped_with_metered_minimum" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanGroupedWithMeteredMinimumPrice>(),
                                )
                                ?.let { InnerPrice(groupedWithMeteredMinimum = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "matrix_with_display_name" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanMatrixWithDisplayNamePrice>(),
                                )
                                ?.let { InnerPrice(matrixWithDisplayName = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "bulk_with_proration" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanBulkWithProrationPrice>(),
                                )
                                ?.let { InnerPrice(bulkWithProration = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "grouped_tiered_package" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanGroupedTieredPackagePrice>(),
                                )
                                ?.let { InnerPrice(groupedTieredPackage = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "max_group_tiered_package" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanMaxGroupTieredPackagePrice>(),
                                )
                                ?.let { InnerPrice(maxGroupTieredPackage = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "scalable_matrix_with_unit_pricing" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanScalableMatrixWithUnitPricingPrice>(),
                                )
                                ?.let {
                                    InnerPrice(scalableMatrixWithUnitPricing = it, _json = json)
                                } ?: InnerPrice(_json = json)
                        }
                        "scalable_matrix_with_tiered_pricing" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanScalableMatrixWithTieredPricingPrice>(),
                                )
                                ?.let {
                                    InnerPrice(scalableMatrixWithTieredPricing = it, _json = json)
                                } ?: InnerPrice(_json = json)
                        }
                        "cumulative_grouped_bulk" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanCumulativeGroupedBulkPrice>(),
                                )
                                ?.let { InnerPrice(cumulativeGroupedBulk = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "tiered_package_with_minimum" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanTieredPackageWithMinimumPrice>(),
                                )
                                ?.let { InnerPrice(tieredPackageWithMinimum = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "matrix_with_allocation" -> {
                            return tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewPlanMatrixWithAllocationPrice>(),
                                )
                                ?.let { InnerPrice(matrixWithAllocation = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                        "grouped_tiered" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPlanGroupedTieredPrice>())
                                ?.let { InnerPrice(groupedTiered = it, _json = json) }
                                ?: InnerPrice(_json = json)
                        }
                    }

                    return InnerPrice(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<InnerPrice>(InnerPrice::class) {

                override fun serialize(
                    value: InnerPrice,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.unit != null -> generator.writeObject(value.unit)
                        value.package_ != null -> generator.writeObject(value.package_)
                        value.matrix != null -> generator.writeObject(value.matrix)
                        value.tiered != null -> generator.writeObject(value.tiered)
                        value.tieredBps != null -> generator.writeObject(value.tieredBps)
                        value.bps != null -> generator.writeObject(value.bps)
                        value.bulkBps != null -> generator.writeObject(value.bulkBps)
                        value.bulk != null -> generator.writeObject(value.bulk)
                        value.thresholdTotalAmount != null ->
                            generator.writeObject(value.thresholdTotalAmount)
                        value.tieredPackage != null -> generator.writeObject(value.tieredPackage)
                        value.tieredWithMinimum != null ->
                            generator.writeObject(value.tieredWithMinimum)
                        value.unitWithPercent != null ->
                            generator.writeObject(value.unitWithPercent)
                        value.packageWithAllocation != null ->
                            generator.writeObject(value.packageWithAllocation)
                        value.tieredWithProration != null ->
                            generator.writeObject(value.tieredWithProration)
                        value.unitWithProration != null ->
                            generator.writeObject(value.unitWithProration)
                        value.groupedAllocation != null ->
                            generator.writeObject(value.groupedAllocation)
                        value.groupedWithProratedMinimum != null ->
                            generator.writeObject(value.groupedWithProratedMinimum)
                        value.groupedWithMeteredMinimum != null ->
                            generator.writeObject(value.groupedWithMeteredMinimum)
                        value.matrixWithDisplayName != null ->
                            generator.writeObject(value.matrixWithDisplayName)
                        value.bulkWithProration != null ->
                            generator.writeObject(value.bulkWithProration)
                        value.groupedTieredPackage != null ->
                            generator.writeObject(value.groupedTieredPackage)
                        value.maxGroupTieredPackage != null ->
                            generator.writeObject(value.maxGroupTieredPackage)
                        value.scalableMatrixWithUnitPricing != null ->
                            generator.writeObject(value.scalableMatrixWithUnitPricing)
                        value.scalableMatrixWithTieredPricing != null ->
                            generator.writeObject(value.scalableMatrixWithTieredPricing)
                        value.cumulativeGroupedBulk != null ->
                            generator.writeObject(value.cumulativeGroupedBulk)
                        value.tieredPackageWithMinimum != null ->
                            generator.writeObject(value.tieredPackageWithMinimum)
                        value.matrixWithAllocation != null ->
                            generator.writeObject(value.matrixWithAllocation)
                        value.groupedTiered != null -> generator.writeObject(value.groupedTiered)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid InnerPrice")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Price && allocationPrice == other.allocationPrice && planPhaseOrder == other.planPhaseOrder && price == other.price && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(allocationPrice, planPhaseOrder, price, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Price{allocationPrice=$allocationPrice, planPhaseOrder=$planPhaseOrder, price=$price, additionalProperties=$additionalProperties}"
    }

    class Adjustment
    private constructor(
        private val adjustment: JsonField<InnerAdjustment>,
        private val planPhaseOrder: JsonField<Long>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("adjustment")
            @ExcludeMissing
            adjustment: JsonField<InnerAdjustment> = JsonMissing.of(),
            @JsonProperty("plan_phase_order")
            @ExcludeMissing
            planPhaseOrder: JsonField<Long> = JsonMissing.of(),
        ) : this(adjustment, planPhaseOrder, mutableMapOf())

        /**
         * The definition of a new adjustment to create and add to the plan.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun adjustment(): InnerAdjustment = adjustment.getRequired("adjustment")

        /**
         * The phase to add this adjustment to.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun planPhaseOrder(): Optional<Long> = planPhaseOrder.getOptional("plan_phase_order")

        /**
         * Returns the raw JSON value of [adjustment].
         *
         * Unlike [adjustment], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("adjustment")
        @ExcludeMissing
        fun _adjustment(): JsonField<InnerAdjustment> = adjustment

        /**
         * Returns the raw JSON value of [planPhaseOrder].
         *
         * Unlike [planPhaseOrder], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("plan_phase_order")
        @ExcludeMissing
        fun _planPhaseOrder(): JsonField<Long> = planPhaseOrder

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Adjustment].
             *
             * The following fields are required:
             * ```java
             * .adjustment()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Adjustment]. */
        class Builder internal constructor() {

            private var adjustment: JsonField<InnerAdjustment>? = null
            private var planPhaseOrder: JsonField<Long> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(adjustment: Adjustment) = apply {
                this.adjustment = adjustment.adjustment
                planPhaseOrder = adjustment.planPhaseOrder
                additionalProperties = adjustment.additionalProperties.toMutableMap()
            }

            /** The definition of a new adjustment to create and add to the plan. */
            fun adjustment(adjustment: InnerAdjustment) = adjustment(JsonField.of(adjustment))

            /**
             * Sets [Builder.adjustment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.adjustment] with a well-typed [InnerAdjustment]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun adjustment(adjustment: JsonField<InnerAdjustment>) = apply {
                this.adjustment = adjustment
            }

            /**
             * Alias for calling [adjustment] with
             * `InnerAdjustment.ofPercentageDiscount(percentageDiscount)`.
             */
            fun adjustment(percentageDiscount: NewPercentageDiscount) =
                adjustment(InnerAdjustment.ofPercentageDiscount(percentageDiscount))

            /**
             * Alias for calling [adjustment] with the following:
             * ```java
             * NewPercentageDiscount.builder()
             *     .adjustmentType(NewPercentageDiscount.AdjustmentType.PERCENTAGE_DISCOUNT)
             *     .percentageDiscount(percentageDiscount)
             *     .build()
             * ```
             */
            fun percentageDiscountAdjustment(percentageDiscount: Double) =
                adjustment(
                    NewPercentageDiscount.builder()
                        .adjustmentType(NewPercentageDiscount.AdjustmentType.PERCENTAGE_DISCOUNT)
                        .percentageDiscount(percentageDiscount)
                        .build()
                )

            /**
             * Alias for calling [adjustment] with `InnerAdjustment.ofUsageDiscount(usageDiscount)`.
             */
            fun adjustment(usageDiscount: NewUsageDiscount) =
                adjustment(InnerAdjustment.ofUsageDiscount(usageDiscount))

            /**
             * Alias for calling [adjustment] with the following:
             * ```java
             * NewUsageDiscount.builder()
             *     .adjustmentType(NewUsageDiscount.AdjustmentType.USAGE_DISCOUNT)
             *     .usageDiscount(usageDiscount)
             *     .build()
             * ```
             */
            fun usageDiscountAdjustment(usageDiscount: Double) =
                adjustment(
                    NewUsageDiscount.builder()
                        .adjustmentType(NewUsageDiscount.AdjustmentType.USAGE_DISCOUNT)
                        .usageDiscount(usageDiscount)
                        .build()
                )

            /**
             * Alias for calling [adjustment] with
             * `InnerAdjustment.ofAmountDiscount(amountDiscount)`.
             */
            fun adjustment(amountDiscount: NewAmountDiscount) =
                adjustment(InnerAdjustment.ofAmountDiscount(amountDiscount))

            /**
             * Alias for calling [adjustment] with the following:
             * ```java
             * NewAmountDiscount.builder()
             *     .adjustmentType(NewAmountDiscount.AdjustmentType.AMOUNT_DISCOUNT)
             *     .amountDiscount(amountDiscount)
             *     .build()
             * ```
             */
            fun amountDiscountAdjustment(amountDiscount: String) =
                adjustment(
                    NewAmountDiscount.builder()
                        .adjustmentType(NewAmountDiscount.AdjustmentType.AMOUNT_DISCOUNT)
                        .amountDiscount(amountDiscount)
                        .build()
                )

            /** Alias for calling [adjustment] with `InnerAdjustment.ofMinimum(minimum)`. */
            fun adjustment(minimum: NewMinimum) = adjustment(InnerAdjustment.ofMinimum(minimum))

            /** Alias for calling [adjustment] with `InnerAdjustment.ofMaximum(maximum)`. */
            fun adjustment(maximum: NewMaximum) = adjustment(InnerAdjustment.ofMaximum(maximum))

            /**
             * Alias for calling [adjustment] with the following:
             * ```java
             * NewMaximum.builder()
             *     .adjustmentType(NewMaximum.AdjustmentType.MAXIMUM)
             *     .maximumAmount(maximumAmount)
             *     .build()
             * ```
             */
            fun maximumAdjustment(maximumAmount: String) =
                adjustment(
                    NewMaximum.builder()
                        .adjustmentType(NewMaximum.AdjustmentType.MAXIMUM)
                        .maximumAmount(maximumAmount)
                        .build()
                )

            /** The phase to add this adjustment to. */
            fun planPhaseOrder(planPhaseOrder: Long?) =
                planPhaseOrder(JsonField.ofNullable(planPhaseOrder))

            /**
             * Alias for [Builder.planPhaseOrder].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun planPhaseOrder(planPhaseOrder: Long) = planPhaseOrder(planPhaseOrder as Long?)

            /** Alias for calling [Builder.planPhaseOrder] with `planPhaseOrder.orElse(null)`. */
            fun planPhaseOrder(planPhaseOrder: Optional<Long>) =
                planPhaseOrder(planPhaseOrder.getOrNull())

            /**
             * Sets [Builder.planPhaseOrder] to an arbitrary JSON value.
             *
             * You should usually call [Builder.planPhaseOrder] with a well-typed [Long] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun planPhaseOrder(planPhaseOrder: JsonField<Long>) = apply {
                this.planPhaseOrder = planPhaseOrder
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Adjustment].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .adjustment()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Adjustment =
                Adjustment(
                    checkRequired("adjustment", adjustment),
                    planPhaseOrder,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Adjustment = apply {
            if (validated) {
                return@apply
            }

            adjustment().validate()
            planPhaseOrder()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (adjustment.asKnown().getOrNull()?.validity() ?: 0) +
                (if (planPhaseOrder.asKnown().isPresent) 1 else 0)

        /** The definition of a new adjustment to create and add to the plan. */
        @JsonDeserialize(using = InnerAdjustment.Deserializer::class)
        @JsonSerialize(using = InnerAdjustment.Serializer::class)
        class InnerAdjustment
        private constructor(
            private val percentageDiscount: NewPercentageDiscount? = null,
            private val usageDiscount: NewUsageDiscount? = null,
            private val amountDiscount: NewAmountDiscount? = null,
            private val minimum: NewMinimum? = null,
            private val maximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            fun percentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(percentageDiscount)

            fun usageDiscount(): Optional<NewUsageDiscount> = Optional.ofNullable(usageDiscount)

            fun amountDiscount(): Optional<NewAmountDiscount> = Optional.ofNullable(amountDiscount)

            fun minimum(): Optional<NewMinimum> = Optional.ofNullable(minimum)

            fun maximum(): Optional<NewMaximum> = Optional.ofNullable(maximum)

            fun isPercentageDiscount(): Boolean = percentageDiscount != null

            fun isUsageDiscount(): Boolean = usageDiscount != null

            fun isAmountDiscount(): Boolean = amountDiscount != null

            fun isMinimum(): Boolean = minimum != null

            fun isMaximum(): Boolean = maximum != null

            fun asPercentageDiscount(): NewPercentageDiscount =
                percentageDiscount.getOrThrow("percentageDiscount")

            fun asUsageDiscount(): NewUsageDiscount = usageDiscount.getOrThrow("usageDiscount")

            fun asAmountDiscount(): NewAmountDiscount = amountDiscount.getOrThrow("amountDiscount")

            fun asMinimum(): NewMinimum = minimum.getOrThrow("minimum")

            fun asMaximum(): NewMaximum = maximum.getOrThrow("maximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T =
                when {
                    percentageDiscount != null ->
                        visitor.visitPercentageDiscount(percentageDiscount)
                    usageDiscount != null -> visitor.visitUsageDiscount(usageDiscount)
                    amountDiscount != null -> visitor.visitAmountDiscount(amountDiscount)
                    minimum != null -> visitor.visitMinimum(minimum)
                    maximum != null -> visitor.visitMaximum(maximum)
                    else -> visitor.unknown(_json)
                }

            private var validated: Boolean = false

            fun validate(): InnerAdjustment = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitPercentageDiscount(
                            percentageDiscount: NewPercentageDiscount
                        ) {
                            percentageDiscount.validate()
                        }

                        override fun visitUsageDiscount(usageDiscount: NewUsageDiscount) {
                            usageDiscount.validate()
                        }

                        override fun visitAmountDiscount(amountDiscount: NewAmountDiscount) {
                            amountDiscount.validate()
                        }

                        override fun visitMinimum(minimum: NewMinimum) {
                            minimum.validate()
                        }

                        override fun visitMaximum(maximum: NewMaximum) {
                            maximum.validate()
                        }
                    }
                )
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic
            internal fun validity(): Int =
                accept(
                    object : Visitor<Int> {
                        override fun visitPercentageDiscount(
                            percentageDiscount: NewPercentageDiscount
                        ) = percentageDiscount.validity()

                        override fun visitUsageDiscount(usageDiscount: NewUsageDiscount) =
                            usageDiscount.validity()

                        override fun visitAmountDiscount(amountDiscount: NewAmountDiscount) =
                            amountDiscount.validity()

                        override fun visitMinimum(minimum: NewMinimum) = minimum.validity()

                        override fun visitMaximum(maximum: NewMaximum) = maximum.validity()

                        override fun unknown(json: JsonValue?) = 0
                    }
                )

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is InnerAdjustment && percentageDiscount == other.percentageDiscount && usageDiscount == other.usageDiscount && amountDiscount == other.amountDiscount && minimum == other.minimum && maximum == other.maximum /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(percentageDiscount, usageDiscount, amountDiscount, minimum, maximum) /* spotless:on */

            override fun toString(): String =
                when {
                    percentageDiscount != null ->
                        "InnerAdjustment{percentageDiscount=$percentageDiscount}"
                    usageDiscount != null -> "InnerAdjustment{usageDiscount=$usageDiscount}"
                    amountDiscount != null -> "InnerAdjustment{amountDiscount=$amountDiscount}"
                    minimum != null -> "InnerAdjustment{minimum=$minimum}"
                    maximum != null -> "InnerAdjustment{maximum=$maximum}"
                    _json != null -> "InnerAdjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid InnerAdjustment")
                }

            companion object {

                @JvmStatic
                fun ofPercentageDiscount(percentageDiscount: NewPercentageDiscount) =
                    InnerAdjustment(percentageDiscount = percentageDiscount)

                @JvmStatic
                fun ofUsageDiscount(usageDiscount: NewUsageDiscount) =
                    InnerAdjustment(usageDiscount = usageDiscount)

                @JvmStatic
                fun ofAmountDiscount(amountDiscount: NewAmountDiscount) =
                    InnerAdjustment(amountDiscount = amountDiscount)

                @JvmStatic fun ofMinimum(minimum: NewMinimum) = InnerAdjustment(minimum = minimum)

                @JvmStatic fun ofMaximum(maximum: NewMaximum) = InnerAdjustment(maximum = maximum)
            }

            /**
             * An interface that defines how to map each variant of [InnerAdjustment] to a value of
             * type [T].
             */
            interface Visitor<out T> {

                fun visitPercentageDiscount(percentageDiscount: NewPercentageDiscount): T

                fun visitUsageDiscount(usageDiscount: NewUsageDiscount): T

                fun visitAmountDiscount(amountDiscount: NewAmountDiscount): T

                fun visitMinimum(minimum: NewMinimum): T

                fun visitMaximum(maximum: NewMaximum): T

                /**
                 * Maps an unknown variant of [InnerAdjustment] to a value of type [T].
                 *
                 * An instance of [InnerAdjustment] can contain an unknown variant if it was
                 * deserialized from data that doesn't match any known variant. For example, if the
                 * SDK is on an older version than the API, then the API may respond with new
                 * variants that the SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown InnerAdjustment: $json")
                }
            }

            internal class Deserializer :
                BaseDeserializer<InnerAdjustment>(InnerAdjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): InnerAdjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>())
                                ?.let { InnerAdjustment(percentageDiscount = it, _json = json) }
                                ?: InnerAdjustment(_json = json)
                        }
                        "usage_discount" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewUsageDiscount>())?.let {
                                InnerAdjustment(usageDiscount = it, _json = json)
                            } ?: InnerAdjustment(_json = json)
                        }
                        "amount_discount" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>())?.let {
                                InnerAdjustment(amountDiscount = it, _json = json)
                            } ?: InnerAdjustment(_json = json)
                        }
                        "minimum" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewMinimum>())?.let {
                                InnerAdjustment(minimum = it, _json = json)
                            } ?: InnerAdjustment(_json = json)
                        }
                        "maximum" -> {
                            return tryDeserialize(node, jacksonTypeRef<NewMaximum>())?.let {
                                InnerAdjustment(maximum = it, _json = json)
                            } ?: InnerAdjustment(_json = json)
                        }
                    }

                    return InnerAdjustment(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<InnerAdjustment>(InnerAdjustment::class) {

                override fun serialize(
                    value: InnerAdjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.percentageDiscount != null ->
                            generator.writeObject(value.percentageDiscount)
                        value.usageDiscount != null -> generator.writeObject(value.usageDiscount)
                        value.amountDiscount != null -> generator.writeObject(value.amountDiscount)
                        value.minimum != null -> generator.writeObject(value.minimum)
                        value.maximum != null -> generator.writeObject(value.maximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid InnerAdjustment")
                    }
                }
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Adjustment && adjustment == other.adjustment && planPhaseOrder == other.planPhaseOrder && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustment, planPhaseOrder, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Adjustment{adjustment=$adjustment, planPhaseOrder=$planPhaseOrder, additionalProperties=$additionalProperties}"
    }

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed by setting
     * the value to `null`, and the entire metadata mapping can be cleared by setting `metadata` to
     * `null`.
     */
    class Metadata
    @JsonCreator
    private constructor(
        @com.fasterxml.jackson.annotation.JsonValue
        private val additionalProperties: Map<String, JsonValue>
    ) {

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [Metadata]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Metadata]. */
        class Builder internal constructor() {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(metadata: Metadata) = apply {
                additionalProperties = metadata.additionalProperties.toMutableMap()
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Metadata].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             */
            fun build(): Metadata = Metadata(additionalProperties.toImmutable())
        }

        private var validated: Boolean = false

        fun validate(): Metadata = apply {
            if (validated) {
                return@apply
            }

            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            additionalProperties.count { (_, value) -> !value.isNull() && !value.isMissing() }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
    }

    class PlanPhase
    private constructor(
        private val order: JsonField<Long>,
        private val alignBillingWithPhaseStartDate: JsonField<Boolean>,
        private val duration: JsonField<Long>,
        private val durationUnit: JsonField<DurationUnit>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("order") @ExcludeMissing order: JsonField<Long> = JsonMissing.of(),
            @JsonProperty("align_billing_with_phase_start_date")
            @ExcludeMissing
            alignBillingWithPhaseStartDate: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("duration") @ExcludeMissing duration: JsonField<Long> = JsonMissing.of(),
            @JsonProperty("duration_unit")
            @ExcludeMissing
            durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
        ) : this(order, alignBillingWithPhaseStartDate, duration, durationUnit, mutableMapOf())

        /**
         * Determines the ordering of the phase in a plan's lifecycle. 1 = first phase.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun order(): Long = order.getRequired("order")

        /**
         * Align billing cycle day with phase start date.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun alignBillingWithPhaseStartDate(): Optional<Boolean> =
            alignBillingWithPhaseStartDate.getOptional("align_billing_with_phase_start_date")

        /**
         * How many terms of length `duration_unit` this phase is active for. If null, this phase is
         * evergreen and active indefinitely
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun duration(): Optional<Long> = duration.getOptional("duration")

        /**
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun durationUnit(): Optional<DurationUnit> = durationUnit.getOptional("duration_unit")

        /**
         * Returns the raw JSON value of [order].
         *
         * Unlike [order], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("order") @ExcludeMissing fun _order(): JsonField<Long> = order

        /**
         * Returns the raw JSON value of [alignBillingWithPhaseStartDate].
         *
         * Unlike [alignBillingWithPhaseStartDate], this method doesn't throw if the JSON field has
         * an unexpected type.
         */
        @JsonProperty("align_billing_with_phase_start_date")
        @ExcludeMissing
        fun _alignBillingWithPhaseStartDate(): JsonField<Boolean> = alignBillingWithPhaseStartDate

        /**
         * Returns the raw JSON value of [duration].
         *
         * Unlike [duration], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("duration") @ExcludeMissing fun _duration(): JsonField<Long> = duration

        /**
         * Returns the raw JSON value of [durationUnit].
         *
         * Unlike [durationUnit], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("duration_unit")
        @ExcludeMissing
        fun _durationUnit(): JsonField<DurationUnit> = durationUnit

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [PlanPhase].
             *
             * The following fields are required:
             * ```java
             * .order()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [PlanPhase]. */
        class Builder internal constructor() {

            private var order: JsonField<Long>? = null
            private var alignBillingWithPhaseStartDate: JsonField<Boolean> = JsonMissing.of()
            private var duration: JsonField<Long> = JsonMissing.of()
            private var durationUnit: JsonField<DurationUnit> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(planPhase: PlanPhase) = apply {
                order = planPhase.order
                alignBillingWithPhaseStartDate = planPhase.alignBillingWithPhaseStartDate
                duration = planPhase.duration
                durationUnit = planPhase.durationUnit
                additionalProperties = planPhase.additionalProperties.toMutableMap()
            }

            /** Determines the ordering of the phase in a plan's lifecycle. 1 = first phase. */
            fun order(order: Long) = order(JsonField.of(order))

            /**
             * Sets [Builder.order] to an arbitrary JSON value.
             *
             * You should usually call [Builder.order] with a well-typed [Long] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun order(order: JsonField<Long>) = apply { this.order = order }

            /** Align billing cycle day with phase start date. */
            fun alignBillingWithPhaseStartDate(alignBillingWithPhaseStartDate: Boolean?) =
                alignBillingWithPhaseStartDate(JsonField.ofNullable(alignBillingWithPhaseStartDate))

            /**
             * Alias for [Builder.alignBillingWithPhaseStartDate].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun alignBillingWithPhaseStartDate(alignBillingWithPhaseStartDate: Boolean) =
                alignBillingWithPhaseStartDate(alignBillingWithPhaseStartDate as Boolean?)

            /**
             * Alias for calling [Builder.alignBillingWithPhaseStartDate] with
             * `alignBillingWithPhaseStartDate.orElse(null)`.
             */
            fun alignBillingWithPhaseStartDate(alignBillingWithPhaseStartDate: Optional<Boolean>) =
                alignBillingWithPhaseStartDate(alignBillingWithPhaseStartDate.getOrNull())

            /**
             * Sets [Builder.alignBillingWithPhaseStartDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.alignBillingWithPhaseStartDate] with a well-typed
             * [Boolean] value instead. This method is primarily for setting the field to an
             * undocumented or not yet supported value.
             */
            fun alignBillingWithPhaseStartDate(alignBillingWithPhaseStartDate: JsonField<Boolean>) =
                apply {
                    this.alignBillingWithPhaseStartDate = alignBillingWithPhaseStartDate
                }

            /**
             * How many terms of length `duration_unit` this phase is active for. If null, this
             * phase is evergreen and active indefinitely
             */
            fun duration(duration: Long?) = duration(JsonField.ofNullable(duration))

            /**
             * Alias for [Builder.duration].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun duration(duration: Long) = duration(duration as Long?)

            /** Alias for calling [Builder.duration] with `duration.orElse(null)`. */
            fun duration(duration: Optional<Long>) = duration(duration.getOrNull())

            /**
             * Sets [Builder.duration] to an arbitrary JSON value.
             *
             * You should usually call [Builder.duration] with a well-typed [Long] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

            fun durationUnit(durationUnit: DurationUnit?) =
                durationUnit(JsonField.ofNullable(durationUnit))

            /** Alias for calling [Builder.durationUnit] with `durationUnit.orElse(null)`. */
            fun durationUnit(durationUnit: Optional<DurationUnit>) =
                durationUnit(durationUnit.getOrNull())

            /**
             * Sets [Builder.durationUnit] to an arbitrary JSON value.
             *
             * You should usually call [Builder.durationUnit] with a well-typed [DurationUnit] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                this.durationUnit = durationUnit
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [PlanPhase].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .order()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): PlanPhase =
                PlanPhase(
                    checkRequired("order", order),
                    alignBillingWithPhaseStartDate,
                    duration,
                    durationUnit,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): PlanPhase = apply {
            if (validated) {
                return@apply
            }

            order()
            alignBillingWithPhaseStartDate()
            duration()
            durationUnit().ifPresent { it.validate() }
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (order.asKnown().isPresent) 1 else 0) +
                (if (alignBillingWithPhaseStartDate.asKnown().isPresent) 1 else 0) +
                (if (duration.asKnown().isPresent) 1 else 0) +
                (durationUnit.asKnown().getOrNull()?.validity() ?: 0)

        class DurationUnit @JsonCreator private constructor(private val value: JsonField<String>) :
            Enum {

            /**
             * Returns this class instance's raw value.
             *
             * This is usually only useful if this instance was deserialized from data that doesn't
             * match any known member, and you want to know that value. For example, if the SDK is
             * on an older version than the API, then the API may respond with new members that the
             * SDK is unaware of.
             */
            @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

            companion object {

                @JvmField val DAILY = of("daily")

                @JvmField val MONTHLY = of("monthly")

                @JvmField val QUARTERLY = of("quarterly")

                @JvmField val SEMI_ANNUAL = of("semi_annual")

                @JvmField val ANNUAL = of("annual")

                @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
            }

            /** An enum containing [DurationUnit]'s known values. */
            enum class Known {
                DAILY,
                MONTHLY,
                QUARTERLY,
                SEMI_ANNUAL,
                ANNUAL,
            }

            /**
             * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN] member.
             *
             * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
             * - It was deserialized from data that doesn't match any known member. For example, if
             *   the SDK is on an older version than the API, then the API may respond with new
             *   members that the SDK is unaware of.
             * - It was constructed with an arbitrary value using the [of] method.
             */
            enum class Value {
                DAILY,
                MONTHLY,
                QUARTERLY,
                SEMI_ANNUAL,
                ANNUAL,
                /**
                 * An enum member indicating that [DurationUnit] was instantiated with an unknown
                 * value.
                 */
                _UNKNOWN,
            }

            /**
             * Returns an enum member corresponding to this class instance's value, or
             * [Value._UNKNOWN] if the class was instantiated with an unknown value.
             *
             * Use the [known] method instead if you're certain the value is always known or if you
             * want to throw for the unknown case.
             */
            fun value(): Value =
                when (this) {
                    DAILY -> Value.DAILY
                    MONTHLY -> Value.MONTHLY
                    QUARTERLY -> Value.QUARTERLY
                    SEMI_ANNUAL -> Value.SEMI_ANNUAL
                    ANNUAL -> Value.ANNUAL
                    else -> Value._UNKNOWN
                }

            /**
             * Returns an enum member corresponding to this class instance's value.
             *
             * Use the [value] method instead if you're uncertain the value is always known and
             * don't want to throw for the unknown case.
             *
             * @throws OrbInvalidDataException if this class instance's value is a not a known
             *   member.
             */
            fun known(): Known =
                when (this) {
                    DAILY -> Known.DAILY
                    MONTHLY -> Known.MONTHLY
                    QUARTERLY -> Known.QUARTERLY
                    SEMI_ANNUAL -> Known.SEMI_ANNUAL
                    ANNUAL -> Known.ANNUAL
                    else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                }

            /**
             * Returns this class instance's primitive wire representation.
             *
             * This differs from the [toString] method because that method is primarily for
             * debugging and generally doesn't throw.
             *
             * @throws OrbInvalidDataException if this class instance's value does not have the
             *   expected primitive type.
             */
            fun asString(): String =
                _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

            private var validated: Boolean = false

            fun validate(): DurationUnit = apply {
                if (validated) {
                    return@apply
                }

                known()
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: OrbInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
            }

            override fun hashCode() = value.hashCode()

            override fun toString() = value.toString()
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is PlanPhase && order == other.order && alignBillingWithPhaseStartDate == other.alignBillingWithPhaseStartDate && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(order, alignBillingWithPhaseStartDate, duration, durationUnit, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "PlanPhase{order=$order, alignBillingWithPhaseStartDate=$alignBillingWithPhaseStartDate, duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
    }

    /**
     * The status of the plan to create (either active or draft). If not specified, this defaults to
     * active.
     */
    class Status @JsonCreator private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val ACTIVE = of("active")

            @JvmField val DRAFT = of("draft")

            @JvmStatic fun of(value: String) = Status(JsonField.of(value))
        }

        /** An enum containing [Status]'s known values. */
        enum class Known {
            ACTIVE,
            DRAFT,
        }

        /**
         * An enum containing [Status]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [Status] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            ACTIVE,
            DRAFT,
            /** An enum member indicating that [Status] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                ACTIVE -> Value.ACTIVE
                DRAFT -> Value.DRAFT
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws OrbInvalidDataException if this class instance's value is a not a known member.
         */
        fun known(): Known =
            when (this) {
                ACTIVE -> Known.ACTIVE
                DRAFT -> Known.DRAFT
                else -> throw OrbInvalidDataException("Unknown Status: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws OrbInvalidDataException if this class instance's value does not have the expected
         *   primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

        private var validated: Boolean = false

        fun validate(): Status = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Status && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is PlanCreateParams && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() =
        "PlanCreateParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
