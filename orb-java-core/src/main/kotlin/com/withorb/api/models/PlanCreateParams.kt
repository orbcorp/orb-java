// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.Params
import com.withorb.api.core.checkKnown
import com.withorb.api.core.checkRequired
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.Unit
import kotlin.jvm.optionals.getOrNull

/** This endpoint allows creation of plans including their prices. */
class PlanCreateParams
private constructor(
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    /**
     * An ISO 4217 currency string for invoices generated by subscriptions on this plan.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun currency(): String = body.currency()

    /**
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun name(): String = body.name()

    /**
     * Prices for this plan. If the plan has phases, this includes prices across all phases of the
     * plan.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type or is unexpectedly
     *   missing or null (e.g. if the server responded with an unexpected value).
     */
    fun prices(): List<Price> = body.prices()

    /**
     * Free-form text which is available on the invoice PDF and the Orb invoice portal.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun defaultInvoiceMemo(): Optional<String> = body.defaultInvoiceMemo()

    /**
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun externalPlanId(): Optional<String> = body.externalPlanId()

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed by setting
     * the value to `null`, and the entire metadata mapping can be cleared by setting `metadata` to
     * `null`.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun metadata(): Optional<Metadata> = body.metadata()

    /**
     * The net terms determines the difference between the invoice date and the issue date for the
     * invoice. If you intend the invoice to be due on issue, set this to 0.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun netTerms(): Optional<Long> = body.netTerms()

    /**
     * The status of the plan to create (either active or draft). If not specified, this defaults to
     * active.
     *
     * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the server
     *   responded with an unexpected value).
     */
    fun status(): Optional<Status> = body.status()

    /**
     * Returns the raw JSON value of [currency].
     *
     * Unlike [currency], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _currency(): JsonField<String> = body._currency()

    /**
     * Returns the raw JSON value of [name].
     *
     * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _name(): JsonField<String> = body._name()

    /**
     * Returns the raw JSON value of [prices].
     *
     * Unlike [prices], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _prices(): JsonField<List<Price>> = body._prices()

    /**
     * Returns the raw JSON value of [defaultInvoiceMemo].
     *
     * Unlike [defaultInvoiceMemo], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _defaultInvoiceMemo(): JsonField<String> = body._defaultInvoiceMemo()

    /**
     * Returns the raw JSON value of [externalPlanId].
     *
     * Unlike [externalPlanId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _externalPlanId(): JsonField<String> = body._externalPlanId()

    /**
     * Returns the raw JSON value of [metadata].
     *
     * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _metadata(): JsonField<Metadata> = body._metadata()

    /**
     * Returns the raw JSON value of [netTerms].
     *
     * Unlike [netTerms], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _netTerms(): JsonField<Long> = body._netTerms()

    /**
     * Returns the raw JSON value of [status].
     *
     * Unlike [status], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _status(): JsonField<Status> = body._status()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [PlanCreateParams].
         *
         * The following fields are required:
         * ```java
         * .currency()
         * .name()
         * .prices()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [PlanCreateParams]. */
    class Builder internal constructor() {

        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(planCreateParams: PlanCreateParams) = apply {
            body = planCreateParams.body.toBuilder()
            additionalHeaders = planCreateParams.additionalHeaders.toBuilder()
            additionalQueryParams = planCreateParams.additionalQueryParams.toBuilder()
        }

        /**
         * Sets the entire request body.
         *
         * This is generally only useful if you are already constructing the body separately.
         * Otherwise, it's more convenient to use the top-level setters instead:
         * - [currency]
         * - [name]
         * - [prices]
         * - [defaultInvoiceMemo]
         * - [externalPlanId]
         * - etc.
         */
        fun body(body: Body) = apply { this.body = body.toBuilder() }

        /** An ISO 4217 currency string for invoices generated by subscriptions on this plan. */
        fun currency(currency: String) = apply { body.currency(currency) }

        /**
         * Sets [Builder.currency] to an arbitrary JSON value.
         *
         * You should usually call [Builder.currency] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun currency(currency: JsonField<String>) = apply { body.currency(currency) }

        fun name(name: String) = apply { body.name(name) }

        /**
         * Sets [Builder.name] to an arbitrary JSON value.
         *
         * You should usually call [Builder.name] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun name(name: JsonField<String>) = apply { body.name(name) }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all phases of
         * the plan.
         */
        fun prices(prices: List<Price>) = apply { body.prices(prices) }

        /**
         * Sets [Builder.prices] to an arbitrary JSON value.
         *
         * You should usually call [Builder.prices] with a well-typed `List<Price>` value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun prices(prices: JsonField<List<Price>>) = apply { body.prices(prices) }

        /**
         * Adds a single [Price] to [prices].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addPrice(price: Price) = apply { body.addPrice(price) }

        /** Alias for calling [addPrice] with `Price.ofUnit(unit)`. */
        fun addPrice(unit: NewPlanUnitPrice) = apply { body.addPrice(unit) }

        /** Alias for calling [addPrice] with `Price.ofPackage(package_)`. */
        fun addPrice(package_: NewPlanPackagePrice) = apply { body.addPrice(package_) }

        /** Alias for calling [addPrice] with `Price.ofMatrix(matrix)`. */
        fun addPrice(matrix: NewPlanMatrixPrice) = apply { body.addPrice(matrix) }

        /** Alias for calling [addPrice] with `Price.ofTiered(tiered)`. */
        fun addPrice(tiered: NewPlanTieredPrice) = apply { body.addPrice(tiered) }

        /** Alias for calling [addPrice] with `Price.ofTieredBps(tieredBps)`. */
        fun addPrice(tieredBps: NewPlanTieredBpsPrice) = apply { body.addPrice(tieredBps) }

        /** Alias for calling [addPrice] with `Price.ofBps(bps)`. */
        fun addPrice(bps: NewPlanBpsPrice) = apply { body.addPrice(bps) }

        /** Alias for calling [addPrice] with `Price.ofBulkBps(bulkBps)`. */
        fun addPrice(bulkBps: NewPlanBulkBpsPrice) = apply { body.addPrice(bulkBps) }

        /** Alias for calling [addPrice] with `Price.ofBulk(bulk)`. */
        fun addPrice(bulk: NewPlanBulkPrice) = apply { body.addPrice(bulk) }

        /**
         * Alias for calling [addPrice] with `Price.ofThresholdTotalAmount(thresholdTotalAmount)`.
         */
        fun addPrice(thresholdTotalAmount: NewPlanThresholdTotalAmountPrice) = apply {
            body.addPrice(thresholdTotalAmount)
        }

        /** Alias for calling [addPrice] with `Price.ofTieredPackage(tieredPackage)`. */
        fun addPrice(tieredPackage: NewPlanTieredPackagePrice) = apply {
            body.addPrice(tieredPackage)
        }

        /** Alias for calling [addPrice] with `Price.ofTieredWithMinimum(tieredWithMinimum)`. */
        fun addPrice(tieredWithMinimum: NewPlanTieredWithMinimumPrice) = apply {
            body.addPrice(tieredWithMinimum)
        }

        /** Alias for calling [addPrice] with `Price.ofUnitWithPercent(unitWithPercent)`. */
        fun addPrice(unitWithPercent: NewPlanUnitWithPercentPrice) = apply {
            body.addPrice(unitWithPercent)
        }

        /**
         * Alias for calling [addPrice] with `Price.ofPackageWithAllocation(packageWithAllocation)`.
         */
        fun addPrice(packageWithAllocation: NewPlanPackageWithAllocationPrice) = apply {
            body.addPrice(packageWithAllocation)
        }

        /** Alias for calling [addPrice] with `Price.ofTieredWithProration(tieredWithProration)`. */
        fun addPrice(tieredWithProration: NewPlanTierWithProrationPrice) = apply {
            body.addPrice(tieredWithProration)
        }

        /** Alias for calling [addPrice] with `Price.ofUnitWithProration(unitWithProration)`. */
        fun addPrice(unitWithProration: NewPlanUnitWithProrationPrice) = apply {
            body.addPrice(unitWithProration)
        }

        /** Alias for calling [addPrice] with `Price.ofGroupedAllocation(groupedAllocation)`. */
        fun addPrice(groupedAllocation: NewPlanGroupedAllocationPrice) = apply {
            body.addPrice(groupedAllocation)
        }

        /**
         * Alias for calling [addPrice] with
         * `Price.ofGroupedWithProratedMinimum(groupedWithProratedMinimum)`.
         */
        fun addPrice(groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice) = apply {
            body.addPrice(groupedWithProratedMinimum)
        }

        /**
         * Alias for calling [addPrice] with
         * `Price.ofGroupedWithMeteredMinimum(groupedWithMeteredMinimum)`.
         */
        fun addPrice(groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice) = apply {
            body.addPrice(groupedWithMeteredMinimum)
        }

        /**
         * Alias for calling [addPrice] with `Price.ofMatrixWithDisplayName(matrixWithDisplayName)`.
         */
        fun addPrice(matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice) = apply {
            body.addPrice(matrixWithDisplayName)
        }

        /** Alias for calling [addPrice] with `Price.ofBulkWithProration(bulkWithProration)`. */
        fun addPrice(bulkWithProration: NewPlanBulkWithProrationPrice) = apply {
            body.addPrice(bulkWithProration)
        }

        /**
         * Alias for calling [addPrice] with `Price.ofGroupedTieredPackage(groupedTieredPackage)`.
         */
        fun addPrice(groupedTieredPackage: NewPlanGroupedTieredPackagePrice) = apply {
            body.addPrice(groupedTieredPackage)
        }

        /**
         * Alias for calling [addPrice] with `Price.ofMaxGroupTieredPackage(maxGroupTieredPackage)`.
         */
        fun addPrice(maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice) = apply {
            body.addPrice(maxGroupTieredPackage)
        }

        /**
         * Alias for calling [addPrice] with
         * `Price.ofScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing)`.
         */
        fun addPrice(scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice) =
            apply {
                body.addPrice(scalableMatrixWithUnitPricing)
            }

        /**
         * Alias for calling [addPrice] with
         * `Price.ofScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing)`.
         */
        fun addPrice(scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice) =
            apply {
                body.addPrice(scalableMatrixWithTieredPricing)
            }

        /**
         * Alias for calling [addPrice] with `Price.ofCumulativeGroupedBulk(cumulativeGroupedBulk)`.
         */
        fun addPrice(cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice) = apply {
            body.addPrice(cumulativeGroupedBulk)
        }

        /**
         * Alias for calling [addPrice] with
         * `Price.ofTieredPackageWithMinimum(tieredPackageWithMinimum)`.
         */
        fun addPrice(tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice) = apply {
            body.addPrice(tieredPackageWithMinimum)
        }

        /**
         * Alias for calling [addPrice] with `Price.ofMatrixWithAllocation(matrixWithAllocation)`.
         */
        fun addPrice(matrixWithAllocation: NewPlanMatrixWithAllocationPrice) = apply {
            body.addPrice(matrixWithAllocation)
        }

        /** Alias for calling [addPrice] with `Price.ofGroupedTiered(groupedTiered)`. */
        fun addPrice(groupedTiered: NewPlanGroupedTieredPrice) = apply {
            body.addPrice(groupedTiered)
        }

        /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
        fun defaultInvoiceMemo(defaultInvoiceMemo: String?) = apply {
            body.defaultInvoiceMemo(defaultInvoiceMemo)
        }

        /**
         * Alias for calling [Builder.defaultInvoiceMemo] with `defaultInvoiceMemo.orElse(null)`.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) =
            defaultInvoiceMemo(defaultInvoiceMemo.getOrNull())

        /**
         * Sets [Builder.defaultInvoiceMemo] to an arbitrary JSON value.
         *
         * You should usually call [Builder.defaultInvoiceMemo] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: JsonField<String>) = apply {
            body.defaultInvoiceMemo(defaultInvoiceMemo)
        }

        fun externalPlanId(externalPlanId: String?) = apply { body.externalPlanId(externalPlanId) }

        /** Alias for calling [Builder.externalPlanId] with `externalPlanId.orElse(null)`. */
        fun externalPlanId(externalPlanId: Optional<String>) =
            externalPlanId(externalPlanId.getOrNull())

        /**
         * Sets [Builder.externalPlanId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.externalPlanId] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun externalPlanId(externalPlanId: JsonField<String>) = apply {
            body.externalPlanId(externalPlanId)
        }

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         */
        fun metadata(metadata: Metadata?) = apply { body.metadata(metadata) }

        /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
        fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

        /**
         * Sets [Builder.metadata] to an arbitrary JSON value.
         *
         * You should usually call [Builder.metadata] with a well-typed [Metadata] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun metadata(metadata: JsonField<Metadata>) = apply { body.metadata(metadata) }

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0.
         */
        fun netTerms(netTerms: Long?) = apply { body.netTerms(netTerms) }

        /**
         * Alias for [Builder.netTerms].
         *
         * This unboxed primitive overload exists for backwards compatibility.
         */
        fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

        /** Alias for calling [Builder.netTerms] with `netTerms.orElse(null)`. */
        fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.getOrNull())

        /**
         * Sets [Builder.netTerms] to an arbitrary JSON value.
         *
         * You should usually call [Builder.netTerms] with a well-typed [Long] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun netTerms(netTerms: JsonField<Long>) = apply { body.netTerms(netTerms) }

        /**
         * The status of the plan to create (either active or draft). If not specified, this
         * defaults to active.
         */
        fun status(status: Status) = apply { body.status(status) }

        /**
         * Sets [Builder.status] to an arbitrary JSON value.
         *
         * You should usually call [Builder.status] with a well-typed [Status] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun status(status: JsonField<Status>) = apply { body.status(status) }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [PlanCreateParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .currency()
         * .name()
         * .prices()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): PlanCreateParams =
            PlanCreateParams(body.build(), additionalHeaders.build(), additionalQueryParams.build())
    }

    fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    class Body
    private constructor(
        private val currency: JsonField<String>,
        private val name: JsonField<String>,
        private val prices: JsonField<List<Price>>,
        private val defaultInvoiceMemo: JsonField<String>,
        private val externalPlanId: JsonField<String>,
        private val metadata: JsonField<Metadata>,
        private val netTerms: JsonField<Long>,
        private val status: JsonField<Status>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("currency")
            @ExcludeMissing
            currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("prices")
            @ExcludeMissing
            prices: JsonField<List<Price>> = JsonMissing.of(),
            @JsonProperty("default_invoice_memo")
            @ExcludeMissing
            defaultInvoiceMemo: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_plan_id")
            @ExcludeMissing
            externalPlanId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("metadata")
            @ExcludeMissing
            metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonProperty("net_terms") @ExcludeMissing netTerms: JsonField<Long> = JsonMissing.of(),
            @JsonProperty("status") @ExcludeMissing status: JsonField<Status> = JsonMissing.of(),
        ) : this(
            currency,
            name,
            prices,
            defaultInvoiceMemo,
            externalPlanId,
            metadata,
            netTerms,
            status,
            mutableMapOf(),
        )

        /**
         * An ISO 4217 currency string for invoices generated by subscriptions on this plan.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun currency(): String = currency.getRequired("currency")

        /**
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun name(): String = name.getRequired("name")

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all phases of
         * the plan.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type or is
         *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun prices(): List<Price> = prices.getRequired("prices")

        /**
         * Free-form text which is available on the invoice PDF and the Orb invoice portal.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun defaultInvoiceMemo(): Optional<String> =
            defaultInvoiceMemo.getOptional("default_invoice_memo")

        /**
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun externalPlanId(): Optional<String> = externalPlanId.getOptional("external_plan_id")

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed by
         * setting the value to `null`, and the entire metadata mapping can be cleared by setting
         * `metadata` to `null`.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun metadata(): Optional<Metadata> = metadata.getOptional("metadata")

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun netTerms(): Optional<Long> = netTerms.getOptional("net_terms")

        /**
         * The status of the plan to create (either active or draft). If not specified, this
         * defaults to active.
         *
         * @throws OrbInvalidDataException if the JSON field has an unexpected type (e.g. if the
         *   server responded with an unexpected value).
         */
        fun status(): Optional<Status> = status.getOptional("status")

        /**
         * Returns the raw JSON value of [currency].
         *
         * Unlike [currency], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

        /**
         * Returns the raw JSON value of [name].
         *
         * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

        /**
         * Returns the raw JSON value of [prices].
         *
         * Unlike [prices], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("prices") @ExcludeMissing fun _prices(): JsonField<List<Price>> = prices

        /**
         * Returns the raw JSON value of [defaultInvoiceMemo].
         *
         * Unlike [defaultInvoiceMemo], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("default_invoice_memo")
        @ExcludeMissing
        fun _defaultInvoiceMemo(): JsonField<String> = defaultInvoiceMemo

        /**
         * Returns the raw JSON value of [externalPlanId].
         *
         * Unlike [externalPlanId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("external_plan_id")
        @ExcludeMissing
        fun _externalPlanId(): JsonField<String> = externalPlanId

        /**
         * Returns the raw JSON value of [metadata].
         *
         * Unlike [metadata], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("metadata") @ExcludeMissing fun _metadata(): JsonField<Metadata> = metadata

        /**
         * Returns the raw JSON value of [netTerms].
         *
         * Unlike [netTerms], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("net_terms") @ExcludeMissing fun _netTerms(): JsonField<Long> = netTerms

        /**
         * Returns the raw JSON value of [status].
         *
         * Unlike [status], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("status") @ExcludeMissing fun _status(): JsonField<Status> = status

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             * ```java
             * .currency()
             * .name()
             * .prices()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var currency: JsonField<String>? = null
            private var name: JsonField<String>? = null
            private var prices: JsonField<MutableList<Price>>? = null
            private var defaultInvoiceMemo: JsonField<String> = JsonMissing.of()
            private var externalPlanId: JsonField<String> = JsonMissing.of()
            private var metadata: JsonField<Metadata> = JsonMissing.of()
            private var netTerms: JsonField<Long> = JsonMissing.of()
            private var status: JsonField<Status> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                currency = body.currency
                name = body.name
                prices = body.prices.map { it.toMutableList() }
                defaultInvoiceMemo = body.defaultInvoiceMemo
                externalPlanId = body.externalPlanId
                metadata = body.metadata
                netTerms = body.netTerms
                status = body.status
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            /** An ISO 4217 currency string for invoices generated by subscriptions on this plan. */
            fun currency(currency: String) = currency(JsonField.of(currency))

            /**
             * Sets [Builder.currency] to an arbitrary JSON value.
             *
             * You should usually call [Builder.currency] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun currency(currency: JsonField<String>) = apply { this.currency = currency }

            fun name(name: String) = name(JsonField.of(name))

            /**
             * Sets [Builder.name] to an arbitrary JSON value.
             *
             * You should usually call [Builder.name] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun name(name: JsonField<String>) = apply { this.name = name }

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all phases
             * of the plan.
             */
            fun prices(prices: List<Price>) = prices(JsonField.of(prices))

            /**
             * Sets [Builder.prices] to an arbitrary JSON value.
             *
             * You should usually call [Builder.prices] with a well-typed `List<Price>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun prices(prices: JsonField<List<Price>>) = apply {
                this.prices = prices.map { it.toMutableList() }
            }

            /**
             * Adds a single [Price] to [prices].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addPrice(price: Price) = apply {
                prices =
                    (prices ?: JsonField.of(mutableListOf())).also {
                        checkKnown("prices", it).add(price)
                    }
            }

            /** Alias for calling [addPrice] with `Price.ofUnit(unit)`. */
            fun addPrice(unit: NewPlanUnitPrice) = addPrice(Price.ofUnit(unit))

            /** Alias for calling [addPrice] with `Price.ofPackage(package_)`. */
            fun addPrice(package_: NewPlanPackagePrice) = addPrice(Price.ofPackage(package_))

            /** Alias for calling [addPrice] with `Price.ofMatrix(matrix)`. */
            fun addPrice(matrix: NewPlanMatrixPrice) = addPrice(Price.ofMatrix(matrix))

            /** Alias for calling [addPrice] with `Price.ofTiered(tiered)`. */
            fun addPrice(tiered: NewPlanTieredPrice) = addPrice(Price.ofTiered(tiered))

            /** Alias for calling [addPrice] with `Price.ofTieredBps(tieredBps)`. */
            fun addPrice(tieredBps: NewPlanTieredBpsPrice) = addPrice(Price.ofTieredBps(tieredBps))

            /** Alias for calling [addPrice] with `Price.ofBps(bps)`. */
            fun addPrice(bps: NewPlanBpsPrice) = addPrice(Price.ofBps(bps))

            /** Alias for calling [addPrice] with `Price.ofBulkBps(bulkBps)`. */
            fun addPrice(bulkBps: NewPlanBulkBpsPrice) = addPrice(Price.ofBulkBps(bulkBps))

            /** Alias for calling [addPrice] with `Price.ofBulk(bulk)`. */
            fun addPrice(bulk: NewPlanBulkPrice) = addPrice(Price.ofBulk(bulk))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofThresholdTotalAmount(thresholdTotalAmount)`.
             */
            fun addPrice(thresholdTotalAmount: NewPlanThresholdTotalAmountPrice) =
                addPrice(Price.ofThresholdTotalAmount(thresholdTotalAmount))

            /** Alias for calling [addPrice] with `Price.ofTieredPackage(tieredPackage)`. */
            fun addPrice(tieredPackage: NewPlanTieredPackagePrice) =
                addPrice(Price.ofTieredPackage(tieredPackage))

            /** Alias for calling [addPrice] with `Price.ofTieredWithMinimum(tieredWithMinimum)`. */
            fun addPrice(tieredWithMinimum: NewPlanTieredWithMinimumPrice) =
                addPrice(Price.ofTieredWithMinimum(tieredWithMinimum))

            /** Alias for calling [addPrice] with `Price.ofUnitWithPercent(unitWithPercent)`. */
            fun addPrice(unitWithPercent: NewPlanUnitWithPercentPrice) =
                addPrice(Price.ofUnitWithPercent(unitWithPercent))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofPackageWithAllocation(packageWithAllocation)`.
             */
            fun addPrice(packageWithAllocation: NewPlanPackageWithAllocationPrice) =
                addPrice(Price.ofPackageWithAllocation(packageWithAllocation))

            /**
             * Alias for calling [addPrice] with `Price.ofTieredWithProration(tieredWithProration)`.
             */
            fun addPrice(tieredWithProration: NewPlanTierWithProrationPrice) =
                addPrice(Price.ofTieredWithProration(tieredWithProration))

            /** Alias for calling [addPrice] with `Price.ofUnitWithProration(unitWithProration)`. */
            fun addPrice(unitWithProration: NewPlanUnitWithProrationPrice) =
                addPrice(Price.ofUnitWithProration(unitWithProration))

            /** Alias for calling [addPrice] with `Price.ofGroupedAllocation(groupedAllocation)`. */
            fun addPrice(groupedAllocation: NewPlanGroupedAllocationPrice) =
                addPrice(Price.ofGroupedAllocation(groupedAllocation))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofGroupedWithProratedMinimum(groupedWithProratedMinimum)`.
             */
            fun addPrice(groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice) =
                addPrice(Price.ofGroupedWithProratedMinimum(groupedWithProratedMinimum))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofGroupedWithMeteredMinimum(groupedWithMeteredMinimum)`.
             */
            fun addPrice(groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice) =
                addPrice(Price.ofGroupedWithMeteredMinimum(groupedWithMeteredMinimum))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofMatrixWithDisplayName(matrixWithDisplayName)`.
             */
            fun addPrice(matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice) =
                addPrice(Price.ofMatrixWithDisplayName(matrixWithDisplayName))

            /** Alias for calling [addPrice] with `Price.ofBulkWithProration(bulkWithProration)`. */
            fun addPrice(bulkWithProration: NewPlanBulkWithProrationPrice) =
                addPrice(Price.ofBulkWithProration(bulkWithProration))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofGroupedTieredPackage(groupedTieredPackage)`.
             */
            fun addPrice(groupedTieredPackage: NewPlanGroupedTieredPackagePrice) =
                addPrice(Price.ofGroupedTieredPackage(groupedTieredPackage))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofMaxGroupTieredPackage(maxGroupTieredPackage)`.
             */
            fun addPrice(maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice) =
                addPrice(Price.ofMaxGroupTieredPackage(maxGroupTieredPackage))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing)`.
             */
            fun addPrice(scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice) =
                addPrice(Price.ofScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing)`.
             */
            fun addPrice(
                scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice
            ) = addPrice(Price.ofScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofCumulativeGroupedBulk(cumulativeGroupedBulk)`.
             */
            fun addPrice(cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice) =
                addPrice(Price.ofCumulativeGroupedBulk(cumulativeGroupedBulk))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofTieredPackageWithMinimum(tieredPackageWithMinimum)`.
             */
            fun addPrice(tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice) =
                addPrice(Price.ofTieredPackageWithMinimum(tieredPackageWithMinimum))

            /**
             * Alias for calling [addPrice] with
             * `Price.ofMatrixWithAllocation(matrixWithAllocation)`.
             */
            fun addPrice(matrixWithAllocation: NewPlanMatrixWithAllocationPrice) =
                addPrice(Price.ofMatrixWithAllocation(matrixWithAllocation))

            /** Alias for calling [addPrice] with `Price.ofGroupedTiered(groupedTiered)`. */
            fun addPrice(groupedTiered: NewPlanGroupedTieredPrice) =
                addPrice(Price.ofGroupedTiered(groupedTiered))

            /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
            fun defaultInvoiceMemo(defaultInvoiceMemo: String?) =
                defaultInvoiceMemo(JsonField.ofNullable(defaultInvoiceMemo))

            /**
             * Alias for calling [Builder.defaultInvoiceMemo] with
             * `defaultInvoiceMemo.orElse(null)`.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) =
                defaultInvoiceMemo(defaultInvoiceMemo.getOrNull())

            /**
             * Sets [Builder.defaultInvoiceMemo] to an arbitrary JSON value.
             *
             * You should usually call [Builder.defaultInvoiceMemo] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: JsonField<String>) = apply {
                this.defaultInvoiceMemo = defaultInvoiceMemo
            }

            fun externalPlanId(externalPlanId: String?) =
                externalPlanId(JsonField.ofNullable(externalPlanId))

            /** Alias for calling [Builder.externalPlanId] with `externalPlanId.orElse(null)`. */
            fun externalPlanId(externalPlanId: Optional<String>) =
                externalPlanId(externalPlanId.getOrNull())

            /**
             * Sets [Builder.externalPlanId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.externalPlanId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun externalPlanId(externalPlanId: JsonField<String>) = apply {
                this.externalPlanId = externalPlanId
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed by
             * setting the value to `null`, and the entire metadata mapping can be cleared by
             * setting `metadata` to `null`.
             */
            fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

            /** Alias for calling [Builder.metadata] with `metadata.orElse(null)`. */
            fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

            /**
             * Sets [Builder.metadata] to an arbitrary JSON value.
             *
             * You should usually call [Builder.metadata] with a well-typed [Metadata] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0.
             */
            fun netTerms(netTerms: Long?) = netTerms(JsonField.ofNullable(netTerms))

            /**
             * Alias for [Builder.netTerms].
             *
             * This unboxed primitive overload exists for backwards compatibility.
             */
            fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

            /** Alias for calling [Builder.netTerms] with `netTerms.orElse(null)`. */
            fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.getOrNull())

            /**
             * Sets [Builder.netTerms] to an arbitrary JSON value.
             *
             * You should usually call [Builder.netTerms] with a well-typed [Long] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun netTerms(netTerms: JsonField<Long>) = apply { this.netTerms = netTerms }

            /**
             * The status of the plan to create (either active or draft). If not specified, this
             * defaults to active.
             */
            fun status(status: Status) = status(JsonField.of(status))

            /**
             * Sets [Builder.status] to an arbitrary JSON value.
             *
             * You should usually call [Builder.status] with a well-typed [Status] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun status(status: JsonField<Status>) = apply { this.status = status }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Body].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .currency()
             * .name()
             * .prices()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Body =
                Body(
                    checkRequired("currency", currency),
                    checkRequired("name", name),
                    checkRequired("prices", prices).map { it.toImmutable() },
                    defaultInvoiceMemo,
                    externalPlanId,
                    metadata,
                    netTerms,
                    status,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            currency()
            name()
            prices().forEach { it.validate() }
            defaultInvoiceMemo()
            externalPlanId()
            metadata().ifPresent { it.validate() }
            netTerms()
            status().ifPresent { it.validate() }
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (currency.asKnown().isPresent) 1 else 0) +
                (if (name.asKnown().isPresent) 1 else 0) +
                (prices.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0) +
                (if (defaultInvoiceMemo.asKnown().isPresent) 1 else 0) +
                (if (externalPlanId.asKnown().isPresent) 1 else 0) +
                (metadata.asKnown().getOrNull()?.validity() ?: 0) +
                (if (netTerms.asKnown().isPresent) 1 else 0) +
                (status.asKnown().getOrNull()?.validity() ?: 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Body && currency == other.currency && name == other.name && prices == other.prices && defaultInvoiceMemo == other.defaultInvoiceMemo && externalPlanId == other.externalPlanId && metadata == other.metadata && netTerms == other.netTerms && status == other.status && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(currency, name, prices, defaultInvoiceMemo, externalPlanId, metadata, netTerms, status, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{currency=$currency, name=$name, prices=$prices, defaultInvoiceMemo=$defaultInvoiceMemo, externalPlanId=$externalPlanId, metadata=$metadata, netTerms=$netTerms, status=$status, additionalProperties=$additionalProperties}"
    }

    @JsonDeserialize(using = Price.Deserializer::class)
    @JsonSerialize(using = Price.Serializer::class)
    class Price
    private constructor(
        private val unit: NewPlanUnitPrice? = null,
        private val package_: NewPlanPackagePrice? = null,
        private val matrix: NewPlanMatrixPrice? = null,
        private val tiered: NewPlanTieredPrice? = null,
        private val tieredBps: NewPlanTieredBpsPrice? = null,
        private val bps: NewPlanBpsPrice? = null,
        private val bulkBps: NewPlanBulkBpsPrice? = null,
        private val bulk: NewPlanBulkPrice? = null,
        private val thresholdTotalAmount: NewPlanThresholdTotalAmountPrice? = null,
        private val tieredPackage: NewPlanTieredPackagePrice? = null,
        private val tieredWithMinimum: NewPlanTieredWithMinimumPrice? = null,
        private val unitWithPercent: NewPlanUnitWithPercentPrice? = null,
        private val packageWithAllocation: NewPlanPackageWithAllocationPrice? = null,
        private val tieredWithProration: NewPlanTierWithProrationPrice? = null,
        private val unitWithProration: NewPlanUnitWithProrationPrice? = null,
        private val groupedAllocation: NewPlanGroupedAllocationPrice? = null,
        private val groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice? = null,
        private val groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice? = null,
        private val matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice? = null,
        private val bulkWithProration: NewPlanBulkWithProrationPrice? = null,
        private val groupedTieredPackage: NewPlanGroupedTieredPackagePrice? = null,
        private val maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice? = null,
        private val scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice? =
            null,
        private val scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice? =
            null,
        private val cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice? = null,
        private val tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice? = null,
        private val matrixWithAllocation: NewPlanMatrixWithAllocationPrice? = null,
        private val groupedTiered: NewPlanGroupedTieredPrice? = null,
        private val _json: JsonValue? = null,
    ) {

        fun unit(): Optional<NewPlanUnitPrice> = Optional.ofNullable(unit)

        fun package_(): Optional<NewPlanPackagePrice> = Optional.ofNullable(package_)

        fun matrix(): Optional<NewPlanMatrixPrice> = Optional.ofNullable(matrix)

        fun tiered(): Optional<NewPlanTieredPrice> = Optional.ofNullable(tiered)

        fun tieredBps(): Optional<NewPlanTieredBpsPrice> = Optional.ofNullable(tieredBps)

        fun bps(): Optional<NewPlanBpsPrice> = Optional.ofNullable(bps)

        fun bulkBps(): Optional<NewPlanBulkBpsPrice> = Optional.ofNullable(bulkBps)

        fun bulk(): Optional<NewPlanBulkPrice> = Optional.ofNullable(bulk)

        fun thresholdTotalAmount(): Optional<NewPlanThresholdTotalAmountPrice> =
            Optional.ofNullable(thresholdTotalAmount)

        fun tieredPackage(): Optional<NewPlanTieredPackagePrice> =
            Optional.ofNullable(tieredPackage)

        fun tieredWithMinimum(): Optional<NewPlanTieredWithMinimumPrice> =
            Optional.ofNullable(tieredWithMinimum)

        fun unitWithPercent(): Optional<NewPlanUnitWithPercentPrice> =
            Optional.ofNullable(unitWithPercent)

        fun packageWithAllocation(): Optional<NewPlanPackageWithAllocationPrice> =
            Optional.ofNullable(packageWithAllocation)

        fun tieredWithProration(): Optional<NewPlanTierWithProrationPrice> =
            Optional.ofNullable(tieredWithProration)

        fun unitWithProration(): Optional<NewPlanUnitWithProrationPrice> =
            Optional.ofNullable(unitWithProration)

        fun groupedAllocation(): Optional<NewPlanGroupedAllocationPrice> =
            Optional.ofNullable(groupedAllocation)

        fun groupedWithProratedMinimum(): Optional<NewPlanGroupedWithProratedMinimumPrice> =
            Optional.ofNullable(groupedWithProratedMinimum)

        fun groupedWithMeteredMinimum(): Optional<NewPlanGroupedWithMeteredMinimumPrice> =
            Optional.ofNullable(groupedWithMeteredMinimum)

        fun matrixWithDisplayName(): Optional<NewPlanMatrixWithDisplayNamePrice> =
            Optional.ofNullable(matrixWithDisplayName)

        fun bulkWithProration(): Optional<NewPlanBulkWithProrationPrice> =
            Optional.ofNullable(bulkWithProration)

        fun groupedTieredPackage(): Optional<NewPlanGroupedTieredPackagePrice> =
            Optional.ofNullable(groupedTieredPackage)

        fun maxGroupTieredPackage(): Optional<NewPlanMaxGroupTieredPackagePrice> =
            Optional.ofNullable(maxGroupTieredPackage)

        fun scalableMatrixWithUnitPricing(): Optional<NewPlanScalableMatrixWithUnitPricingPrice> =
            Optional.ofNullable(scalableMatrixWithUnitPricing)

        fun scalableMatrixWithTieredPricing():
            Optional<NewPlanScalableMatrixWithTieredPricingPrice> =
            Optional.ofNullable(scalableMatrixWithTieredPricing)

        fun cumulativeGroupedBulk(): Optional<NewPlanCumulativeGroupedBulkPrice> =
            Optional.ofNullable(cumulativeGroupedBulk)

        fun tieredPackageWithMinimum(): Optional<NewPlanTieredPackageWithMinimumPrice> =
            Optional.ofNullable(tieredPackageWithMinimum)

        fun matrixWithAllocation(): Optional<NewPlanMatrixWithAllocationPrice> =
            Optional.ofNullable(matrixWithAllocation)

        fun groupedTiered(): Optional<NewPlanGroupedTieredPrice> =
            Optional.ofNullable(groupedTiered)

        fun isUnit(): Boolean = unit != null

        fun isPackage(): Boolean = package_ != null

        fun isMatrix(): Boolean = matrix != null

        fun isTiered(): Boolean = tiered != null

        fun isTieredBps(): Boolean = tieredBps != null

        fun isBps(): Boolean = bps != null

        fun isBulkBps(): Boolean = bulkBps != null

        fun isBulk(): Boolean = bulk != null

        fun isThresholdTotalAmount(): Boolean = thresholdTotalAmount != null

        fun isTieredPackage(): Boolean = tieredPackage != null

        fun isTieredWithMinimum(): Boolean = tieredWithMinimum != null

        fun isUnitWithPercent(): Boolean = unitWithPercent != null

        fun isPackageWithAllocation(): Boolean = packageWithAllocation != null

        fun isTieredWithProration(): Boolean = tieredWithProration != null

        fun isUnitWithProration(): Boolean = unitWithProration != null

        fun isGroupedAllocation(): Boolean = groupedAllocation != null

        fun isGroupedWithProratedMinimum(): Boolean = groupedWithProratedMinimum != null

        fun isGroupedWithMeteredMinimum(): Boolean = groupedWithMeteredMinimum != null

        fun isMatrixWithDisplayName(): Boolean = matrixWithDisplayName != null

        fun isBulkWithProration(): Boolean = bulkWithProration != null

        fun isGroupedTieredPackage(): Boolean = groupedTieredPackage != null

        fun isMaxGroupTieredPackage(): Boolean = maxGroupTieredPackage != null

        fun isScalableMatrixWithUnitPricing(): Boolean = scalableMatrixWithUnitPricing != null

        fun isScalableMatrixWithTieredPricing(): Boolean = scalableMatrixWithTieredPricing != null

        fun isCumulativeGroupedBulk(): Boolean = cumulativeGroupedBulk != null

        fun isTieredPackageWithMinimum(): Boolean = tieredPackageWithMinimum != null

        fun isMatrixWithAllocation(): Boolean = matrixWithAllocation != null

        fun isGroupedTiered(): Boolean = groupedTiered != null

        fun asUnit(): NewPlanUnitPrice = unit.getOrThrow("unit")

        fun asPackage(): NewPlanPackagePrice = package_.getOrThrow("package_")

        fun asMatrix(): NewPlanMatrixPrice = matrix.getOrThrow("matrix")

        fun asTiered(): NewPlanTieredPrice = tiered.getOrThrow("tiered")

        fun asTieredBps(): NewPlanTieredBpsPrice = tieredBps.getOrThrow("tieredBps")

        fun asBps(): NewPlanBpsPrice = bps.getOrThrow("bps")

        fun asBulkBps(): NewPlanBulkBpsPrice = bulkBps.getOrThrow("bulkBps")

        fun asBulk(): NewPlanBulkPrice = bulk.getOrThrow("bulk")

        fun asThresholdTotalAmount(): NewPlanThresholdTotalAmountPrice =
            thresholdTotalAmount.getOrThrow("thresholdTotalAmount")

        fun asTieredPackage(): NewPlanTieredPackagePrice = tieredPackage.getOrThrow("tieredPackage")

        fun asTieredWithMinimum(): NewPlanTieredWithMinimumPrice =
            tieredWithMinimum.getOrThrow("tieredWithMinimum")

        fun asUnitWithPercent(): NewPlanUnitWithPercentPrice =
            unitWithPercent.getOrThrow("unitWithPercent")

        fun asPackageWithAllocation(): NewPlanPackageWithAllocationPrice =
            packageWithAllocation.getOrThrow("packageWithAllocation")

        fun asTieredWithProration(): NewPlanTierWithProrationPrice =
            tieredWithProration.getOrThrow("tieredWithProration")

        fun asUnitWithProration(): NewPlanUnitWithProrationPrice =
            unitWithProration.getOrThrow("unitWithProration")

        fun asGroupedAllocation(): NewPlanGroupedAllocationPrice =
            groupedAllocation.getOrThrow("groupedAllocation")

        fun asGroupedWithProratedMinimum(): NewPlanGroupedWithProratedMinimumPrice =
            groupedWithProratedMinimum.getOrThrow("groupedWithProratedMinimum")

        fun asGroupedWithMeteredMinimum(): NewPlanGroupedWithMeteredMinimumPrice =
            groupedWithMeteredMinimum.getOrThrow("groupedWithMeteredMinimum")

        fun asMatrixWithDisplayName(): NewPlanMatrixWithDisplayNamePrice =
            matrixWithDisplayName.getOrThrow("matrixWithDisplayName")

        fun asBulkWithProration(): NewPlanBulkWithProrationPrice =
            bulkWithProration.getOrThrow("bulkWithProration")

        fun asGroupedTieredPackage(): NewPlanGroupedTieredPackagePrice =
            groupedTieredPackage.getOrThrow("groupedTieredPackage")

        fun asMaxGroupTieredPackage(): NewPlanMaxGroupTieredPackagePrice =
            maxGroupTieredPackage.getOrThrow("maxGroupTieredPackage")

        fun asScalableMatrixWithUnitPricing(): NewPlanScalableMatrixWithUnitPricingPrice =
            scalableMatrixWithUnitPricing.getOrThrow("scalableMatrixWithUnitPricing")

        fun asScalableMatrixWithTieredPricing(): NewPlanScalableMatrixWithTieredPricingPrice =
            scalableMatrixWithTieredPricing.getOrThrow("scalableMatrixWithTieredPricing")

        fun asCumulativeGroupedBulk(): NewPlanCumulativeGroupedBulkPrice =
            cumulativeGroupedBulk.getOrThrow("cumulativeGroupedBulk")

        fun asTieredPackageWithMinimum(): NewPlanTieredPackageWithMinimumPrice =
            tieredPackageWithMinimum.getOrThrow("tieredPackageWithMinimum")

        fun asMatrixWithAllocation(): NewPlanMatrixWithAllocationPrice =
            matrixWithAllocation.getOrThrow("matrixWithAllocation")

        fun asGroupedTiered(): NewPlanGroupedTieredPrice = groupedTiered.getOrThrow("groupedTiered")

        fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

        fun <T> accept(visitor: Visitor<T>): T =
            when {
                unit != null -> visitor.visitUnit(unit)
                package_ != null -> visitor.visitPackage(package_)
                matrix != null -> visitor.visitMatrix(matrix)
                tiered != null -> visitor.visitTiered(tiered)
                tieredBps != null -> visitor.visitTieredBps(tieredBps)
                bps != null -> visitor.visitBps(bps)
                bulkBps != null -> visitor.visitBulkBps(bulkBps)
                bulk != null -> visitor.visitBulk(bulk)
                thresholdTotalAmount != null ->
                    visitor.visitThresholdTotalAmount(thresholdTotalAmount)
                tieredPackage != null -> visitor.visitTieredPackage(tieredPackage)
                tieredWithMinimum != null -> visitor.visitTieredWithMinimum(tieredWithMinimum)
                unitWithPercent != null -> visitor.visitUnitWithPercent(unitWithPercent)
                packageWithAllocation != null ->
                    visitor.visitPackageWithAllocation(packageWithAllocation)
                tieredWithProration != null -> visitor.visitTieredWithProration(tieredWithProration)
                unitWithProration != null -> visitor.visitUnitWithProration(unitWithProration)
                groupedAllocation != null -> visitor.visitGroupedAllocation(groupedAllocation)
                groupedWithProratedMinimum != null ->
                    visitor.visitGroupedWithProratedMinimum(groupedWithProratedMinimum)
                groupedWithMeteredMinimum != null ->
                    visitor.visitGroupedWithMeteredMinimum(groupedWithMeteredMinimum)
                matrixWithDisplayName != null ->
                    visitor.visitMatrixWithDisplayName(matrixWithDisplayName)
                bulkWithProration != null -> visitor.visitBulkWithProration(bulkWithProration)
                groupedTieredPackage != null ->
                    visitor.visitGroupedTieredPackage(groupedTieredPackage)
                maxGroupTieredPackage != null ->
                    visitor.visitMaxGroupTieredPackage(maxGroupTieredPackage)
                scalableMatrixWithUnitPricing != null ->
                    visitor.visitScalableMatrixWithUnitPricing(scalableMatrixWithUnitPricing)
                scalableMatrixWithTieredPricing != null ->
                    visitor.visitScalableMatrixWithTieredPricing(scalableMatrixWithTieredPricing)
                cumulativeGroupedBulk != null ->
                    visitor.visitCumulativeGroupedBulk(cumulativeGroupedBulk)
                tieredPackageWithMinimum != null ->
                    visitor.visitTieredPackageWithMinimum(tieredPackageWithMinimum)
                matrixWithAllocation != null ->
                    visitor.visitMatrixWithAllocation(matrixWithAllocation)
                groupedTiered != null -> visitor.visitGroupedTiered(groupedTiered)
                else -> visitor.unknown(_json)
            }

        private var validated: Boolean = false

        fun validate(): Price = apply {
            if (validated) {
                return@apply
            }

            accept(
                object : Visitor<KUnit> {
                    override fun visitUnit(unit: NewPlanUnitPrice) {
                        unit.validate()
                    }

                    override fun visitPackage(package_: NewPlanPackagePrice) {
                        package_.validate()
                    }

                    override fun visitMatrix(matrix: NewPlanMatrixPrice) {
                        matrix.validate()
                    }

                    override fun visitTiered(tiered: NewPlanTieredPrice) {
                        tiered.validate()
                    }

                    override fun visitTieredBps(tieredBps: NewPlanTieredBpsPrice) {
                        tieredBps.validate()
                    }

                    override fun visitBps(bps: NewPlanBpsPrice) {
                        bps.validate()
                    }

                    override fun visitBulkBps(bulkBps: NewPlanBulkBpsPrice) {
                        bulkBps.validate()
                    }

                    override fun visitBulk(bulk: NewPlanBulkPrice) {
                        bulk.validate()
                    }

                    override fun visitThresholdTotalAmount(
                        thresholdTotalAmount: NewPlanThresholdTotalAmountPrice
                    ) {
                        thresholdTotalAmount.validate()
                    }

                    override fun visitTieredPackage(tieredPackage: NewPlanTieredPackagePrice) {
                        tieredPackage.validate()
                    }

                    override fun visitTieredWithMinimum(
                        tieredWithMinimum: NewPlanTieredWithMinimumPrice
                    ) {
                        tieredWithMinimum.validate()
                    }

                    override fun visitUnitWithPercent(
                        unitWithPercent: NewPlanUnitWithPercentPrice
                    ) {
                        unitWithPercent.validate()
                    }

                    override fun visitPackageWithAllocation(
                        packageWithAllocation: NewPlanPackageWithAllocationPrice
                    ) {
                        packageWithAllocation.validate()
                    }

                    override fun visitTieredWithProration(
                        tieredWithProration: NewPlanTierWithProrationPrice
                    ) {
                        tieredWithProration.validate()
                    }

                    override fun visitUnitWithProration(
                        unitWithProration: NewPlanUnitWithProrationPrice
                    ) {
                        unitWithProration.validate()
                    }

                    override fun visitGroupedAllocation(
                        groupedAllocation: NewPlanGroupedAllocationPrice
                    ) {
                        groupedAllocation.validate()
                    }

                    override fun visitGroupedWithProratedMinimum(
                        groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice
                    ) {
                        groupedWithProratedMinimum.validate()
                    }

                    override fun visitGroupedWithMeteredMinimum(
                        groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice
                    ) {
                        groupedWithMeteredMinimum.validate()
                    }

                    override fun visitMatrixWithDisplayName(
                        matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice
                    ) {
                        matrixWithDisplayName.validate()
                    }

                    override fun visitBulkWithProration(
                        bulkWithProration: NewPlanBulkWithProrationPrice
                    ) {
                        bulkWithProration.validate()
                    }

                    override fun visitGroupedTieredPackage(
                        groupedTieredPackage: NewPlanGroupedTieredPackagePrice
                    ) {
                        groupedTieredPackage.validate()
                    }

                    override fun visitMaxGroupTieredPackage(
                        maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice
                    ) {
                        maxGroupTieredPackage.validate()
                    }

                    override fun visitScalableMatrixWithUnitPricing(
                        scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice
                    ) {
                        scalableMatrixWithUnitPricing.validate()
                    }

                    override fun visitScalableMatrixWithTieredPricing(
                        scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice
                    ) {
                        scalableMatrixWithTieredPricing.validate()
                    }

                    override fun visitCumulativeGroupedBulk(
                        cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice
                    ) {
                        cumulativeGroupedBulk.validate()
                    }

                    override fun visitTieredPackageWithMinimum(
                        tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice
                    ) {
                        tieredPackageWithMinimum.validate()
                    }

                    override fun visitMatrixWithAllocation(
                        matrixWithAllocation: NewPlanMatrixWithAllocationPrice
                    ) {
                        matrixWithAllocation.validate()
                    }

                    override fun visitGroupedTiered(groupedTiered: NewPlanGroupedTieredPrice) {
                        groupedTiered.validate()
                    }
                }
            )
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            accept(
                object : Visitor<Int> {
                    override fun visitUnit(unit: NewPlanUnitPrice) = unit.validity()

                    override fun visitPackage(package_: NewPlanPackagePrice) = package_.validity()

                    override fun visitMatrix(matrix: NewPlanMatrixPrice) = matrix.validity()

                    override fun visitTiered(tiered: NewPlanTieredPrice) = tiered.validity()

                    override fun visitTieredBps(tieredBps: NewPlanTieredBpsPrice) =
                        tieredBps.validity()

                    override fun visitBps(bps: NewPlanBpsPrice) = bps.validity()

                    override fun visitBulkBps(bulkBps: NewPlanBulkBpsPrice) = bulkBps.validity()

                    override fun visitBulk(bulk: NewPlanBulkPrice) = bulk.validity()

                    override fun visitThresholdTotalAmount(
                        thresholdTotalAmount: NewPlanThresholdTotalAmountPrice
                    ) = thresholdTotalAmount.validity()

                    override fun visitTieredPackage(tieredPackage: NewPlanTieredPackagePrice) =
                        tieredPackage.validity()

                    override fun visitTieredWithMinimum(
                        tieredWithMinimum: NewPlanTieredWithMinimumPrice
                    ) = tieredWithMinimum.validity()

                    override fun visitUnitWithPercent(
                        unitWithPercent: NewPlanUnitWithPercentPrice
                    ) = unitWithPercent.validity()

                    override fun visitPackageWithAllocation(
                        packageWithAllocation: NewPlanPackageWithAllocationPrice
                    ) = packageWithAllocation.validity()

                    override fun visitTieredWithProration(
                        tieredWithProration: NewPlanTierWithProrationPrice
                    ) = tieredWithProration.validity()

                    override fun visitUnitWithProration(
                        unitWithProration: NewPlanUnitWithProrationPrice
                    ) = unitWithProration.validity()

                    override fun visitGroupedAllocation(
                        groupedAllocation: NewPlanGroupedAllocationPrice
                    ) = groupedAllocation.validity()

                    override fun visitGroupedWithProratedMinimum(
                        groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice
                    ) = groupedWithProratedMinimum.validity()

                    override fun visitGroupedWithMeteredMinimum(
                        groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice
                    ) = groupedWithMeteredMinimum.validity()

                    override fun visitMatrixWithDisplayName(
                        matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice
                    ) = matrixWithDisplayName.validity()

                    override fun visitBulkWithProration(
                        bulkWithProration: NewPlanBulkWithProrationPrice
                    ) = bulkWithProration.validity()

                    override fun visitGroupedTieredPackage(
                        groupedTieredPackage: NewPlanGroupedTieredPackagePrice
                    ) = groupedTieredPackage.validity()

                    override fun visitMaxGroupTieredPackage(
                        maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice
                    ) = maxGroupTieredPackage.validity()

                    override fun visitScalableMatrixWithUnitPricing(
                        scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice
                    ) = scalableMatrixWithUnitPricing.validity()

                    override fun visitScalableMatrixWithTieredPricing(
                        scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice
                    ) = scalableMatrixWithTieredPricing.validity()

                    override fun visitCumulativeGroupedBulk(
                        cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice
                    ) = cumulativeGroupedBulk.validity()

                    override fun visitTieredPackageWithMinimum(
                        tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice
                    ) = tieredPackageWithMinimum.validity()

                    override fun visitMatrixWithAllocation(
                        matrixWithAllocation: NewPlanMatrixWithAllocationPrice
                    ) = matrixWithAllocation.validity()

                    override fun visitGroupedTiered(groupedTiered: NewPlanGroupedTieredPrice) =
                        groupedTiered.validity()

                    override fun unknown(json: JsonValue?) = 0
                }
            )

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Price && unit == other.unit && package_ == other.package_ && matrix == other.matrix && tiered == other.tiered && tieredBps == other.tieredBps && bps == other.bps && bulkBps == other.bulkBps && bulk == other.bulk && thresholdTotalAmount == other.thresholdTotalAmount && tieredPackage == other.tieredPackage && tieredWithMinimum == other.tieredWithMinimum && unitWithPercent == other.unitWithPercent && packageWithAllocation == other.packageWithAllocation && tieredWithProration == other.tieredWithProration && unitWithProration == other.unitWithProration && groupedAllocation == other.groupedAllocation && groupedWithProratedMinimum == other.groupedWithProratedMinimum && groupedWithMeteredMinimum == other.groupedWithMeteredMinimum && matrixWithDisplayName == other.matrixWithDisplayName && bulkWithProration == other.bulkWithProration && groupedTieredPackage == other.groupedTieredPackage && maxGroupTieredPackage == other.maxGroupTieredPackage && scalableMatrixWithUnitPricing == other.scalableMatrixWithUnitPricing && scalableMatrixWithTieredPricing == other.scalableMatrixWithTieredPricing && cumulativeGroupedBulk == other.cumulativeGroupedBulk && tieredPackageWithMinimum == other.tieredPackageWithMinimum && matrixWithAllocation == other.matrixWithAllocation && groupedTiered == other.groupedTiered /* spotless:on */
        }

        override fun hashCode(): Int = /* spotless:off */ Objects.hash(unit, package_, matrix, tiered, tieredBps, bps, bulkBps, bulk, thresholdTotalAmount, tieredPackage, tieredWithMinimum, unitWithPercent, packageWithAllocation, tieredWithProration, unitWithProration, groupedAllocation, groupedWithProratedMinimum, groupedWithMeteredMinimum, matrixWithDisplayName, bulkWithProration, groupedTieredPackage, maxGroupTieredPackage, scalableMatrixWithUnitPricing, scalableMatrixWithTieredPricing, cumulativeGroupedBulk, tieredPackageWithMinimum, matrixWithAllocation, groupedTiered) /* spotless:on */

        override fun toString(): String =
            when {
                unit != null -> "Price{unit=$unit}"
                package_ != null -> "Price{package_=$package_}"
                matrix != null -> "Price{matrix=$matrix}"
                tiered != null -> "Price{tiered=$tiered}"
                tieredBps != null -> "Price{tieredBps=$tieredBps}"
                bps != null -> "Price{bps=$bps}"
                bulkBps != null -> "Price{bulkBps=$bulkBps}"
                bulk != null -> "Price{bulk=$bulk}"
                thresholdTotalAmount != null -> "Price{thresholdTotalAmount=$thresholdTotalAmount}"
                tieredPackage != null -> "Price{tieredPackage=$tieredPackage}"
                tieredWithMinimum != null -> "Price{tieredWithMinimum=$tieredWithMinimum}"
                unitWithPercent != null -> "Price{unitWithPercent=$unitWithPercent}"
                packageWithAllocation != null ->
                    "Price{packageWithAllocation=$packageWithAllocation}"
                tieredWithProration != null -> "Price{tieredWithProration=$tieredWithProration}"
                unitWithProration != null -> "Price{unitWithProration=$unitWithProration}"
                groupedAllocation != null -> "Price{groupedAllocation=$groupedAllocation}"
                groupedWithProratedMinimum != null ->
                    "Price{groupedWithProratedMinimum=$groupedWithProratedMinimum}"
                groupedWithMeteredMinimum != null ->
                    "Price{groupedWithMeteredMinimum=$groupedWithMeteredMinimum}"
                matrixWithDisplayName != null ->
                    "Price{matrixWithDisplayName=$matrixWithDisplayName}"
                bulkWithProration != null -> "Price{bulkWithProration=$bulkWithProration}"
                groupedTieredPackage != null -> "Price{groupedTieredPackage=$groupedTieredPackage}"
                maxGroupTieredPackage != null ->
                    "Price{maxGroupTieredPackage=$maxGroupTieredPackage}"
                scalableMatrixWithUnitPricing != null ->
                    "Price{scalableMatrixWithUnitPricing=$scalableMatrixWithUnitPricing}"
                scalableMatrixWithTieredPricing != null ->
                    "Price{scalableMatrixWithTieredPricing=$scalableMatrixWithTieredPricing}"
                cumulativeGroupedBulk != null ->
                    "Price{cumulativeGroupedBulk=$cumulativeGroupedBulk}"
                tieredPackageWithMinimum != null ->
                    "Price{tieredPackageWithMinimum=$tieredPackageWithMinimum}"
                matrixWithAllocation != null -> "Price{matrixWithAllocation=$matrixWithAllocation}"
                groupedTiered != null -> "Price{groupedTiered=$groupedTiered}"
                _json != null -> "Price{_unknown=$_json}"
                else -> throw IllegalStateException("Invalid Price")
            }

        companion object {

            @JvmStatic fun ofUnit(unit: NewPlanUnitPrice) = Price(unit = unit)

            @JvmStatic fun ofPackage(package_: NewPlanPackagePrice) = Price(package_ = package_)

            @JvmStatic fun ofMatrix(matrix: NewPlanMatrixPrice) = Price(matrix = matrix)

            @JvmStatic fun ofTiered(tiered: NewPlanTieredPrice) = Price(tiered = tiered)

            @JvmStatic
            fun ofTieredBps(tieredBps: NewPlanTieredBpsPrice) = Price(tieredBps = tieredBps)

            @JvmStatic fun ofBps(bps: NewPlanBpsPrice) = Price(bps = bps)

            @JvmStatic fun ofBulkBps(bulkBps: NewPlanBulkBpsPrice) = Price(bulkBps = bulkBps)

            @JvmStatic fun ofBulk(bulk: NewPlanBulkPrice) = Price(bulk = bulk)

            @JvmStatic
            fun ofThresholdTotalAmount(thresholdTotalAmount: NewPlanThresholdTotalAmountPrice) =
                Price(thresholdTotalAmount = thresholdTotalAmount)

            @JvmStatic
            fun ofTieredPackage(tieredPackage: NewPlanTieredPackagePrice) =
                Price(tieredPackage = tieredPackage)

            @JvmStatic
            fun ofTieredWithMinimum(tieredWithMinimum: NewPlanTieredWithMinimumPrice) =
                Price(tieredWithMinimum = tieredWithMinimum)

            @JvmStatic
            fun ofUnitWithPercent(unitWithPercent: NewPlanUnitWithPercentPrice) =
                Price(unitWithPercent = unitWithPercent)

            @JvmStatic
            fun ofPackageWithAllocation(packageWithAllocation: NewPlanPackageWithAllocationPrice) =
                Price(packageWithAllocation = packageWithAllocation)

            @JvmStatic
            fun ofTieredWithProration(tieredWithProration: NewPlanTierWithProrationPrice) =
                Price(tieredWithProration = tieredWithProration)

            @JvmStatic
            fun ofUnitWithProration(unitWithProration: NewPlanUnitWithProrationPrice) =
                Price(unitWithProration = unitWithProration)

            @JvmStatic
            fun ofGroupedAllocation(groupedAllocation: NewPlanGroupedAllocationPrice) =
                Price(groupedAllocation = groupedAllocation)

            @JvmStatic
            fun ofGroupedWithProratedMinimum(
                groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice
            ) = Price(groupedWithProratedMinimum = groupedWithProratedMinimum)

            @JvmStatic
            fun ofGroupedWithMeteredMinimum(
                groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice
            ) = Price(groupedWithMeteredMinimum = groupedWithMeteredMinimum)

            @JvmStatic
            fun ofMatrixWithDisplayName(matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice) =
                Price(matrixWithDisplayName = matrixWithDisplayName)

            @JvmStatic
            fun ofBulkWithProration(bulkWithProration: NewPlanBulkWithProrationPrice) =
                Price(bulkWithProration = bulkWithProration)

            @JvmStatic
            fun ofGroupedTieredPackage(groupedTieredPackage: NewPlanGroupedTieredPackagePrice) =
                Price(groupedTieredPackage = groupedTieredPackage)

            @JvmStatic
            fun ofMaxGroupTieredPackage(maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice) =
                Price(maxGroupTieredPackage = maxGroupTieredPackage)

            @JvmStatic
            fun ofScalableMatrixWithUnitPricing(
                scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice
            ) = Price(scalableMatrixWithUnitPricing = scalableMatrixWithUnitPricing)

            @JvmStatic
            fun ofScalableMatrixWithTieredPricing(
                scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice
            ) = Price(scalableMatrixWithTieredPricing = scalableMatrixWithTieredPricing)

            @JvmStatic
            fun ofCumulativeGroupedBulk(cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice) =
                Price(cumulativeGroupedBulk = cumulativeGroupedBulk)

            @JvmStatic
            fun ofTieredPackageWithMinimum(
                tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice
            ) = Price(tieredPackageWithMinimum = tieredPackageWithMinimum)

            @JvmStatic
            fun ofMatrixWithAllocation(matrixWithAllocation: NewPlanMatrixWithAllocationPrice) =
                Price(matrixWithAllocation = matrixWithAllocation)

            @JvmStatic
            fun ofGroupedTiered(groupedTiered: NewPlanGroupedTieredPrice) =
                Price(groupedTiered = groupedTiered)
        }

        /** An interface that defines how to map each variant of [Price] to a value of type [T]. */
        interface Visitor<out T> {

            fun visitUnit(unit: NewPlanUnitPrice): T

            fun visitPackage(package_: NewPlanPackagePrice): T

            fun visitMatrix(matrix: NewPlanMatrixPrice): T

            fun visitTiered(tiered: NewPlanTieredPrice): T

            fun visitTieredBps(tieredBps: NewPlanTieredBpsPrice): T

            fun visitBps(bps: NewPlanBpsPrice): T

            fun visitBulkBps(bulkBps: NewPlanBulkBpsPrice): T

            fun visitBulk(bulk: NewPlanBulkPrice): T

            fun visitThresholdTotalAmount(thresholdTotalAmount: NewPlanThresholdTotalAmountPrice): T

            fun visitTieredPackage(tieredPackage: NewPlanTieredPackagePrice): T

            fun visitTieredWithMinimum(tieredWithMinimum: NewPlanTieredWithMinimumPrice): T

            fun visitUnitWithPercent(unitWithPercent: NewPlanUnitWithPercentPrice): T

            fun visitPackageWithAllocation(
                packageWithAllocation: NewPlanPackageWithAllocationPrice
            ): T

            fun visitTieredWithProration(tieredWithProration: NewPlanTierWithProrationPrice): T

            fun visitUnitWithProration(unitWithProration: NewPlanUnitWithProrationPrice): T

            fun visitGroupedAllocation(groupedAllocation: NewPlanGroupedAllocationPrice): T

            fun visitGroupedWithProratedMinimum(
                groupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice
            ): T

            fun visitGroupedWithMeteredMinimum(
                groupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice
            ): T

            fun visitMatrixWithDisplayName(
                matrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice
            ): T

            fun visitBulkWithProration(bulkWithProration: NewPlanBulkWithProrationPrice): T

            fun visitGroupedTieredPackage(groupedTieredPackage: NewPlanGroupedTieredPackagePrice): T

            fun visitMaxGroupTieredPackage(
                maxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice
            ): T

            fun visitScalableMatrixWithUnitPricing(
                scalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice
            ): T

            fun visitScalableMatrixWithTieredPricing(
                scalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice
            ): T

            fun visitCumulativeGroupedBulk(
                cumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice
            ): T

            fun visitTieredPackageWithMinimum(
                tieredPackageWithMinimum: NewPlanTieredPackageWithMinimumPrice
            ): T

            fun visitMatrixWithAllocation(matrixWithAllocation: NewPlanMatrixWithAllocationPrice): T

            fun visitGroupedTiered(groupedTiered: NewPlanGroupedTieredPrice): T

            /**
             * Maps an unknown variant of [Price] to a value of type [T].
             *
             * An instance of [Price] can contain an unknown variant if it was deserialized from
             * data that doesn't match any known variant. For example, if the SDK is on an older
             * version than the API, then the API may respond with new variants that the SDK is
             * unaware of.
             *
             * @throws OrbInvalidDataException in the default implementation.
             */
            fun unknown(json: JsonValue?): T {
                throw OrbInvalidDataException("Unknown Price: $json")
            }
        }

        internal class Deserializer : BaseDeserializer<Price>(Price::class) {

            override fun ObjectCodec.deserialize(node: JsonNode): Price {
                val json = JsonValue.fromJsonNode(node)
                val modelType =
                    json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                when (modelType) {
                    "unit" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanUnitPrice>())?.let {
                            Price(unit = it, _json = json)
                        } ?: Price(_json = json)
                    }
                    "package" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanPackagePrice>())?.let {
                            Price(package_ = it, _json = json)
                        } ?: Price(_json = json)
                    }
                    "matrix" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanMatrixPrice>())?.let {
                            Price(matrix = it, _json = json)
                        } ?: Price(_json = json)
                    }
                    "tiered" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanTieredPrice>())?.let {
                            Price(tiered = it, _json = json)
                        } ?: Price(_json = json)
                    }
                    "tiered_bps" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanTieredBpsPrice>())?.let {
                            Price(tieredBps = it, _json = json)
                        } ?: Price(_json = json)
                    }
                    "bps" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanBpsPrice>())?.let {
                            Price(bps = it, _json = json)
                        } ?: Price(_json = json)
                    }
                    "bulk_bps" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanBulkBpsPrice>())?.let {
                            Price(bulkBps = it, _json = json)
                        } ?: Price(_json = json)
                    }
                    "bulk" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanBulkPrice>())?.let {
                            Price(bulk = it, _json = json)
                        } ?: Price(_json = json)
                    }
                    "threshold_total_amount" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanThresholdTotalAmountPrice>(),
                            )
                            ?.let { Price(thresholdTotalAmount = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "tiered_package" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanTieredPackagePrice>())
                            ?.let { Price(tieredPackage = it, _json = json) } ?: Price(_json = json)
                    }
                    "tiered_with_minimum" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanTieredWithMinimumPrice>())
                            ?.let { Price(tieredWithMinimum = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "unit_with_percent" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanUnitWithPercentPrice>())
                            ?.let { Price(unitWithPercent = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "package_with_allocation" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanPackageWithAllocationPrice>(),
                            )
                            ?.let { Price(packageWithAllocation = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "tiered_with_proration" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanTierWithProrationPrice>())
                            ?.let { Price(tieredWithProration = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "unit_with_proration" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanUnitWithProrationPrice>())
                            ?.let { Price(unitWithProration = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "grouped_allocation" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanGroupedAllocationPrice>())
                            ?.let { Price(groupedAllocation = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "grouped_with_prorated_minimum" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanGroupedWithProratedMinimumPrice>(),
                            )
                            ?.let { Price(groupedWithProratedMinimum = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "grouped_with_metered_minimum" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanGroupedWithMeteredMinimumPrice>(),
                            )
                            ?.let { Price(groupedWithMeteredMinimum = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "matrix_with_display_name" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanMatrixWithDisplayNamePrice>(),
                            )
                            ?.let { Price(matrixWithDisplayName = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "bulk_with_proration" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanBulkWithProrationPrice>())
                            ?.let { Price(bulkWithProration = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "grouped_tiered_package" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanGroupedTieredPackagePrice>(),
                            )
                            ?.let { Price(groupedTieredPackage = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "max_group_tiered_package" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanMaxGroupTieredPackagePrice>(),
                            )
                            ?.let { Price(maxGroupTieredPackage = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "scalable_matrix_with_unit_pricing" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanScalableMatrixWithUnitPricingPrice>(),
                            )
                            ?.let { Price(scalableMatrixWithUnitPricing = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "scalable_matrix_with_tiered_pricing" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanScalableMatrixWithTieredPricingPrice>(),
                            )
                            ?.let { Price(scalableMatrixWithTieredPricing = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "cumulative_grouped_bulk" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanCumulativeGroupedBulkPrice>(),
                            )
                            ?.let { Price(cumulativeGroupedBulk = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "tiered_package_with_minimum" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanTieredPackageWithMinimumPrice>(),
                            )
                            ?.let { Price(tieredPackageWithMinimum = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "matrix_with_allocation" -> {
                        return tryDeserialize(
                                node,
                                jacksonTypeRef<NewPlanMatrixWithAllocationPrice>(),
                            )
                            ?.let { Price(matrixWithAllocation = it, _json = json) }
                            ?: Price(_json = json)
                    }
                    "grouped_tiered" -> {
                        return tryDeserialize(node, jacksonTypeRef<NewPlanGroupedTieredPrice>())
                            ?.let { Price(groupedTiered = it, _json = json) } ?: Price(_json = json)
                    }
                }

                return Price(_json = json)
            }
        }

        internal class Serializer : BaseSerializer<Price>(Price::class) {

            override fun serialize(
                value: Price,
                generator: JsonGenerator,
                provider: SerializerProvider,
            ) {
                when {
                    value.unit != null -> generator.writeObject(value.unit)
                    value.package_ != null -> generator.writeObject(value.package_)
                    value.matrix != null -> generator.writeObject(value.matrix)
                    value.tiered != null -> generator.writeObject(value.tiered)
                    value.tieredBps != null -> generator.writeObject(value.tieredBps)
                    value.bps != null -> generator.writeObject(value.bps)
                    value.bulkBps != null -> generator.writeObject(value.bulkBps)
                    value.bulk != null -> generator.writeObject(value.bulk)
                    value.thresholdTotalAmount != null ->
                        generator.writeObject(value.thresholdTotalAmount)
                    value.tieredPackage != null -> generator.writeObject(value.tieredPackage)
                    value.tieredWithMinimum != null ->
                        generator.writeObject(value.tieredWithMinimum)
                    value.unitWithPercent != null -> generator.writeObject(value.unitWithPercent)
                    value.packageWithAllocation != null ->
                        generator.writeObject(value.packageWithAllocation)
                    value.tieredWithProration != null ->
                        generator.writeObject(value.tieredWithProration)
                    value.unitWithProration != null ->
                        generator.writeObject(value.unitWithProration)
                    value.groupedAllocation != null ->
                        generator.writeObject(value.groupedAllocation)
                    value.groupedWithProratedMinimum != null ->
                        generator.writeObject(value.groupedWithProratedMinimum)
                    value.groupedWithMeteredMinimum != null ->
                        generator.writeObject(value.groupedWithMeteredMinimum)
                    value.matrixWithDisplayName != null ->
                        generator.writeObject(value.matrixWithDisplayName)
                    value.bulkWithProration != null ->
                        generator.writeObject(value.bulkWithProration)
                    value.groupedTieredPackage != null ->
                        generator.writeObject(value.groupedTieredPackage)
                    value.maxGroupTieredPackage != null ->
                        generator.writeObject(value.maxGroupTieredPackage)
                    value.scalableMatrixWithUnitPricing != null ->
                        generator.writeObject(value.scalableMatrixWithUnitPricing)
                    value.scalableMatrixWithTieredPricing != null ->
                        generator.writeObject(value.scalableMatrixWithTieredPricing)
                    value.cumulativeGroupedBulk != null ->
                        generator.writeObject(value.cumulativeGroupedBulk)
                    value.tieredPackageWithMinimum != null ->
                        generator.writeObject(value.tieredPackageWithMinimum)
                    value.matrixWithAllocation != null ->
                        generator.writeObject(value.matrixWithAllocation)
                    value.groupedTiered != null -> generator.writeObject(value.groupedTiered)
                    value._json != null -> generator.writeObject(value._json)
                    else -> throw IllegalStateException("Invalid Price")
                }
            }
        }
    }

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed by setting
     * the value to `null`, and the entire metadata mapping can be cleared by setting `metadata` to
     * `null`.
     */
    class Metadata
    @JsonCreator
    private constructor(
        @com.fasterxml.jackson.annotation.JsonValue
        private val additionalProperties: Map<String, JsonValue>
    ) {

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [Metadata]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Metadata]. */
        class Builder internal constructor() {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(metadata: Metadata) = apply {
                additionalProperties = metadata.additionalProperties.toMutableMap()
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Metadata].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             */
            fun build(): Metadata = Metadata(additionalProperties.toImmutable())
        }

        private var validated: Boolean = false

        fun validate(): Metadata = apply {
            if (validated) {
                return@apply
            }

            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            additionalProperties.count { (_, value) -> !value.isNull() && !value.isMissing() }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
    }

    /**
     * The status of the plan to create (either active or draft). If not specified, this defaults to
     * active.
     */
    class Status @JsonCreator private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val ACTIVE = of("active")

            @JvmField val DRAFT = of("draft")

            @JvmStatic fun of(value: String) = Status(JsonField.of(value))
        }

        /** An enum containing [Status]'s known values. */
        enum class Known {
            ACTIVE,
            DRAFT,
        }

        /**
         * An enum containing [Status]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [Status] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            ACTIVE,
            DRAFT,
            /** An enum member indicating that [Status] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                ACTIVE -> Value.ACTIVE
                DRAFT -> Value.DRAFT
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws OrbInvalidDataException if this class instance's value is a not a known member.
         */
        fun known(): Known =
            when (this) {
                ACTIVE -> Known.ACTIVE
                DRAFT -> Known.DRAFT
                else -> throw OrbInvalidDataException("Unknown Status: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws OrbInvalidDataException if this class instance's value does not have the expected
         *   primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

        private var validated: Boolean = false

        fun validate(): Status = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: OrbInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Status && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is PlanCreateParams && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() =
        "PlanCreateParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
