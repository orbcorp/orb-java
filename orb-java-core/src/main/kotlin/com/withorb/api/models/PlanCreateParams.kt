// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.Params
import com.withorb.api.core.checkKnown
import com.withorb.api.core.checkRequired
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.immutableEmptyMap
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/** This endpoint allows creation of plans including their prices. */
class PlanCreateParams private constructor(
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,

) : Params {

    /**
     * An ISO 4217 currency string for invoices generated by subscriptions on this
     * plan.
     */
    fun currency(): String = body.currency()

    fun name(): String = body.name()

    /**
     * Prices for this plan. If the plan has phases, this includes prices across all
     * phases of the plan.
     */
    fun prices(): List<Price> = body.prices()

    /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
    fun defaultInvoiceMemo(): Optional<String> = body.defaultInvoiceMemo()

    fun externalPlanId(): Optional<String> = body.externalPlanId()

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed
     * by setting the value to `null`, and the entire metadata mapping can be cleared
     * by setting `metadata` to `null`.
     */
    fun metadata(): Optional<Metadata> = body.metadata()

    /**
     * The net terms determines the difference between the invoice date and the issue
     * date for the invoice. If you intend the invoice to be due on issue, set this
     * to 0.
     */
    fun netTerms(): Optional<Long> = body.netTerms()

    /**
     * The status of the plan to create (either active or draft). If not specified,
     * this defaults to active.
     */
    fun status(): Optional<Status> = body.status()

    /**
     * An ISO 4217 currency string for invoices generated by subscriptions on this
     * plan.
     */
    fun _currency(): JsonField<String> = body._currency()

    fun _name(): JsonField<String> = body._name()

    /**
     * Prices for this plan. If the plan has phases, this includes prices across all
     * phases of the plan.
     */
    fun _prices(): JsonField<List<Price>> = body._prices()

    /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
    fun _defaultInvoiceMemo(): JsonField<String> = body._defaultInvoiceMemo()

    fun _externalPlanId(): JsonField<String> = body._externalPlanId()

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed
     * by setting the value to `null`, and the entire metadata mapping can be cleared
     * by setting `metadata` to `null`.
     */
    fun _metadata(): JsonField<Metadata> = body._metadata()

    /**
     * The net terms determines the difference between the invoice date and the issue
     * date for the invoice. If you intend the invoice to be due on issue, set this
     * to 0.
     */
    fun _netTerms(): JsonField<Long> = body._netTerms()

    /**
     * The status of the plan to create (either active or draft). If not specified,
     * this defaults to active.
     */
    fun _status(): JsonField<Status> = body._status()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    @JvmSynthetic
    internal fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    @NoAutoDetect
    class Body @JsonCreator private constructor(
        @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
        @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
        @JsonProperty("prices") @ExcludeMissing private val prices: JsonField<List<Price>> = JsonMissing.of(),
        @JsonProperty("default_invoice_memo") @ExcludeMissing private val defaultInvoiceMemo: JsonField<String> = JsonMissing.of(),
        @JsonProperty("external_plan_id") @ExcludeMissing private val externalPlanId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
        @JsonProperty("net_terms") @ExcludeMissing private val netTerms: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("status") @ExcludeMissing private val status: JsonField<Status> = JsonMissing.of(),
        @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

    ) {

        /**
         * An ISO 4217 currency string for invoices generated by subscriptions on this
         * plan.
         */
        fun currency(): String = currency.getRequired("currency")

        fun name(): String = name.getRequired("name")

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun prices(): List<Price> = prices.getRequired("prices")

        /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
        fun defaultInvoiceMemo(): Optional<String> = Optional.ofNullable(defaultInvoiceMemo.getNullable("default_invoice_memo"))

        fun externalPlanId(): Optional<String> = Optional.ofNullable(externalPlanId.getNullable("external_plan_id"))

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed
         * by setting the value to `null`, and the entire metadata mapping can be cleared
         * by setting `metadata` to `null`.
         */
        fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

        /**
         * The net terms determines the difference between the invoice date and the issue
         * date for the invoice. If you intend the invoice to be due on issue, set this
         * to 0.
         */
        fun netTerms(): Optional<Long> = Optional.ofNullable(netTerms.getNullable("net_terms"))

        /**
         * The status of the plan to create (either active or draft). If not specified,
         * this defaults to active.
         */
        fun status(): Optional<Status> = Optional.ofNullable(status.getNullable("status"))

        /**
         * An ISO 4217 currency string for invoices generated by subscriptions on this
         * plan.
         */
        @JsonProperty("currency")
        @ExcludeMissing
        fun _currency(): JsonField<String> = currency

        @JsonProperty("name")
        @ExcludeMissing
        fun _name(): JsonField<String> = name

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        @JsonProperty("prices")
        @ExcludeMissing
        fun _prices(): JsonField<List<Price>> = prices

        /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
        @JsonProperty("default_invoice_memo")
        @ExcludeMissing
        fun _defaultInvoiceMemo(): JsonField<String> = defaultInvoiceMemo

        @JsonProperty("external_plan_id")
        @ExcludeMissing
        fun _externalPlanId(): JsonField<String> = externalPlanId

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed
         * by setting the value to `null`, and the entire metadata mapping can be cleared
         * by setting `metadata` to `null`.
         */
        @JsonProperty("metadata")
        @ExcludeMissing
        fun _metadata(): JsonField<Metadata> = metadata

        /**
         * The net terms determines the difference between the invoice date and the issue
         * date for the invoice. If you intend the invoice to be due on issue, set this
         * to 0.
         */
        @JsonProperty("net_terms")
        @ExcludeMissing
        fun _netTerms(): JsonField<Long> = netTerms

        /**
         * The status of the plan to create (either active or draft). If not specified,
         * this defaults to active.
         */
        @JsonProperty("status")
        @ExcludeMissing
        fun _status(): JsonField<Status> = status

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Body =
            apply {
                if (validated) {
                  return@apply
                }

                currency()
                name()
                prices().forEach { it.validate() }
                defaultInvoiceMemo()
                externalPlanId()
                metadata().ifPresent { it.validate() }
                netTerms()
                status()
                validated = true
            }

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             *
             * ```java
             * .currency()
             * .name()
             * .prices()
             * ```
             */
            @JvmStatic
            fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var currency: JsonField<String>? = null
            private var name: JsonField<String>? = null
            private var prices: JsonField<MutableList<Price>>? = null
            private var defaultInvoiceMemo: JsonField<String> = JsonMissing.of()
            private var externalPlanId: JsonField<String> = JsonMissing.of()
            private var metadata: JsonField<Metadata> = JsonMissing.of()
            private var netTerms: JsonField<Long> = JsonMissing.of()
            private var status: JsonField<Status> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) =
                apply {
                    currency = body.currency
                    name = body.name
                    prices = body.prices.map { it.toMutableList() }
                    defaultInvoiceMemo = body.defaultInvoiceMemo
                    externalPlanId = body.externalPlanId
                    metadata = body.metadata
                    netTerms = body.netTerms
                    status = body.status
                    additionalProperties = body.additionalProperties.toMutableMap()
                }

            /**
             * An ISO 4217 currency string for invoices generated by subscriptions on this
             * plan.
             */
            fun currency(currency: String) = currency(JsonField.of(currency))

            /**
             * An ISO 4217 currency string for invoices generated by subscriptions on this
             * plan.
             */
            fun currency(currency: JsonField<String>) =
                apply {
                    this.currency = currency
                }

            fun name(name: String) = name(JsonField.of(name))

            fun name(name: JsonField<String>) =
                apply {
                    this.name = name
                }

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun prices(prices: List<Price>) = prices(JsonField.of(prices))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun prices(prices: JsonField<List<Price>>) =
                apply {
                    this.prices = prices.map { it.toMutableList() }
                }

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(price: Price) =
                apply {
                    prices = (prices ?: JsonField.of(mutableListOf())).also {
                        checkKnown("prices", it).add(price)
                    }
                }

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanUnit: Price.NewPlanUnitPrice) = addPrice(Price.ofNewPlanUnit(newPlanUnit))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanPackage: Price.NewPlanPackagePrice) = addPrice(Price.ofNewPlanPackage(newPlanPackage))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanMatrix: Price.NewPlanMatrixPrice) = addPrice(Price.ofNewPlanMatrix(newPlanMatrix))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanTiered: Price.NewPlanTieredPrice) = addPrice(Price.ofNewPlanTiered(newPlanTiered))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanTieredBps: Price.NewPlanTieredBpsPrice) = addPrice(Price.ofNewPlanTieredBps(newPlanTieredBps))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanBps: Price.NewPlanBpsPrice) = addPrice(Price.ofNewPlanBps(newPlanBps))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanBulkBps: Price.NewPlanBulkBpsPrice) = addPrice(Price.ofNewPlanBulkBps(newPlanBulkBps))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanBulk: Price.NewPlanBulkPrice) = addPrice(Price.ofNewPlanBulk(newPlanBulk))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanThresholdTotalAmount: Price.NewPlanThresholdTotalAmountPrice) = addPrice(Price.ofNewPlanThresholdTotalAmount(newPlanThresholdTotalAmount))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanTieredPackage: Price.NewPlanTieredPackagePrice) = addPrice(Price.ofNewPlanTieredPackage(newPlanTieredPackage))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanTieredWithMinimum: Price.NewPlanTieredWithMinimumPrice) = addPrice(Price.ofNewPlanTieredWithMinimum(newPlanTieredWithMinimum))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanUnitWithPercent: Price.NewPlanUnitWithPercentPrice) = addPrice(Price.ofNewPlanUnitWithPercent(newPlanUnitWithPercent))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanPackageWithAllocation: Price.NewPlanPackageWithAllocationPrice) = addPrice(Price.ofNewPlanPackageWithAllocation(newPlanPackageWithAllocation))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanTierWithProration: Price.NewPlanTierWithProrationPrice) = addPrice(Price.ofNewPlanTierWithProration(newPlanTierWithProration))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanUnitWithProration: Price.NewPlanUnitWithProrationPrice) = addPrice(Price.ofNewPlanUnitWithProration(newPlanUnitWithProration))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanGroupedAllocation: Price.NewPlanGroupedAllocationPrice) = addPrice(Price.ofNewPlanGroupedAllocation(newPlanGroupedAllocation))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanGroupedWithProratedMinimum: Price.NewPlanGroupedWithProratedMinimumPrice) = addPrice(Price.ofNewPlanGroupedWithProratedMinimum(newPlanGroupedWithProratedMinimum))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanGroupedWithMeteredMinimum: Price.NewPlanGroupedWithMeteredMinimumPrice) = addPrice(Price.ofNewPlanGroupedWithMeteredMinimum(newPlanGroupedWithMeteredMinimum))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanMatrixWithDisplayName: Price.NewPlanMatrixWithDisplayNamePrice) = addPrice(Price.ofNewPlanMatrixWithDisplayName(newPlanMatrixWithDisplayName))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanBulkWithProration: Price.NewPlanBulkWithProrationPrice) = addPrice(Price.ofNewPlanBulkWithProration(newPlanBulkWithProration))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanGroupedTieredPackage: Price.NewPlanGroupedTieredPackagePrice) = addPrice(Price.ofNewPlanGroupedTieredPackage(newPlanGroupedTieredPackage))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanMaxGroupTieredPackage: Price.NewPlanMaxGroupTieredPackagePrice) = addPrice(Price.ofNewPlanMaxGroupTieredPackage(newPlanMaxGroupTieredPackage))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanScalableMatrixWithUnitPricing: Price.NewPlanScalableMatrixWithUnitPricingPrice) = addPrice(Price.ofNewPlanScalableMatrixWithUnitPricing(newPlanScalableMatrixWithUnitPricing))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanScalableMatrixWithTieredPricing: Price.NewPlanScalableMatrixWithTieredPricingPrice) = addPrice(Price.ofNewPlanScalableMatrixWithTieredPricing(newPlanScalableMatrixWithTieredPricing))

            /**
             * Prices for this plan. If the plan has phases, this includes prices across all
             * phases of the plan.
             */
            fun addPrice(newPlanCumulativeGroupedBulk: Price.NewPlanCumulativeGroupedBulkPrice) = addPrice(Price.ofNewPlanCumulativeGroupedBulk(newPlanCumulativeGroupedBulk))

            /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
            fun defaultInvoiceMemo(defaultInvoiceMemo: String?) = defaultInvoiceMemo(JsonField.ofNullable(defaultInvoiceMemo))

            /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
            fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) = defaultInvoiceMemo(defaultInvoiceMemo.getOrNull())

            /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
            fun defaultInvoiceMemo(defaultInvoiceMemo: JsonField<String>) =
                apply {
                    this.defaultInvoiceMemo = defaultInvoiceMemo
                }

            fun externalPlanId(externalPlanId: String?) = externalPlanId(JsonField.ofNullable(externalPlanId))

            fun externalPlanId(externalPlanId: Optional<String>) = externalPlanId(externalPlanId.getOrNull())

            fun externalPlanId(externalPlanId: JsonField<String>) =
                apply {
                    this.externalPlanId = externalPlanId
                }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(metadata: JsonField<Metadata>) =
                apply {
                    this.metadata = metadata
                }

            /**
             * The net terms determines the difference between the invoice date and the issue
             * date for the invoice. If you intend the invoice to be due on issue, set this
             * to 0.
             */
            fun netTerms(netTerms: Long?) = netTerms(JsonField.ofNullable(netTerms))

            /**
             * The net terms determines the difference between the invoice date and the issue
             * date for the invoice. If you intend the invoice to be due on issue, set this
             * to 0.
             */
            fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

            /**
             * The net terms determines the difference between the invoice date and the issue
             * date for the invoice. If you intend the invoice to be due on issue, set this
             * to 0.
             */
            fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.getOrNull())

            /**
             * The net terms determines the difference between the invoice date and the issue
             * date for the invoice. If you intend the invoice to be due on issue, set this
             * to 0.
             */
            fun netTerms(netTerms: JsonField<Long>) =
                apply {
                    this.netTerms = netTerms
                }

            /**
             * The status of the plan to create (either active or draft). If not specified,
             * this defaults to active.
             */
            fun status(status: Status) = status(JsonField.of(status))

            /**
             * The status of the plan to create (either active or draft). If not specified,
             * this defaults to active.
             */
            fun status(status: JsonField<Status>) =
                apply {
                    this.status = status
                }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

            fun putAdditionalProperty(key: String, value: JsonValue) =
                apply {
                    additionalProperties.put(key, value)
                }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                apply {
                    this.additionalProperties.putAll(additionalProperties)
                }

            fun removeAdditionalProperty(key: String) =
                apply {
                    additionalProperties.remove(key)
                }

            fun removeAllAdditionalProperties(keys: Set<String>) =
                apply {
                    keys.forEach(::removeAdditionalProperty)
                }

            fun build(): Body =
                Body(
                  checkRequired(
                    "currency", currency
                  ),
                  checkRequired(
                    "name", name
                  ),
                  checkRequired(
                    "prices", prices
                  ).map { it.toImmutable() },
                  defaultInvoiceMemo,
                  externalPlanId,
                  metadata,
                  netTerms,
                  status,
                  additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
          if (this === other) {
              return true
          }

          return /* spotless:off */ other is Body && currency == other.currency && name == other.name && prices == other.prices && defaultInvoiceMemo == other.defaultInvoiceMemo && externalPlanId == other.externalPlanId && metadata == other.metadata && netTerms == other.netTerms && status == other.status && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(currency, name, prices, defaultInvoiceMemo, externalPlanId, metadata, netTerms, status, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Body{currency=$currency, name=$name, prices=$prices, defaultInvoiceMemo=$defaultInvoiceMemo, externalPlanId=$externalPlanId, metadata=$metadata, netTerms=$netTerms, status=$status, additionalProperties=$additionalProperties}"
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [PlanCreateParams].
         *
         * The following fields are required:
         *
         * ```java
         * .currency()
         * .name()
         * .prices()
         * ```
         */
        @JvmStatic
        fun builder() = Builder()
    }

    /** A builder for [PlanCreateParams]. */
    @NoAutoDetect
    class Builder internal constructor() {

        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(planCreateParams: PlanCreateParams) =
            apply {
                body = planCreateParams.body.toBuilder()
                additionalHeaders = planCreateParams.additionalHeaders.toBuilder()
                additionalQueryParams = planCreateParams.additionalQueryParams.toBuilder()
            }

        /**
         * An ISO 4217 currency string for invoices generated by subscriptions on this
         * plan.
         */
        fun currency(currency: String) =
            apply {
                body.currency(currency)
            }

        /**
         * An ISO 4217 currency string for invoices generated by subscriptions on this
         * plan.
         */
        fun currency(currency: JsonField<String>) =
            apply {
                body.currency(currency)
            }

        fun name(name: String) =
            apply {
                body.name(name)
            }

        fun name(name: JsonField<String>) =
            apply {
                body.name(name)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun prices(prices: List<Price>) =
            apply {
                body.prices(prices)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun prices(prices: JsonField<List<Price>>) =
            apply {
                body.prices(prices)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(price: Price) =
            apply {
                body.addPrice(price)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanUnit: Price.NewPlanUnitPrice) =
            apply {
                body.addPrice(newPlanUnit)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanPackage: Price.NewPlanPackagePrice) =
            apply {
                body.addPrice(newPlanPackage)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanMatrix: Price.NewPlanMatrixPrice) =
            apply {
                body.addPrice(newPlanMatrix)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanTiered: Price.NewPlanTieredPrice) =
            apply {
                body.addPrice(newPlanTiered)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanTieredBps: Price.NewPlanTieredBpsPrice) =
            apply {
                body.addPrice(newPlanTieredBps)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanBps: Price.NewPlanBpsPrice) =
            apply {
                body.addPrice(newPlanBps)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanBulkBps: Price.NewPlanBulkBpsPrice) =
            apply {
                body.addPrice(newPlanBulkBps)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanBulk: Price.NewPlanBulkPrice) =
            apply {
                body.addPrice(newPlanBulk)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanThresholdTotalAmount: Price.NewPlanThresholdTotalAmountPrice) =
            apply {
                body.addPrice(newPlanThresholdTotalAmount)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanTieredPackage: Price.NewPlanTieredPackagePrice) =
            apply {
                body.addPrice(newPlanTieredPackage)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanTieredWithMinimum: Price.NewPlanTieredWithMinimumPrice) =
            apply {
                body.addPrice(newPlanTieredWithMinimum)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanUnitWithPercent: Price.NewPlanUnitWithPercentPrice) =
            apply {
                body.addPrice(newPlanUnitWithPercent)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanPackageWithAllocation: Price.NewPlanPackageWithAllocationPrice) =
            apply {
                body.addPrice(newPlanPackageWithAllocation)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanTierWithProration: Price.NewPlanTierWithProrationPrice) =
            apply {
                body.addPrice(newPlanTierWithProration)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanUnitWithProration: Price.NewPlanUnitWithProrationPrice) =
            apply {
                body.addPrice(newPlanUnitWithProration)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanGroupedAllocation: Price.NewPlanGroupedAllocationPrice) =
            apply {
                body.addPrice(newPlanGroupedAllocation)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanGroupedWithProratedMinimum: Price.NewPlanGroupedWithProratedMinimumPrice) =
            apply {
                body.addPrice(newPlanGroupedWithProratedMinimum)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanGroupedWithMeteredMinimum: Price.NewPlanGroupedWithMeteredMinimumPrice) =
            apply {
                body.addPrice(newPlanGroupedWithMeteredMinimum)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanMatrixWithDisplayName: Price.NewPlanMatrixWithDisplayNamePrice) =
            apply {
                body.addPrice(newPlanMatrixWithDisplayName)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanBulkWithProration: Price.NewPlanBulkWithProrationPrice) =
            apply {
                body.addPrice(newPlanBulkWithProration)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanGroupedTieredPackage: Price.NewPlanGroupedTieredPackagePrice) =
            apply {
                body.addPrice(newPlanGroupedTieredPackage)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanMaxGroupTieredPackage: Price.NewPlanMaxGroupTieredPackagePrice) =
            apply {
                body.addPrice(newPlanMaxGroupTieredPackage)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanScalableMatrixWithUnitPricing: Price.NewPlanScalableMatrixWithUnitPricingPrice) =
            apply {
                body.addPrice(newPlanScalableMatrixWithUnitPricing)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanScalableMatrixWithTieredPricing: Price.NewPlanScalableMatrixWithTieredPricingPrice) =
            apply {
                body.addPrice(newPlanScalableMatrixWithTieredPricing)
            }

        /**
         * Prices for this plan. If the plan has phases, this includes prices across all
         * phases of the plan.
         */
        fun addPrice(newPlanCumulativeGroupedBulk: Price.NewPlanCumulativeGroupedBulkPrice) =
            apply {
                body.addPrice(newPlanCumulativeGroupedBulk)
            }

        /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
        fun defaultInvoiceMemo(defaultInvoiceMemo: String?) =
            apply {
                body.defaultInvoiceMemo(defaultInvoiceMemo)
            }

        /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
        fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) = defaultInvoiceMemo(defaultInvoiceMemo.getOrNull())

        /** Free-form text which is available on the invoice PDF and the Orb invoice portal. */
        fun defaultInvoiceMemo(defaultInvoiceMemo: JsonField<String>) =
            apply {
                body.defaultInvoiceMemo(defaultInvoiceMemo)
            }

        fun externalPlanId(externalPlanId: String?) =
            apply {
                body.externalPlanId(externalPlanId)
            }

        fun externalPlanId(externalPlanId: Optional<String>) = externalPlanId(externalPlanId.getOrNull())

        fun externalPlanId(externalPlanId: JsonField<String>) =
            apply {
                body.externalPlanId(externalPlanId)
            }

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed
         * by setting the value to `null`, and the entire metadata mapping can be cleared
         * by setting `metadata` to `null`.
         */
        fun metadata(metadata: Metadata?) =
            apply {
                body.metadata(metadata)
            }

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed
         * by setting the value to `null`, and the entire metadata mapping can be cleared
         * by setting `metadata` to `null`.
         */
        fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

        /**
         * User-specified key/value pairs for the resource. Individual keys can be removed
         * by setting the value to `null`, and the entire metadata mapping can be cleared
         * by setting `metadata` to `null`.
         */
        fun metadata(metadata: JsonField<Metadata>) =
            apply {
                body.metadata(metadata)
            }

        /**
         * The net terms determines the difference between the invoice date and the issue
         * date for the invoice. If you intend the invoice to be due on issue, set this
         * to 0.
         */
        fun netTerms(netTerms: Long?) =
            apply {
                body.netTerms(netTerms)
            }

        /**
         * The net terms determines the difference between the invoice date and the issue
         * date for the invoice. If you intend the invoice to be due on issue, set this
         * to 0.
         */
        fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

        /**
         * The net terms determines the difference between the invoice date and the issue
         * date for the invoice. If you intend the invoice to be due on issue, set this
         * to 0.
         */
        fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.getOrNull())

        /**
         * The net terms determines the difference between the invoice date and the issue
         * date for the invoice. If you intend the invoice to be due on issue, set this
         * to 0.
         */
        fun netTerms(netTerms: JsonField<Long>) =
            apply {
                body.netTerms(netTerms)
            }

        /**
         * The status of the plan to create (either active or draft). If not specified,
         * this defaults to active.
         */
        fun status(status: Status) =
            apply {
                body.status(status)
            }

        /**
         * The status of the plan to create (either active or draft). If not specified,
         * this defaults to active.
         */
        fun status(status: JsonField<Status>) =
            apply {
                body.status(status)
            }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.additionalProperties(additionalBodyProperties)
            }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) =
            apply {
                body.putAdditionalProperty(
                  key, value
                )
            }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) =
            apply {
                body.removeAdditionalProperty(key)
            }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) =
            apply {
                body.removeAllAdditionalProperties(keys)
            }

        fun additionalHeaders(additionalHeaders: Headers) =
            apply {
                this.additionalHeaders.clear()
                putAllAdditionalHeaders(additionalHeaders)
            }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) =
            apply {
                this.additionalHeaders.clear()
                putAllAdditionalHeaders(additionalHeaders)
            }

        fun putAdditionalHeader(name: String, value: String) =
            apply {
                additionalHeaders.put(name, value)
            }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) =
            apply {
                additionalHeaders.put(name, values)
            }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) =
            apply {
                this.additionalHeaders.putAll(additionalHeaders)
            }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) =
            apply {
                this.additionalHeaders.putAll(additionalHeaders)
            }

        fun replaceAdditionalHeaders(name: String, value: String) =
            apply {
                additionalHeaders.replace(name, value)
            }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) =
            apply {
                additionalHeaders.replace(name, values)
            }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) =
            apply {
                this.additionalHeaders.replaceAll(additionalHeaders)
            }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) =
            apply {
                this.additionalHeaders.replaceAll(additionalHeaders)
            }

        fun removeAdditionalHeaders(name: String) =
            apply {
                additionalHeaders.remove(name)
            }

        fun removeAllAdditionalHeaders(names: Set<String>) =
            apply {
                additionalHeaders.removeAll(names)
            }

        fun additionalQueryParams(additionalQueryParams: QueryParams) =
            apply {
                this.additionalQueryParams.clear()
                putAllAdditionalQueryParams(additionalQueryParams)
            }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.clear()
                putAllAdditionalQueryParams(additionalQueryParams)
            }

        fun putAdditionalQueryParam(key: String, value: String) =
            apply {
                additionalQueryParams.put(key, value)
            }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) =
            apply {
                additionalQueryParams.put(key, values)
            }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) =
            apply {
                additionalQueryParams.replace(key, value)
            }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) =
            apply {
                additionalQueryParams.replace(key, values)
            }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) =
            apply {
                additionalQueryParams.remove(key)
            }

        fun removeAllAdditionalQueryParams(keys: Set<String>) =
            apply {
                additionalQueryParams.removeAll(keys)
            }

        fun build(): PlanCreateParams =
            PlanCreateParams(
              body.build(),
              additionalHeaders.build(),
              additionalQueryParams.build(),
            )
    }

    @JsonDeserialize(using = Price.Deserializer::class)
    @JsonSerialize(using = Price.Serializer::class)
    class Price private constructor(
        private val newPlanUnit: NewPlanUnitPrice? = null,
        private val newPlanPackage: NewPlanPackagePrice? = null,
        private val newPlanMatrix: NewPlanMatrixPrice? = null,
        private val newPlanTiered: NewPlanTieredPrice? = null,
        private val newPlanTieredBps: NewPlanTieredBpsPrice? = null,
        private val newPlanBps: NewPlanBpsPrice? = null,
        private val newPlanBulkBps: NewPlanBulkBpsPrice? = null,
        private val newPlanBulk: NewPlanBulkPrice? = null,
        private val newPlanThresholdTotalAmount: NewPlanThresholdTotalAmountPrice? = null,
        private val newPlanTieredPackage: NewPlanTieredPackagePrice? = null,
        private val newPlanTieredWithMinimum: NewPlanTieredWithMinimumPrice? = null,
        private val newPlanUnitWithPercent: NewPlanUnitWithPercentPrice? = null,
        private val newPlanPackageWithAllocation: NewPlanPackageWithAllocationPrice? = null,
        private val newPlanTierWithProration: NewPlanTierWithProrationPrice? = null,
        private val newPlanUnitWithProration: NewPlanUnitWithProrationPrice? = null,
        private val newPlanGroupedAllocation: NewPlanGroupedAllocationPrice? = null,
        private val newPlanGroupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice? = null,
        private val newPlanGroupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice? = null,
        private val newPlanMatrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice? = null,
        private val newPlanBulkWithProration: NewPlanBulkWithProrationPrice? = null,
        private val newPlanGroupedTieredPackage: NewPlanGroupedTieredPackagePrice? = null,
        private val newPlanMaxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice? = null,
        private val newPlanScalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice? = null,
        private val newPlanScalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice? = null,
        private val newPlanCumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice? = null,
        private val _json: JsonValue? = null,

    ) {

        fun newPlanUnit(): Optional<NewPlanUnitPrice> = Optional.ofNullable(newPlanUnit)

        fun newPlanPackage(): Optional<NewPlanPackagePrice> = Optional.ofNullable(newPlanPackage)

        fun newPlanMatrix(): Optional<NewPlanMatrixPrice> = Optional.ofNullable(newPlanMatrix)

        fun newPlanTiered(): Optional<NewPlanTieredPrice> = Optional.ofNullable(newPlanTiered)

        fun newPlanTieredBps(): Optional<NewPlanTieredBpsPrice> = Optional.ofNullable(newPlanTieredBps)

        fun newPlanBps(): Optional<NewPlanBpsPrice> = Optional.ofNullable(newPlanBps)

        fun newPlanBulkBps(): Optional<NewPlanBulkBpsPrice> = Optional.ofNullable(newPlanBulkBps)

        fun newPlanBulk(): Optional<NewPlanBulkPrice> = Optional.ofNullable(newPlanBulk)

        fun newPlanThresholdTotalAmount(): Optional<NewPlanThresholdTotalAmountPrice> = Optional.ofNullable(newPlanThresholdTotalAmount)

        fun newPlanTieredPackage(): Optional<NewPlanTieredPackagePrice> = Optional.ofNullable(newPlanTieredPackage)

        fun newPlanTieredWithMinimum(): Optional<NewPlanTieredWithMinimumPrice> = Optional.ofNullable(newPlanTieredWithMinimum)

        fun newPlanUnitWithPercent(): Optional<NewPlanUnitWithPercentPrice> = Optional.ofNullable(newPlanUnitWithPercent)

        fun newPlanPackageWithAllocation(): Optional<NewPlanPackageWithAllocationPrice> = Optional.ofNullable(newPlanPackageWithAllocation)

        fun newPlanTierWithProration(): Optional<NewPlanTierWithProrationPrice> = Optional.ofNullable(newPlanTierWithProration)

        fun newPlanUnitWithProration(): Optional<NewPlanUnitWithProrationPrice> = Optional.ofNullable(newPlanUnitWithProration)

        fun newPlanGroupedAllocation(): Optional<NewPlanGroupedAllocationPrice> = Optional.ofNullable(newPlanGroupedAllocation)

        fun newPlanGroupedWithProratedMinimum(): Optional<NewPlanGroupedWithProratedMinimumPrice> = Optional.ofNullable(newPlanGroupedWithProratedMinimum)

        fun newPlanGroupedWithMeteredMinimum(): Optional<NewPlanGroupedWithMeteredMinimumPrice> = Optional.ofNullable(newPlanGroupedWithMeteredMinimum)

        fun newPlanMatrixWithDisplayName(): Optional<NewPlanMatrixWithDisplayNamePrice> = Optional.ofNullable(newPlanMatrixWithDisplayName)

        fun newPlanBulkWithProration(): Optional<NewPlanBulkWithProrationPrice> = Optional.ofNullable(newPlanBulkWithProration)

        fun newPlanGroupedTieredPackage(): Optional<NewPlanGroupedTieredPackagePrice> = Optional.ofNullable(newPlanGroupedTieredPackage)

        fun newPlanMaxGroupTieredPackage(): Optional<NewPlanMaxGroupTieredPackagePrice> = Optional.ofNullable(newPlanMaxGroupTieredPackage)

        fun newPlanScalableMatrixWithUnitPricing(): Optional<NewPlanScalableMatrixWithUnitPricingPrice> = Optional.ofNullable(newPlanScalableMatrixWithUnitPricing)

        fun newPlanScalableMatrixWithTieredPricing(): Optional<NewPlanScalableMatrixWithTieredPricingPrice> = Optional.ofNullable(newPlanScalableMatrixWithTieredPricing)

        fun newPlanCumulativeGroupedBulk(): Optional<NewPlanCumulativeGroupedBulkPrice> = Optional.ofNullable(newPlanCumulativeGroupedBulk)

        fun isNewPlanUnit(): Boolean = newPlanUnit != null

        fun isNewPlanPackage(): Boolean = newPlanPackage != null

        fun isNewPlanMatrix(): Boolean = newPlanMatrix != null

        fun isNewPlanTiered(): Boolean = newPlanTiered != null

        fun isNewPlanTieredBps(): Boolean = newPlanTieredBps != null

        fun isNewPlanBps(): Boolean = newPlanBps != null

        fun isNewPlanBulkBps(): Boolean = newPlanBulkBps != null

        fun isNewPlanBulk(): Boolean = newPlanBulk != null

        fun isNewPlanThresholdTotalAmount(): Boolean = newPlanThresholdTotalAmount != null

        fun isNewPlanTieredPackage(): Boolean = newPlanTieredPackage != null

        fun isNewPlanTieredWithMinimum(): Boolean = newPlanTieredWithMinimum != null

        fun isNewPlanUnitWithPercent(): Boolean = newPlanUnitWithPercent != null

        fun isNewPlanPackageWithAllocation(): Boolean = newPlanPackageWithAllocation != null

        fun isNewPlanTierWithProration(): Boolean = newPlanTierWithProration != null

        fun isNewPlanUnitWithProration(): Boolean = newPlanUnitWithProration != null

        fun isNewPlanGroupedAllocation(): Boolean = newPlanGroupedAllocation != null

        fun isNewPlanGroupedWithProratedMinimum(): Boolean = newPlanGroupedWithProratedMinimum != null

        fun isNewPlanGroupedWithMeteredMinimum(): Boolean = newPlanGroupedWithMeteredMinimum != null

        fun isNewPlanMatrixWithDisplayName(): Boolean = newPlanMatrixWithDisplayName != null

        fun isNewPlanBulkWithProration(): Boolean = newPlanBulkWithProration != null

        fun isNewPlanGroupedTieredPackage(): Boolean = newPlanGroupedTieredPackage != null

        fun isNewPlanMaxGroupTieredPackage(): Boolean = newPlanMaxGroupTieredPackage != null

        fun isNewPlanScalableMatrixWithUnitPricing(): Boolean = newPlanScalableMatrixWithUnitPricing != null

        fun isNewPlanScalableMatrixWithTieredPricing(): Boolean = newPlanScalableMatrixWithTieredPricing != null

        fun isNewPlanCumulativeGroupedBulk(): Boolean = newPlanCumulativeGroupedBulk != null

        fun asNewPlanUnit(): NewPlanUnitPrice = newPlanUnit.getOrThrow("newPlanUnit")

        fun asNewPlanPackage(): NewPlanPackagePrice = newPlanPackage.getOrThrow("newPlanPackage")

        fun asNewPlanMatrix(): NewPlanMatrixPrice = newPlanMatrix.getOrThrow("newPlanMatrix")

        fun asNewPlanTiered(): NewPlanTieredPrice = newPlanTiered.getOrThrow("newPlanTiered")

        fun asNewPlanTieredBps(): NewPlanTieredBpsPrice = newPlanTieredBps.getOrThrow("newPlanTieredBps")

        fun asNewPlanBps(): NewPlanBpsPrice = newPlanBps.getOrThrow("newPlanBps")

        fun asNewPlanBulkBps(): NewPlanBulkBpsPrice = newPlanBulkBps.getOrThrow("newPlanBulkBps")

        fun asNewPlanBulk(): NewPlanBulkPrice = newPlanBulk.getOrThrow("newPlanBulk")

        fun asNewPlanThresholdTotalAmount(): NewPlanThresholdTotalAmountPrice = newPlanThresholdTotalAmount.getOrThrow("newPlanThresholdTotalAmount")

        fun asNewPlanTieredPackage(): NewPlanTieredPackagePrice = newPlanTieredPackage.getOrThrow("newPlanTieredPackage")

        fun asNewPlanTieredWithMinimum(): NewPlanTieredWithMinimumPrice = newPlanTieredWithMinimum.getOrThrow("newPlanTieredWithMinimum")

        fun asNewPlanUnitWithPercent(): NewPlanUnitWithPercentPrice = newPlanUnitWithPercent.getOrThrow("newPlanUnitWithPercent")

        fun asNewPlanPackageWithAllocation(): NewPlanPackageWithAllocationPrice = newPlanPackageWithAllocation.getOrThrow("newPlanPackageWithAllocation")

        fun asNewPlanTierWithProration(): NewPlanTierWithProrationPrice = newPlanTierWithProration.getOrThrow("newPlanTierWithProration")

        fun asNewPlanUnitWithProration(): NewPlanUnitWithProrationPrice = newPlanUnitWithProration.getOrThrow("newPlanUnitWithProration")

        fun asNewPlanGroupedAllocation(): NewPlanGroupedAllocationPrice = newPlanGroupedAllocation.getOrThrow("newPlanGroupedAllocation")

        fun asNewPlanGroupedWithProratedMinimum(): NewPlanGroupedWithProratedMinimumPrice = newPlanGroupedWithProratedMinimum.getOrThrow("newPlanGroupedWithProratedMinimum")

        fun asNewPlanGroupedWithMeteredMinimum(): NewPlanGroupedWithMeteredMinimumPrice = newPlanGroupedWithMeteredMinimum.getOrThrow("newPlanGroupedWithMeteredMinimum")

        fun asNewPlanMatrixWithDisplayName(): NewPlanMatrixWithDisplayNamePrice = newPlanMatrixWithDisplayName.getOrThrow("newPlanMatrixWithDisplayName")

        fun asNewPlanBulkWithProration(): NewPlanBulkWithProrationPrice = newPlanBulkWithProration.getOrThrow("newPlanBulkWithProration")

        fun asNewPlanGroupedTieredPackage(): NewPlanGroupedTieredPackagePrice = newPlanGroupedTieredPackage.getOrThrow("newPlanGroupedTieredPackage")

        fun asNewPlanMaxGroupTieredPackage(): NewPlanMaxGroupTieredPackagePrice = newPlanMaxGroupTieredPackage.getOrThrow("newPlanMaxGroupTieredPackage")

        fun asNewPlanScalableMatrixWithUnitPricing(): NewPlanScalableMatrixWithUnitPricingPrice = newPlanScalableMatrixWithUnitPricing.getOrThrow("newPlanScalableMatrixWithUnitPricing")

        fun asNewPlanScalableMatrixWithTieredPricing(): NewPlanScalableMatrixWithTieredPricingPrice = newPlanScalableMatrixWithTieredPricing.getOrThrow("newPlanScalableMatrixWithTieredPricing")

        fun asNewPlanCumulativeGroupedBulk(): NewPlanCumulativeGroupedBulkPrice = newPlanCumulativeGroupedBulk.getOrThrow("newPlanCumulativeGroupedBulk")

        fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

        fun <T> accept(visitor: Visitor<T>): T {
          return when {
              newPlanUnit != null -> visitor.visitNewPlanUnit(newPlanUnit)
              newPlanPackage != null -> visitor.visitNewPlanPackage(newPlanPackage)
              newPlanMatrix != null -> visitor.visitNewPlanMatrix(newPlanMatrix)
              newPlanTiered != null -> visitor.visitNewPlanTiered(newPlanTiered)
              newPlanTieredBps != null -> visitor.visitNewPlanTieredBps(newPlanTieredBps)
              newPlanBps != null -> visitor.visitNewPlanBps(newPlanBps)
              newPlanBulkBps != null -> visitor.visitNewPlanBulkBps(newPlanBulkBps)
              newPlanBulk != null -> visitor.visitNewPlanBulk(newPlanBulk)
              newPlanThresholdTotalAmount != null -> visitor.visitNewPlanThresholdTotalAmount(newPlanThresholdTotalAmount)
              newPlanTieredPackage != null -> visitor.visitNewPlanTieredPackage(newPlanTieredPackage)
              newPlanTieredWithMinimum != null -> visitor.visitNewPlanTieredWithMinimum(newPlanTieredWithMinimum)
              newPlanUnitWithPercent != null -> visitor.visitNewPlanUnitWithPercent(newPlanUnitWithPercent)
              newPlanPackageWithAllocation != null -> visitor.visitNewPlanPackageWithAllocation(newPlanPackageWithAllocation)
              newPlanTierWithProration != null -> visitor.visitNewPlanTierWithProration(newPlanTierWithProration)
              newPlanUnitWithProration != null -> visitor.visitNewPlanUnitWithProration(newPlanUnitWithProration)
              newPlanGroupedAllocation != null -> visitor.visitNewPlanGroupedAllocation(newPlanGroupedAllocation)
              newPlanGroupedWithProratedMinimum != null -> visitor.visitNewPlanGroupedWithProratedMinimum(newPlanGroupedWithProratedMinimum)
              newPlanGroupedWithMeteredMinimum != null -> visitor.visitNewPlanGroupedWithMeteredMinimum(newPlanGroupedWithMeteredMinimum)
              newPlanMatrixWithDisplayName != null -> visitor.visitNewPlanMatrixWithDisplayName(newPlanMatrixWithDisplayName)
              newPlanBulkWithProration != null -> visitor.visitNewPlanBulkWithProration(newPlanBulkWithProration)
              newPlanGroupedTieredPackage != null -> visitor.visitNewPlanGroupedTieredPackage(newPlanGroupedTieredPackage)
              newPlanMaxGroupTieredPackage != null -> visitor.visitNewPlanMaxGroupTieredPackage(newPlanMaxGroupTieredPackage)
              newPlanScalableMatrixWithUnitPricing != null -> visitor.visitNewPlanScalableMatrixWithUnitPricing(newPlanScalableMatrixWithUnitPricing)
              newPlanScalableMatrixWithTieredPricing != null -> visitor.visitNewPlanScalableMatrixWithTieredPricing(newPlanScalableMatrixWithTieredPricing)
              newPlanCumulativeGroupedBulk != null -> visitor.visitNewPlanCumulativeGroupedBulk(newPlanCumulativeGroupedBulk)
              else -> visitor.unknown(_json)
          }
        }

        private var validated: Boolean = false

        fun validate(): Price =
            apply {
                if (validated) {
                  return@apply
                }

                accept(object : Visitor<Unit> {
                    override fun visitNewPlanUnit(newPlanUnit: NewPlanUnitPrice) {
                      newPlanUnit.validate()
                    }

                    override fun visitNewPlanPackage(newPlanPackage: NewPlanPackagePrice) {
                      newPlanPackage.validate()
                    }

                    override fun visitNewPlanMatrix(newPlanMatrix: NewPlanMatrixPrice) {
                      newPlanMatrix.validate()
                    }

                    override fun visitNewPlanTiered(newPlanTiered: NewPlanTieredPrice) {
                      newPlanTiered.validate()
                    }

                    override fun visitNewPlanTieredBps(newPlanTieredBps: NewPlanTieredBpsPrice) {
                      newPlanTieredBps.validate()
                    }

                    override fun visitNewPlanBps(newPlanBps: NewPlanBpsPrice) {
                      newPlanBps.validate()
                    }

                    override fun visitNewPlanBulkBps(newPlanBulkBps: NewPlanBulkBpsPrice) {
                      newPlanBulkBps.validate()
                    }

                    override fun visitNewPlanBulk(newPlanBulk: NewPlanBulkPrice) {
                      newPlanBulk.validate()
                    }

                    override fun visitNewPlanThresholdTotalAmount(newPlanThresholdTotalAmount: NewPlanThresholdTotalAmountPrice) {
                      newPlanThresholdTotalAmount.validate()
                    }

                    override fun visitNewPlanTieredPackage(newPlanTieredPackage: NewPlanTieredPackagePrice) {
                      newPlanTieredPackage.validate()
                    }

                    override fun visitNewPlanTieredWithMinimum(newPlanTieredWithMinimum: NewPlanTieredWithMinimumPrice) {
                      newPlanTieredWithMinimum.validate()
                    }

                    override fun visitNewPlanUnitWithPercent(newPlanUnitWithPercent: NewPlanUnitWithPercentPrice) {
                      newPlanUnitWithPercent.validate()
                    }

                    override fun visitNewPlanPackageWithAllocation(newPlanPackageWithAllocation: NewPlanPackageWithAllocationPrice) {
                      newPlanPackageWithAllocation.validate()
                    }

                    override fun visitNewPlanTierWithProration(newPlanTierWithProration: NewPlanTierWithProrationPrice) {
                      newPlanTierWithProration.validate()
                    }

                    override fun visitNewPlanUnitWithProration(newPlanUnitWithProration: NewPlanUnitWithProrationPrice) {
                      newPlanUnitWithProration.validate()
                    }

                    override fun visitNewPlanGroupedAllocation(newPlanGroupedAllocation: NewPlanGroupedAllocationPrice) {
                      newPlanGroupedAllocation.validate()
                    }

                    override fun visitNewPlanGroupedWithProratedMinimum(newPlanGroupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice) {
                      newPlanGroupedWithProratedMinimum.validate()
                    }

                    override fun visitNewPlanGroupedWithMeteredMinimum(newPlanGroupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice) {
                      newPlanGroupedWithMeteredMinimum.validate()
                    }

                    override fun visitNewPlanMatrixWithDisplayName(newPlanMatrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice) {
                      newPlanMatrixWithDisplayName.validate()
                    }

                    override fun visitNewPlanBulkWithProration(newPlanBulkWithProration: NewPlanBulkWithProrationPrice) {
                      newPlanBulkWithProration.validate()
                    }

                    override fun visitNewPlanGroupedTieredPackage(newPlanGroupedTieredPackage: NewPlanGroupedTieredPackagePrice) {
                      newPlanGroupedTieredPackage.validate()
                    }

                    override fun visitNewPlanMaxGroupTieredPackage(newPlanMaxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice) {
                      newPlanMaxGroupTieredPackage.validate()
                    }

                    override fun visitNewPlanScalableMatrixWithUnitPricing(newPlanScalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice) {
                      newPlanScalableMatrixWithUnitPricing.validate()
                    }

                    override fun visitNewPlanScalableMatrixWithTieredPricing(newPlanScalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice) {
                      newPlanScalableMatrixWithTieredPricing.validate()
                    }

                    override fun visitNewPlanCumulativeGroupedBulk(newPlanCumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice) {
                      newPlanCumulativeGroupedBulk.validate()
                    }
                })
                validated = true
            }

        override fun equals(other: Any?): Boolean {
          if (this === other) {
              return true
          }

          return /* spotless:off */ other is Price && newPlanUnit == other.newPlanUnit && newPlanPackage == other.newPlanPackage && newPlanMatrix == other.newPlanMatrix && newPlanTiered == other.newPlanTiered && newPlanTieredBps == other.newPlanTieredBps && newPlanBps == other.newPlanBps && newPlanBulkBps == other.newPlanBulkBps && newPlanBulk == other.newPlanBulk && newPlanThresholdTotalAmount == other.newPlanThresholdTotalAmount && newPlanTieredPackage == other.newPlanTieredPackage && newPlanTieredWithMinimum == other.newPlanTieredWithMinimum && newPlanUnitWithPercent == other.newPlanUnitWithPercent && newPlanPackageWithAllocation == other.newPlanPackageWithAllocation && newPlanTierWithProration == other.newPlanTierWithProration && newPlanUnitWithProration == other.newPlanUnitWithProration && newPlanGroupedAllocation == other.newPlanGroupedAllocation && newPlanGroupedWithProratedMinimum == other.newPlanGroupedWithProratedMinimum && newPlanGroupedWithMeteredMinimum == other.newPlanGroupedWithMeteredMinimum && newPlanMatrixWithDisplayName == other.newPlanMatrixWithDisplayName && newPlanBulkWithProration == other.newPlanBulkWithProration && newPlanGroupedTieredPackage == other.newPlanGroupedTieredPackage && newPlanMaxGroupTieredPackage == other.newPlanMaxGroupTieredPackage && newPlanScalableMatrixWithUnitPricing == other.newPlanScalableMatrixWithUnitPricing && newPlanScalableMatrixWithTieredPricing == other.newPlanScalableMatrixWithTieredPricing && newPlanCumulativeGroupedBulk == other.newPlanCumulativeGroupedBulk /* spotless:on */
        }

        override fun hashCode(): Int = /* spotless:off */ Objects.hash(newPlanUnit, newPlanPackage, newPlanMatrix, newPlanTiered, newPlanTieredBps, newPlanBps, newPlanBulkBps, newPlanBulk, newPlanThresholdTotalAmount, newPlanTieredPackage, newPlanTieredWithMinimum, newPlanUnitWithPercent, newPlanPackageWithAllocation, newPlanTierWithProration, newPlanUnitWithProration, newPlanGroupedAllocation, newPlanGroupedWithProratedMinimum, newPlanGroupedWithMeteredMinimum, newPlanMatrixWithDisplayName, newPlanBulkWithProration, newPlanGroupedTieredPackage, newPlanMaxGroupTieredPackage, newPlanScalableMatrixWithUnitPricing, newPlanScalableMatrixWithTieredPricing, newPlanCumulativeGroupedBulk) /* spotless:on */

        override fun toString(): String =
            when {
                newPlanUnit != null -> "Price{newPlanUnit=$newPlanUnit}"
                newPlanPackage != null -> "Price{newPlanPackage=$newPlanPackage}"
                newPlanMatrix != null -> "Price{newPlanMatrix=$newPlanMatrix}"
                newPlanTiered != null -> "Price{newPlanTiered=$newPlanTiered}"
                newPlanTieredBps != null -> "Price{newPlanTieredBps=$newPlanTieredBps}"
                newPlanBps != null -> "Price{newPlanBps=$newPlanBps}"
                newPlanBulkBps != null -> "Price{newPlanBulkBps=$newPlanBulkBps}"
                newPlanBulk != null -> "Price{newPlanBulk=$newPlanBulk}"
                newPlanThresholdTotalAmount != null -> "Price{newPlanThresholdTotalAmount=$newPlanThresholdTotalAmount}"
                newPlanTieredPackage != null -> "Price{newPlanTieredPackage=$newPlanTieredPackage}"
                newPlanTieredWithMinimum != null -> "Price{newPlanTieredWithMinimum=$newPlanTieredWithMinimum}"
                newPlanUnitWithPercent != null -> "Price{newPlanUnitWithPercent=$newPlanUnitWithPercent}"
                newPlanPackageWithAllocation != null -> "Price{newPlanPackageWithAllocation=$newPlanPackageWithAllocation}"
                newPlanTierWithProration != null -> "Price{newPlanTierWithProration=$newPlanTierWithProration}"
                newPlanUnitWithProration != null -> "Price{newPlanUnitWithProration=$newPlanUnitWithProration}"
                newPlanGroupedAllocation != null -> "Price{newPlanGroupedAllocation=$newPlanGroupedAllocation}"
                newPlanGroupedWithProratedMinimum != null -> "Price{newPlanGroupedWithProratedMinimum=$newPlanGroupedWithProratedMinimum}"
                newPlanGroupedWithMeteredMinimum != null -> "Price{newPlanGroupedWithMeteredMinimum=$newPlanGroupedWithMeteredMinimum}"
                newPlanMatrixWithDisplayName != null -> "Price{newPlanMatrixWithDisplayName=$newPlanMatrixWithDisplayName}"
                newPlanBulkWithProration != null -> "Price{newPlanBulkWithProration=$newPlanBulkWithProration}"
                newPlanGroupedTieredPackage != null -> "Price{newPlanGroupedTieredPackage=$newPlanGroupedTieredPackage}"
                newPlanMaxGroupTieredPackage != null -> "Price{newPlanMaxGroupTieredPackage=$newPlanMaxGroupTieredPackage}"
                newPlanScalableMatrixWithUnitPricing != null -> "Price{newPlanScalableMatrixWithUnitPricing=$newPlanScalableMatrixWithUnitPricing}"
                newPlanScalableMatrixWithTieredPricing != null -> "Price{newPlanScalableMatrixWithTieredPricing=$newPlanScalableMatrixWithTieredPricing}"
                newPlanCumulativeGroupedBulk != null -> "Price{newPlanCumulativeGroupedBulk=$newPlanCumulativeGroupedBulk}"
                _json != null -> "Price{_unknown=$_json}"
                else -> throw IllegalStateException("Invalid Price")
            }

        companion object {

            @JvmStatic
            fun ofNewPlanUnit(newPlanUnit: NewPlanUnitPrice) = Price(newPlanUnit = newPlanUnit)

            @JvmStatic
            fun ofNewPlanPackage(newPlanPackage: NewPlanPackagePrice) = Price(newPlanPackage = newPlanPackage)

            @JvmStatic
            fun ofNewPlanMatrix(newPlanMatrix: NewPlanMatrixPrice) = Price(newPlanMatrix = newPlanMatrix)

            @JvmStatic
            fun ofNewPlanTiered(newPlanTiered: NewPlanTieredPrice) = Price(newPlanTiered = newPlanTiered)

            @JvmStatic
            fun ofNewPlanTieredBps(newPlanTieredBps: NewPlanTieredBpsPrice) = Price(newPlanTieredBps = newPlanTieredBps)

            @JvmStatic
            fun ofNewPlanBps(newPlanBps: NewPlanBpsPrice) = Price(newPlanBps = newPlanBps)

            @JvmStatic
            fun ofNewPlanBulkBps(newPlanBulkBps: NewPlanBulkBpsPrice) = Price(newPlanBulkBps = newPlanBulkBps)

            @JvmStatic
            fun ofNewPlanBulk(newPlanBulk: NewPlanBulkPrice) = Price(newPlanBulk = newPlanBulk)

            @JvmStatic
            fun ofNewPlanThresholdTotalAmount(newPlanThresholdTotalAmount: NewPlanThresholdTotalAmountPrice) = Price(newPlanThresholdTotalAmount = newPlanThresholdTotalAmount)

            @JvmStatic
            fun ofNewPlanTieredPackage(newPlanTieredPackage: NewPlanTieredPackagePrice) = Price(newPlanTieredPackage = newPlanTieredPackage)

            @JvmStatic
            fun ofNewPlanTieredWithMinimum(newPlanTieredWithMinimum: NewPlanTieredWithMinimumPrice) = Price(newPlanTieredWithMinimum = newPlanTieredWithMinimum)

            @JvmStatic
            fun ofNewPlanUnitWithPercent(newPlanUnitWithPercent: NewPlanUnitWithPercentPrice) = Price(newPlanUnitWithPercent = newPlanUnitWithPercent)

            @JvmStatic
            fun ofNewPlanPackageWithAllocation(newPlanPackageWithAllocation: NewPlanPackageWithAllocationPrice) = Price(newPlanPackageWithAllocation = newPlanPackageWithAllocation)

            @JvmStatic
            fun ofNewPlanTierWithProration(newPlanTierWithProration: NewPlanTierWithProrationPrice) = Price(newPlanTierWithProration = newPlanTierWithProration)

            @JvmStatic
            fun ofNewPlanUnitWithProration(newPlanUnitWithProration: NewPlanUnitWithProrationPrice) = Price(newPlanUnitWithProration = newPlanUnitWithProration)

            @JvmStatic
            fun ofNewPlanGroupedAllocation(newPlanGroupedAllocation: NewPlanGroupedAllocationPrice) = Price(newPlanGroupedAllocation = newPlanGroupedAllocation)

            @JvmStatic
            fun ofNewPlanGroupedWithProratedMinimum(newPlanGroupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice) = Price(newPlanGroupedWithProratedMinimum = newPlanGroupedWithProratedMinimum)

            @JvmStatic
            fun ofNewPlanGroupedWithMeteredMinimum(newPlanGroupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice) = Price(newPlanGroupedWithMeteredMinimum = newPlanGroupedWithMeteredMinimum)

            @JvmStatic
            fun ofNewPlanMatrixWithDisplayName(newPlanMatrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice) = Price(newPlanMatrixWithDisplayName = newPlanMatrixWithDisplayName)

            @JvmStatic
            fun ofNewPlanBulkWithProration(newPlanBulkWithProration: NewPlanBulkWithProrationPrice) = Price(newPlanBulkWithProration = newPlanBulkWithProration)

            @JvmStatic
            fun ofNewPlanGroupedTieredPackage(newPlanGroupedTieredPackage: NewPlanGroupedTieredPackagePrice) = Price(newPlanGroupedTieredPackage = newPlanGroupedTieredPackage)

            @JvmStatic
            fun ofNewPlanMaxGroupTieredPackage(newPlanMaxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice) = Price(newPlanMaxGroupTieredPackage = newPlanMaxGroupTieredPackage)

            @JvmStatic
            fun ofNewPlanScalableMatrixWithUnitPricing(newPlanScalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice) = Price(newPlanScalableMatrixWithUnitPricing = newPlanScalableMatrixWithUnitPricing)

            @JvmStatic
            fun ofNewPlanScalableMatrixWithTieredPricing(newPlanScalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice) = Price(newPlanScalableMatrixWithTieredPricing = newPlanScalableMatrixWithTieredPricing)

            @JvmStatic
            fun ofNewPlanCumulativeGroupedBulk(newPlanCumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice) = Price(newPlanCumulativeGroupedBulk = newPlanCumulativeGroupedBulk)
        }

        /**
         * An interface that defines how to map each variant of [Price] to a value of type
         * [T].
         */
        interface Visitor<out T> {

            fun visitNewPlanUnit(newPlanUnit: NewPlanUnitPrice): T

            fun visitNewPlanPackage(newPlanPackage: NewPlanPackagePrice): T

            fun visitNewPlanMatrix(newPlanMatrix: NewPlanMatrixPrice): T

            fun visitNewPlanTiered(newPlanTiered: NewPlanTieredPrice): T

            fun visitNewPlanTieredBps(newPlanTieredBps: NewPlanTieredBpsPrice): T

            fun visitNewPlanBps(newPlanBps: NewPlanBpsPrice): T

            fun visitNewPlanBulkBps(newPlanBulkBps: NewPlanBulkBpsPrice): T

            fun visitNewPlanBulk(newPlanBulk: NewPlanBulkPrice): T

            fun visitNewPlanThresholdTotalAmount(newPlanThresholdTotalAmount: NewPlanThresholdTotalAmountPrice): T

            fun visitNewPlanTieredPackage(newPlanTieredPackage: NewPlanTieredPackagePrice): T

            fun visitNewPlanTieredWithMinimum(newPlanTieredWithMinimum: NewPlanTieredWithMinimumPrice): T

            fun visitNewPlanUnitWithPercent(newPlanUnitWithPercent: NewPlanUnitWithPercentPrice): T

            fun visitNewPlanPackageWithAllocation(newPlanPackageWithAllocation: NewPlanPackageWithAllocationPrice): T

            fun visitNewPlanTierWithProration(newPlanTierWithProration: NewPlanTierWithProrationPrice): T

            fun visitNewPlanUnitWithProration(newPlanUnitWithProration: NewPlanUnitWithProrationPrice): T

            fun visitNewPlanGroupedAllocation(newPlanGroupedAllocation: NewPlanGroupedAllocationPrice): T

            fun visitNewPlanGroupedWithProratedMinimum(newPlanGroupedWithProratedMinimum: NewPlanGroupedWithProratedMinimumPrice): T

            fun visitNewPlanGroupedWithMeteredMinimum(newPlanGroupedWithMeteredMinimum: NewPlanGroupedWithMeteredMinimumPrice): T

            fun visitNewPlanMatrixWithDisplayName(newPlanMatrixWithDisplayName: NewPlanMatrixWithDisplayNamePrice): T

            fun visitNewPlanBulkWithProration(newPlanBulkWithProration: NewPlanBulkWithProrationPrice): T

            fun visitNewPlanGroupedTieredPackage(newPlanGroupedTieredPackage: NewPlanGroupedTieredPackagePrice): T

            fun visitNewPlanMaxGroupTieredPackage(newPlanMaxGroupTieredPackage: NewPlanMaxGroupTieredPackagePrice): T

            fun visitNewPlanScalableMatrixWithUnitPricing(newPlanScalableMatrixWithUnitPricing: NewPlanScalableMatrixWithUnitPricingPrice): T

            fun visitNewPlanScalableMatrixWithTieredPricing(newPlanScalableMatrixWithTieredPricing: NewPlanScalableMatrixWithTieredPricingPrice): T

            fun visitNewPlanCumulativeGroupedBulk(newPlanCumulativeGroupedBulk: NewPlanCumulativeGroupedBulkPrice): T

            /**
             * Maps an unknown variant of [Price] to a value of type [T].
             *
             * An instance of [Price] can contain an unknown variant if it was deserialized
             * from data that doesn't match any known variant. For example, if the SDK is on an
             * older version than the API, then the API may respond with new variants that the
             * SDK is unaware of.
             *
             * @throws OrbInvalidDataException in the default implementation.
             */
            fun unknown(json: JsonValue?): T {
              throw OrbInvalidDataException("Unknown Price: $json")
            }
        }

        internal class Deserializer : BaseDeserializer<Price>(Price::class) {

            override fun ObjectCodec.deserialize(node: JsonNode): Price {
              val json = JsonValue.fromJsonNode(node)
              val modelType = json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

              when (modelType) {
                  "unit" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanUnitPrice>()){ it.validate() }?.let {
                          return Price(newPlanUnit = it, _json = json)
                      }
                  }
                  "package" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanPackagePrice>()){ it.validate() }?.let {
                          return Price(newPlanPackage = it, _json = json)
                      }
                  }
                  "matrix" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanMatrixPrice>()){ it.validate() }?.let {
                          return Price(newPlanMatrix = it, _json = json)
                      }
                  }
                  "tiered" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanTieredPrice>()){ it.validate() }?.let {
                          return Price(newPlanTiered = it, _json = json)
                      }
                  }
                  "tiered_bps" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanTieredBpsPrice>()){ it.validate() }?.let {
                          return Price(newPlanTieredBps = it, _json = json)
                      }
                  }
                  "bps" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanBpsPrice>()){ it.validate() }?.let {
                          return Price(newPlanBps = it, _json = json)
                      }
                  }
                  "bulk_bps" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanBulkBpsPrice>()){ it.validate() }?.let {
                          return Price(newPlanBulkBps = it, _json = json)
                      }
                  }
                  "bulk" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanBulkPrice>()){ it.validate() }?.let {
                          return Price(newPlanBulk = it, _json = json)
                      }
                  }
                  "threshold_total_amount" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanThresholdTotalAmountPrice>()){ it.validate() }?.let {
                          return Price(newPlanThresholdTotalAmount = it, _json = json)
                      }
                  }
                  "tiered_package" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanTieredPackagePrice>()){ it.validate() }?.let {
                          return Price(newPlanTieredPackage = it, _json = json)
                      }
                  }
                  "tiered_with_minimum" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanTieredWithMinimumPrice>()){ it.validate() }?.let {
                          return Price(newPlanTieredWithMinimum = it, _json = json)
                      }
                  }
                  "unit_with_percent" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanUnitWithPercentPrice>()){ it.validate() }?.let {
                          return Price(newPlanUnitWithPercent = it, _json = json)
                      }
                  }
                  "package_with_allocation" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanPackageWithAllocationPrice>()){ it.validate() }?.let {
                          return Price(newPlanPackageWithAllocation = it, _json = json)
                      }
                  }
                  "tiered_with_proration" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanTierWithProrationPrice>()){ it.validate() }?.let {
                          return Price(newPlanTierWithProration = it, _json = json)
                      }
                  }
                  "unit_with_proration" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanUnitWithProrationPrice>()){ it.validate() }?.let {
                          return Price(newPlanUnitWithProration = it, _json = json)
                      }
                  }
                  "grouped_allocation" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanGroupedAllocationPrice>()){ it.validate() }?.let {
                          return Price(newPlanGroupedAllocation = it, _json = json)
                      }
                  }
                  "grouped_with_prorated_minimum" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanGroupedWithProratedMinimumPrice>()){ it.validate() }?.let {
                          return Price(newPlanGroupedWithProratedMinimum = it, _json = json)
                      }
                  }
                  "grouped_with_metered_minimum" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanGroupedWithMeteredMinimumPrice>()){ it.validate() }?.let {
                          return Price(newPlanGroupedWithMeteredMinimum = it, _json = json)
                      }
                  }
                  "matrix_with_display_name" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanMatrixWithDisplayNamePrice>()){ it.validate() }?.let {
                          return Price(newPlanMatrixWithDisplayName = it, _json = json)
                      }
                  }
                  "bulk_with_proration" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanBulkWithProrationPrice>()){ it.validate() }?.let {
                          return Price(newPlanBulkWithProration = it, _json = json)
                      }
                  }
                  "grouped_tiered_package" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanGroupedTieredPackagePrice>()){ it.validate() }?.let {
                          return Price(newPlanGroupedTieredPackage = it, _json = json)
                      }
                  }
                  "max_group_tiered_package" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanMaxGroupTieredPackagePrice>()){ it.validate() }?.let {
                          return Price(newPlanMaxGroupTieredPackage = it, _json = json)
                      }
                  }
                  "scalable_matrix_with_unit_pricing" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanScalableMatrixWithUnitPricingPrice>()){ it.validate() }?.let {
                          return Price(newPlanScalableMatrixWithUnitPricing = it, _json = json)
                      }
                  }
                  "scalable_matrix_with_tiered_pricing" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanScalableMatrixWithTieredPricingPrice>()){ it.validate() }?.let {
                          return Price(newPlanScalableMatrixWithTieredPricing = it, _json = json)
                      }
                  }
                  "cumulative_grouped_bulk" -> {
                      tryDeserialize(node, jacksonTypeRef<NewPlanCumulativeGroupedBulkPrice>()){ it.validate() }?.let {
                          return Price(newPlanCumulativeGroupedBulk = it, _json = json)
                      }
                  }
              }

              return Price(_json = json)
            }
        }

        internal class Serializer : BaseSerializer<Price>(Price::class) {

            override fun serialize(value: Price, generator: JsonGenerator, provider: SerializerProvider) {
              when {
                  value.newPlanUnit != null -> generator.writeObject(value.newPlanUnit)
                  value.newPlanPackage != null -> generator.writeObject(value.newPlanPackage)
                  value.newPlanMatrix != null -> generator.writeObject(value.newPlanMatrix)
                  value.newPlanTiered != null -> generator.writeObject(value.newPlanTiered)
                  value.newPlanTieredBps != null -> generator.writeObject(value.newPlanTieredBps)
                  value.newPlanBps != null -> generator.writeObject(value.newPlanBps)
                  value.newPlanBulkBps != null -> generator.writeObject(value.newPlanBulkBps)
                  value.newPlanBulk != null -> generator.writeObject(value.newPlanBulk)
                  value.newPlanThresholdTotalAmount != null -> generator.writeObject(value.newPlanThresholdTotalAmount)
                  value.newPlanTieredPackage != null -> generator.writeObject(value.newPlanTieredPackage)
                  value.newPlanTieredWithMinimum != null -> generator.writeObject(value.newPlanTieredWithMinimum)
                  value.newPlanUnitWithPercent != null -> generator.writeObject(value.newPlanUnitWithPercent)
                  value.newPlanPackageWithAllocation != null -> generator.writeObject(value.newPlanPackageWithAllocation)
                  value.newPlanTierWithProration != null -> generator.writeObject(value.newPlanTierWithProration)
                  value.newPlanUnitWithProration != null -> generator.writeObject(value.newPlanUnitWithProration)
                  value.newPlanGroupedAllocation != null -> generator.writeObject(value.newPlanGroupedAllocation)
                  value.newPlanGroupedWithProratedMinimum != null -> generator.writeObject(value.newPlanGroupedWithProratedMinimum)
                  value.newPlanGroupedWithMeteredMinimum != null -> generator.writeObject(value.newPlanGroupedWithMeteredMinimum)
                  value.newPlanMatrixWithDisplayName != null -> generator.writeObject(value.newPlanMatrixWithDisplayName)
                  value.newPlanBulkWithProration != null -> generator.writeObject(value.newPlanBulkWithProration)
                  value.newPlanGroupedTieredPackage != null -> generator.writeObject(value.newPlanGroupedTieredPackage)
                  value.newPlanMaxGroupTieredPackage != null -> generator.writeObject(value.newPlanMaxGroupTieredPackage)
                  value.newPlanScalableMatrixWithUnitPricing != null -> generator.writeObject(value.newPlanScalableMatrixWithUnitPricing)
                  value.newPlanScalableMatrixWithTieredPricing != null -> generator.writeObject(value.newPlanScalableMatrixWithTieredPricing)
                  value.newPlanCumulativeGroupedBulk != null -> generator.writeObject(value.newPlanCumulativeGroupedBulk)
                  value._json != null -> generator.writeObject(value._json)
                  else -> throw IllegalStateException("Invalid Price")
              }
            }
        }

        @NoAutoDetect
        class NewPlanUnitPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("unit_config") @ExcludeMissing private val unitConfig: JsonField<UnitConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun unitConfig(): UnitConfig = unitConfig.getRequired("unit_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("unit_config")
            @ExcludeMissing
            fun _unitConfig(): JsonField<UnitConfig> = unitConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanUnitPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [NewPlanUnitPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .unitConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanUnitPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var unitConfig: JsonField<UnitConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanUnitPrice: NewPlanUnitPrice) =
                    apply {
                        cadence = newPlanUnitPrice.cadence
                        itemId = newPlanUnitPrice.itemId
                        modelType = newPlanUnitPrice.modelType
                        name = newPlanUnitPrice.name
                        unitConfig = newPlanUnitPrice.unitConfig
                        billableMetricId = newPlanUnitPrice.billableMetricId
                        billedInAdvance = newPlanUnitPrice.billedInAdvance
                        billingCycleConfiguration = newPlanUnitPrice.billingCycleConfiguration
                        conversionRate = newPlanUnitPrice.conversionRate
                        currency = newPlanUnitPrice.currency
                        externalPriceId = newPlanUnitPrice.externalPriceId
                        fixedPriceQuantity = newPlanUnitPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanUnitPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanUnitPrice.invoicingCycleConfiguration
                        metadata = newPlanUnitPrice.metadata
                        additionalProperties = newPlanUnitPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun unitConfig(unitConfig: UnitConfig) = unitConfig(JsonField.of(unitConfig))

                fun unitConfig(unitConfig: JsonField<UnitConfig>) =
                    apply {
                        this.unitConfig = unitConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanUnitPrice =
                    NewPlanUnitPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "unitConfig", unitConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val UNIT = of("unit")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    UNIT,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    UNIT,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        UNIT -> Value.UNIT
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        UNIT -> Known.UNIT
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class UnitConfig @JsonCreator private constructor(
                @JsonProperty("unit_amount") @ExcludeMissing private val unitAmount: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** Rate per unit of usage */
                fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                /** Rate per unit of usage */
                @JsonProperty("unit_amount")
                @ExcludeMissing
                fun _unitAmount(): JsonField<String> = unitAmount

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): UnitConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        unitAmount()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [UnitConfig].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .unitAmount()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [UnitConfig]. */
                class Builder internal constructor() {

                    private var unitAmount: JsonField<String>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(unitConfig: UnitConfig) =
                        apply {
                            unitAmount = unitConfig.unitAmount
                            additionalProperties = unitConfig.additionalProperties.toMutableMap()
                        }

                    /** Rate per unit of usage */
                    fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                    /** Rate per unit of usage */
                    fun unitAmount(unitAmount: JsonField<String>) =
                        apply {
                            this.unitAmount = unitAmount
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): UnitConfig =
                        UnitConfig(
                          checkRequired(
                            "unitAmount", unitAmount
                          ), additionalProperties.toImmutable()
                        )
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanUnitPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitConfig == other.unitConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanUnitPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitConfig=$unitConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanPackagePrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("package_config") @ExcludeMissing private val packageConfig: JsonField<PackageConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun packageConfig(): PackageConfig = packageConfig.getRequired("package_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("package_config")
            @ExcludeMissing
            fun _packageConfig(): JsonField<PackageConfig> = packageConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanPackagePrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    packageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [NewPlanPackagePrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .packageConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanPackagePrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var packageConfig: JsonField<PackageConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanPackagePrice: NewPlanPackagePrice) =
                    apply {
                        cadence = newPlanPackagePrice.cadence
                        itemId = newPlanPackagePrice.itemId
                        modelType = newPlanPackagePrice.modelType
                        name = newPlanPackagePrice.name
                        packageConfig = newPlanPackagePrice.packageConfig
                        billableMetricId = newPlanPackagePrice.billableMetricId
                        billedInAdvance = newPlanPackagePrice.billedInAdvance
                        billingCycleConfiguration = newPlanPackagePrice.billingCycleConfiguration
                        conversionRate = newPlanPackagePrice.conversionRate
                        currency = newPlanPackagePrice.currency
                        externalPriceId = newPlanPackagePrice.externalPriceId
                        fixedPriceQuantity = newPlanPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanPackagePrice.invoicingCycleConfiguration
                        metadata = newPlanPackagePrice.metadata
                        additionalProperties = newPlanPackagePrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun packageConfig(packageConfig: PackageConfig) = packageConfig(JsonField.of(packageConfig))

                fun packageConfig(packageConfig: JsonField<PackageConfig>) =
                    apply {
                        this.packageConfig = packageConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanPackagePrice =
                    NewPlanPackagePrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "packageConfig", packageConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val PACKAGE = of("package")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    PACKAGE,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    PACKAGE,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        PACKAGE -> Value.PACKAGE
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        PACKAGE -> Known.PACKAGE
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class PackageConfig @JsonCreator private constructor(
                @JsonProperty("package_amount") @ExcludeMissing private val packageAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_size") @ExcludeMissing private val packageSize: JsonField<Long> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** A currency amount to rate usage by */
                fun packageAmount(): String = packageAmount.getRequired("package_amount")

                /**
                 * An integer amount to represent package size. For example, 1000 here would divide
                 * usage by 1000 before multiplying by package_amount in rating
                 */
                fun packageSize(): Long = packageSize.getRequired("package_size")

                /** A currency amount to rate usage by */
                @JsonProperty("package_amount")
                @ExcludeMissing
                fun _packageAmount(): JsonField<String> = packageAmount

                /**
                 * An integer amount to represent package size. For example, 1000 here would divide
                 * usage by 1000 before multiplying by package_amount in rating
                 */
                @JsonProperty("package_size")
                @ExcludeMissing
                fun _packageSize(): JsonField<Long> = packageSize

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): PackageConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        packageAmount()
                        packageSize()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [PackageConfig].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .packageAmount()
                     * .packageSize()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [PackageConfig]. */
                class Builder internal constructor() {

                    private var packageAmount: JsonField<String>? = null
                    private var packageSize: JsonField<Long>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(packageConfig: PackageConfig) =
                        apply {
                            packageAmount = packageConfig.packageAmount
                            packageSize = packageConfig.packageSize
                            additionalProperties = packageConfig.additionalProperties.toMutableMap()
                        }

                    /** A currency amount to rate usage by */
                    fun packageAmount(packageAmount: String) = packageAmount(JsonField.of(packageAmount))

                    /** A currency amount to rate usage by */
                    fun packageAmount(packageAmount: JsonField<String>) =
                        apply {
                            this.packageAmount = packageAmount
                        }

                    /**
                     * An integer amount to represent package size. For example, 1000 here would divide
                     * usage by 1000 before multiplying by package_amount in rating
                     */
                    fun packageSize(packageSize: Long) = packageSize(JsonField.of(packageSize))

                    /**
                     * An integer amount to represent package size. For example, 1000 here would divide
                     * usage by 1000 before multiplying by package_amount in rating
                     */
                    fun packageSize(packageSize: JsonField<Long>) =
                        apply {
                            this.packageSize = packageSize
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): PackageConfig =
                        PackageConfig(
                          checkRequired(
                            "packageAmount", packageAmount
                          ),
                          checkRequired(
                            "packageSize", packageSize
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageConfig == other.packageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageConfig=$packageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanMatrixPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("matrix_config") @ExcludeMissing private val matrixConfig: JsonField<MatrixConfig> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun matrixConfig(): MatrixConfig = matrixConfig.getRequired("matrix_config")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("matrix_config")
            @ExcludeMissing
            fun _matrixConfig(): JsonField<MatrixConfig> = matrixConfig

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanMatrixPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    matrixConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [NewPlanMatrixPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .matrixConfig()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanMatrixPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var matrixConfig: JsonField<MatrixConfig>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanMatrixPrice: NewPlanMatrixPrice) =
                    apply {
                        cadence = newPlanMatrixPrice.cadence
                        itemId = newPlanMatrixPrice.itemId
                        matrixConfig = newPlanMatrixPrice.matrixConfig
                        modelType = newPlanMatrixPrice.modelType
                        name = newPlanMatrixPrice.name
                        billableMetricId = newPlanMatrixPrice.billableMetricId
                        billedInAdvance = newPlanMatrixPrice.billedInAdvance
                        billingCycleConfiguration = newPlanMatrixPrice.billingCycleConfiguration
                        conversionRate = newPlanMatrixPrice.conversionRate
                        currency = newPlanMatrixPrice.currency
                        externalPriceId = newPlanMatrixPrice.externalPriceId
                        fixedPriceQuantity = newPlanMatrixPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanMatrixPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanMatrixPrice.invoicingCycleConfiguration
                        metadata = newPlanMatrixPrice.metadata
                        additionalProperties = newPlanMatrixPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun matrixConfig(matrixConfig: MatrixConfig) = matrixConfig(JsonField.of(matrixConfig))

                fun matrixConfig(matrixConfig: JsonField<MatrixConfig>) =
                    apply {
                        this.matrixConfig = matrixConfig
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanMatrixPrice =
                    NewPlanMatrixPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "matrixConfig", matrixConfig
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class MatrixConfig @JsonCreator private constructor(
                @JsonProperty("default_unit_amount") @ExcludeMissing private val defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("dimensions") @ExcludeMissing private val dimensions: JsonField<List<String?>> = JsonMissing.of(),
                @JsonProperty("matrix_values") @ExcludeMissing private val matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** Default per unit rate for any usage not bucketed into a specified matrix_value */
                fun defaultUnitAmount(): String = defaultUnitAmount.getRequired("default_unit_amount")

                /** One or two event property values to evaluate matrix groups by */
                fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                /** Matrix values for specified matrix grouping keys */
                fun matrixValues(): List<MatrixValue> = matrixValues.getRequired("matrix_values")

                /** Default per unit rate for any usage not bucketed into a specified matrix_value */
                @JsonProperty("default_unit_amount")
                @ExcludeMissing
                fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                /** One or two event property values to evaluate matrix groups by */
                @JsonProperty("dimensions")
                @ExcludeMissing
                fun _dimensions(): JsonField<List<String?>> = dimensions

                /** Matrix values for specified matrix grouping keys */
                @JsonProperty("matrix_values")
                @ExcludeMissing
                fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): MatrixConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        defaultUnitAmount()
                        dimensions()
                        matrixValues().forEach { it.validate() }
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [MatrixConfig].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .defaultUnitAmount()
                     * .dimensions()
                     * .matrixValues()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [MatrixConfig]. */
                class Builder internal constructor() {

                    private var defaultUnitAmount: JsonField<String>? = null
                    private var dimensions: JsonField<MutableList<String?>>? = null
                    private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(matrixConfig: MatrixConfig) =
                        apply {
                            defaultUnitAmount = matrixConfig.defaultUnitAmount
                            dimensions = matrixConfig.dimensions.map { it.toMutableList() }
                            matrixValues = matrixConfig.matrixValues.map { it.toMutableList() }
                            additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                        }

                    /** Default per unit rate for any usage not bucketed into a specified matrix_value */
                    fun defaultUnitAmount(defaultUnitAmount: String) = defaultUnitAmount(JsonField.of(defaultUnitAmount))

                    /** Default per unit rate for any usage not bucketed into a specified matrix_value */
                    fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) =
                        apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(dimensions: List<String?>) = dimensions(JsonField.of(dimensions))

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(dimensions: JsonField<List<String?>>) =
                        apply {
                            this.dimensions = dimensions.map { it.toMutableList() }
                        }

                    /** One or two event property values to evaluate matrix groups by */
                    fun addDimension(dimension: String) =
                        apply {
                            dimensions = (dimensions ?: JsonField.of(mutableListOf())).also {
                                checkKnown("dimensions", it).add(dimension)
                            }
                        }

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(matrixValues: List<MatrixValue>) = matrixValues(JsonField.of(matrixValues))

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) =
                        apply {
                            this.matrixValues = matrixValues.map { it.toMutableList() }
                        }

                    /** Matrix values for specified matrix grouping keys */
                    fun addMatrixValue(matrixValue: MatrixValue) =
                        apply {
                            matrixValues = (matrixValues ?: JsonField.of(mutableListOf())).also {
                                checkKnown("matrixValues", it).add(matrixValue)
                            }
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): MatrixConfig =
                        MatrixConfig(
                          checkRequired(
                            "defaultUnitAmount", defaultUnitAmount
                          ),
                          checkRequired(
                            "dimensions", dimensions
                          ).map { it.toImmutable() },
                          checkRequired(
                            "matrixValues", matrixValues
                          ).map { it.toImmutable() },
                          additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class MatrixValue @JsonCreator private constructor(
                    @JsonProperty("dimension_values") @ExcludeMissing private val dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("unit_amount") @ExcludeMissing private val unitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

                ) {

                    /**
                     * One or two matrix keys to filter usage to this Matrix value by. For example,
                     * ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                     * instance tier.
                     */
                    fun dimensionValues(): List<String?> = dimensionValues.getRequired("dimension_values")

                    /** Unit price for the specified dimension_values */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /**
                     * One or two matrix keys to filter usage to this Matrix value by. For example,
                     * ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                     * instance tier.
                     */
                    @JsonProperty("dimension_values")
                    @ExcludeMissing
                    fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                    /** Unit price for the specified dimension_values */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixValue =
                        apply {
                            if (validated) {
                              return@apply
                            }

                            dimensionValues()
                            unitAmount()
                            validated = true
                        }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [MatrixValue].
                         *
                         * The following fields are required:
                         *
                         * ```java
                         * .dimensionValues()
                         * .unitAmount()
                         * ```
                         */
                        @JvmStatic
                        fun builder() = Builder()
                    }

                    /** A builder for [MatrixValue]. */
                    class Builder internal constructor() {

                        private var dimensionValues: JsonField<MutableList<String?>>? = null
                        private var unitAmount: JsonField<String>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixValue: MatrixValue) =
                            apply {
                                dimensionValues = matrixValue.dimensionValues.map { it.toMutableList() }
                                unitAmount = matrixValue.unitAmount
                                additionalProperties = matrixValue.additionalProperties.toMutableMap()
                            }

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For example,
                         * ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                         * instance tier.
                         */
                        fun dimensionValues(dimensionValues: List<String?>) = dimensionValues(JsonField.of(dimensionValues))

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For example,
                         * ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                         * instance tier.
                         */
                        fun dimensionValues(dimensionValues: JsonField<List<String?>>) =
                            apply {
                                this.dimensionValues = dimensionValues.map { it.toMutableList() }
                            }

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For example,
                         * ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                         * instance tier.
                         */
                        fun addDimensionValue(dimensionValue: String) =
                            apply {
                                dimensionValues = (dimensionValues ?: JsonField.of(mutableListOf())).also {
                                    checkKnown("dimensionValues", it).add(dimensionValue)
                                }
                            }

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(unitAmount: JsonField<String>) =
                            apply {
                                this.unitAmount = unitAmount
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) =
                            apply {
                                additionalProperties.put(key, value)
                            }

                        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        fun removeAdditionalProperty(key: String) =
                            apply {
                                additionalProperties.remove(key)
                            }

                        fun removeAllAdditionalProperties(keys: Set<String>) =
                            apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                        fun build(): MatrixValue =
                            MatrixValue(
                              checkRequired(
                                "dimensionValues", dimensionValues
                              ).map { it.toImmutable() },
                              checkRequired(
                                "unitAmount", unitAmount
                              ),
                              additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is MatrixConfig && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "MatrixConfig{defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val MATRIX = of("matrix")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    MATRIX,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    MATRIX,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        MATRIX -> Value.MATRIX
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        MATRIX -> Known.MATRIX
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanMatrixPrice && cadence == other.cadence && itemId == other.itemId && matrixConfig == other.matrixConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, matrixConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanMatrixPrice{cadence=$cadence, itemId=$itemId, matrixConfig=$matrixConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanTieredPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("tiered_config") @ExcludeMissing private val tieredConfig: JsonField<TieredConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun tieredConfig(): TieredConfig = tieredConfig.getRequired("tiered_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("tiered_config")
            @ExcludeMissing
            fun _tieredConfig(): JsonField<TieredConfig> = tieredConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanTieredPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [NewPlanTieredPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .tieredConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanTieredPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var tieredConfig: JsonField<TieredConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanTieredPrice: NewPlanTieredPrice) =
                    apply {
                        cadence = newPlanTieredPrice.cadence
                        itemId = newPlanTieredPrice.itemId
                        modelType = newPlanTieredPrice.modelType
                        name = newPlanTieredPrice.name
                        tieredConfig = newPlanTieredPrice.tieredConfig
                        billableMetricId = newPlanTieredPrice.billableMetricId
                        billedInAdvance = newPlanTieredPrice.billedInAdvance
                        billingCycleConfiguration = newPlanTieredPrice.billingCycleConfiguration
                        conversionRate = newPlanTieredPrice.conversionRate
                        currency = newPlanTieredPrice.currency
                        externalPriceId = newPlanTieredPrice.externalPriceId
                        fixedPriceQuantity = newPlanTieredPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanTieredPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanTieredPrice.invoicingCycleConfiguration
                        metadata = newPlanTieredPrice.metadata
                        additionalProperties = newPlanTieredPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun tieredConfig(tieredConfig: TieredConfig) = tieredConfig(JsonField.of(tieredConfig))

                fun tieredConfig(tieredConfig: JsonField<TieredConfig>) =
                    apply {
                        this.tieredConfig = tieredConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanTieredPrice =
                    NewPlanTieredPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "tieredConfig", tieredConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val TIERED = of("tiered")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    TIERED,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    TIERED,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        TIERED -> Value.TIERED
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        TIERED -> Known.TIERED
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class TieredConfig @JsonCreator private constructor(
                @JsonProperty("tiers") @ExcludeMissing private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** Tiers for rating based on total usage quantities into the specified tier */
                fun tiers(): List<Tier> = tiers.getRequired("tiers")

                /** Tiers for rating based on total usage quantities into the specified tier */
                @JsonProperty("tiers")
                @ExcludeMissing
                fun _tiers(): JsonField<List<Tier>> = tiers

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): TieredConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [TieredConfig].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .tiers()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [TieredConfig]. */
                class Builder internal constructor() {

                    private var tiers: JsonField<MutableList<Tier>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredConfig: TieredConfig) =
                        apply {
                            tiers = tieredConfig.tiers.map { it.toMutableList() }
                            additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                        }

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun tiers(tiers: JsonField<List<Tier>>) =
                        apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun addTier(tier: Tier) =
                        apply {
                            tiers = (tiers ?: JsonField.of(mutableListOf())).also {
                                checkKnown("tiers", it).add(tier)
                            }
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): TieredConfig =
                        TieredConfig(
                          checkRequired(
                            "tiers", tiers
                          ).map { it.toImmutable() }, additionalProperties.toImmutable()
                        )
                }

                @NoAutoDetect
                class Tier @JsonCreator private constructor(
                    @JsonProperty("first_unit") @ExcludeMissing private val firstUnit: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("unit_amount") @ExcludeMissing private val unitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("last_unit") @ExcludeMissing private val lastUnit: JsonField<Double> = JsonMissing.of(),
                    @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

                ) {

                    /** Inclusive tier starting value */
                    fun firstUnit(): Double = firstUnit.getRequired("first_unit")

                    /** Amount per unit */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /** Exclusive tier ending value. If null, this is treated as the last tier */
                    fun lastUnit(): Optional<Double> = Optional.ofNullable(lastUnit.getNullable("last_unit"))

                    /** Inclusive tier starting value */
                    @JsonProperty("first_unit")
                    @ExcludeMissing
                    fun _firstUnit(): JsonField<Double> = firstUnit

                    /** Amount per unit */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    /** Exclusive tier ending value. If null, this is treated as the last tier */
                    @JsonProperty("last_unit")
                    @ExcludeMissing
                    fun _lastUnit(): JsonField<Double> = lastUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Tier =
                        apply {
                            if (validated) {
                              return@apply
                            }

                            firstUnit()
                            unitAmount()
                            lastUnit()
                            validated = true
                        }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [Tier].
                         *
                         * The following fields are required:
                         *
                         * ```java
                         * .firstUnit()
                         * .unitAmount()
                         * ```
                         */
                        @JvmStatic
                        fun builder() = Builder()
                    }

                    /** A builder for [Tier]. */
                    class Builder internal constructor() {

                        private var firstUnit: JsonField<Double>? = null
                        private var unitAmount: JsonField<String>? = null
                        private var lastUnit: JsonField<Double> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tier: Tier) =
                            apply {
                                firstUnit = tier.firstUnit
                                unitAmount = tier.unitAmount
                                lastUnit = tier.lastUnit
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                        /** Inclusive tier starting value */
                        fun firstUnit(firstUnit: Double) = firstUnit(JsonField.of(firstUnit))

                        /** Inclusive tier starting value */
                        fun firstUnit(firstUnit: JsonField<Double>) =
                            apply {
                                this.firstUnit = firstUnit
                            }

                        /** Amount per unit */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /** Amount per unit */
                        fun unitAmount(unitAmount: JsonField<String>) =
                            apply {
                                this.unitAmount = unitAmount
                            }

                        /** Exclusive tier ending value. If null, this is treated as the last tier */
                        fun lastUnit(lastUnit: Double?) = lastUnit(JsonField.ofNullable(lastUnit))

                        /** Exclusive tier ending value. If null, this is treated as the last tier */
                        fun lastUnit(lastUnit: Double) = lastUnit(lastUnit as Double?)

                        /** Exclusive tier ending value. If null, this is treated as the last tier */
                        fun lastUnit(lastUnit: Optional<Double>) = lastUnit(lastUnit.getOrNull())

                        /** Exclusive tier ending value. If null, this is treated as the last tier */
                        fun lastUnit(lastUnit: JsonField<Double>) =
                            apply {
                                this.lastUnit = lastUnit
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) =
                            apply {
                                additionalProperties.put(key, value)
                            }

                        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        fun removeAdditionalProperty(key: String) =
                            apply {
                                additionalProperties.remove(key)
                            }

                        fun removeAllAdditionalProperties(keys: Set<String>) =
                            apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                        fun build(): Tier =
                            Tier(
                              checkRequired(
                                "firstUnit", firstUnit
                              ),
                              checkRequired(
                                "unitAmount", unitAmount
                              ),
                              lastUnit,
                              additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && unitAmount == other.unitAmount && lastUnit == other.lastUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(firstUnit, unitAmount, lastUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Tier{firstUnit=$firstUnit, unitAmount=$unitAmount, lastUnit=$lastUnit, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanTieredPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredConfig == other.tieredConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanTieredPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredConfig=$tieredConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanTieredBpsPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("tiered_bps_config") @ExcludeMissing private val tieredBpsConfig: JsonField<TieredBpsConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun tieredBpsConfig(): TieredBpsConfig = tieredBpsConfig.getRequired("tiered_bps_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("tiered_bps_config")
            @ExcludeMissing
            fun _tieredBpsConfig(): JsonField<TieredBpsConfig> = tieredBpsConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanTieredBpsPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredBpsConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanTieredBpsPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .tieredBpsConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanTieredBpsPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var tieredBpsConfig: JsonField<TieredBpsConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanTieredBpsPrice: NewPlanTieredBpsPrice) =
                    apply {
                        cadence = newPlanTieredBpsPrice.cadence
                        itemId = newPlanTieredBpsPrice.itemId
                        modelType = newPlanTieredBpsPrice.modelType
                        name = newPlanTieredBpsPrice.name
                        tieredBpsConfig = newPlanTieredBpsPrice.tieredBpsConfig
                        billableMetricId = newPlanTieredBpsPrice.billableMetricId
                        billedInAdvance = newPlanTieredBpsPrice.billedInAdvance
                        billingCycleConfiguration = newPlanTieredBpsPrice.billingCycleConfiguration
                        conversionRate = newPlanTieredBpsPrice.conversionRate
                        currency = newPlanTieredBpsPrice.currency
                        externalPriceId = newPlanTieredBpsPrice.externalPriceId
                        fixedPriceQuantity = newPlanTieredBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanTieredBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanTieredBpsPrice.invoicingCycleConfiguration
                        metadata = newPlanTieredBpsPrice.metadata
                        additionalProperties = newPlanTieredBpsPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) = tieredBpsConfig(JsonField.of(tieredBpsConfig))

                fun tieredBpsConfig(tieredBpsConfig: JsonField<TieredBpsConfig>) =
                    apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanTieredBpsPrice =
                    NewPlanTieredBpsPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "tieredBpsConfig", tieredBpsConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val TIERED_BPS = of("tiered_bps")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    TIERED_BPS,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    TIERED_BPS,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        TIERED_BPS -> Value.TIERED_BPS
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        TIERED_BPS -> Known.TIERED_BPS
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class TieredBpsConfig @JsonCreator private constructor(
                @JsonProperty("tiers") @ExcludeMissing private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /**
                 * Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                 * tiers
                 */
                fun tiers(): List<Tier> = tiers.getRequired("tiers")

                /**
                 * Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                 * tiers
                 */
                @JsonProperty("tiers")
                @ExcludeMissing
                fun _tiers(): JsonField<List<Tier>> = tiers

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): TieredBpsConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [TieredBpsConfig].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .tiers()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [TieredBpsConfig]. */
                class Builder internal constructor() {

                    private var tiers: JsonField<MutableList<Tier>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredBpsConfig: TieredBpsConfig) =
                        apply {
                            tiers = tieredBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties = tieredBpsConfig.additionalProperties.toMutableMap()
                        }

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                     * tiers
                     */
                    fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                     * tiers
                     */
                    fun tiers(tiers: JsonField<List<Tier>>) =
                        apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                     * tiers
                     */
                    fun addTier(tier: Tier) =
                        apply {
                            tiers = (tiers ?: JsonField.of(mutableListOf())).also {
                                checkKnown("tiers", it).add(tier)
                            }
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): TieredBpsConfig =
                        TieredBpsConfig(
                          checkRequired(
                            "tiers", tiers
                          ).map { it.toImmutable() }, additionalProperties.toImmutable()
                        )
                }

                @NoAutoDetect
                class Tier @JsonCreator private constructor(
                    @JsonProperty("bps") @ExcludeMissing private val bps: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("minimum_amount") @ExcludeMissing private val minimumAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("maximum_amount") @ExcludeMissing private val maximumAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("per_unit_maximum") @ExcludeMissing private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

                ) {

                    /** Per-event basis point rate */
                    fun bps(): Double = bps.getRequired("bps")

                    /** Inclusive tier starting value */
                    fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                    /** Exclusive tier ending value */
                    fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                    /** Per unit maximum to charge */
                    fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                    /** Per-event basis point rate */
                    @JsonProperty("bps")
                    @ExcludeMissing
                    fun _bps(): JsonField<Double> = bps

                    /** Inclusive tier starting value */
                    @JsonProperty("minimum_amount")
                    @ExcludeMissing
                    fun _minimumAmount(): JsonField<String> = minimumAmount

                    /** Exclusive tier ending value */
                    @JsonProperty("maximum_amount")
                    @ExcludeMissing
                    fun _maximumAmount(): JsonField<String> = maximumAmount

                    /** Per unit maximum to charge */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Tier =
                        apply {
                            if (validated) {
                              return@apply
                            }

                            bps()
                            minimumAmount()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [Tier].
                         *
                         * The following fields are required:
                         *
                         * ```java
                         * .bps()
                         * .minimumAmount()
                         * ```
                         */
                        @JvmStatic
                        fun builder() = Builder()
                    }

                    /** A builder for [Tier]. */
                    class Builder internal constructor() {

                        private var bps: JsonField<Double>? = null
                        private var minimumAmount: JsonField<String>? = null
                        private var maximumAmount: JsonField<String> = JsonMissing.of()
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tier: Tier) =
                            apply {
                                bps = tier.bps
                                minimumAmount = tier.minimumAmount
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                        /** Per-event basis point rate */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /** Per-event basis point rate */
                        fun bps(bps: JsonField<Double>) =
                            apply {
                                this.bps = bps
                            }

                        /** Inclusive tier starting value */
                        fun minimumAmount(minimumAmount: String) = minimumAmount(JsonField.of(minimumAmount))

                        /** Inclusive tier starting value */
                        fun minimumAmount(minimumAmount: JsonField<String>) =
                            apply {
                                this.minimumAmount = minimumAmount
                            }

                        /** Exclusive tier ending value */
                        fun maximumAmount(maximumAmount: String?) = maximumAmount(JsonField.ofNullable(maximumAmount))

                        /** Exclusive tier ending value */
                        fun maximumAmount(maximumAmount: Optional<String>) = maximumAmount(maximumAmount.getOrNull())

                        /** Exclusive tier ending value */
                        fun maximumAmount(maximumAmount: JsonField<String>) =
                            apply {
                                this.maximumAmount = maximumAmount
                            }

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(perUnitMaximum: String?) = perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) = perUnitMaximum(perUnitMaximum.getOrNull())

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) =
                            apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) =
                            apply {
                                additionalProperties.put(key, value)
                            }

                        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        fun removeAdditionalProperty(key: String) =
                            apply {
                                additionalProperties.remove(key)
                            }

                        fun removeAllAdditionalProperties(keys: Set<String>) =
                            apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                        fun build(): Tier =
                            Tier(
                              checkRequired(
                                "bps", bps
                              ),
                              checkRequired(
                                "minimumAmount", minimumAmount
                              ),
                              maximumAmount,
                              perUnitMaximum,
                              additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is Tier && bps == other.bps && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, minimumAmount, maximumAmount, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Tier{bps=$bps, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanTieredBpsPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredBpsConfig == other.tieredBpsConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredBpsConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanTieredBpsPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredBpsConfig=$tieredBpsConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanBpsPrice @JsonCreator private constructor(
            @JsonProperty("bps_config") @ExcludeMissing private val bpsConfig: JsonField<BpsConfig> = JsonMissing.of(),
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            fun bpsConfig(): BpsConfig = bpsConfig.getRequired("bps_config")

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            @JsonProperty("bps_config")
            @ExcludeMissing
            fun _bpsConfig(): JsonField<BpsConfig> = bpsConfig

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanBpsPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    bpsConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [NewPlanBpsPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .bpsConfig()
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanBpsPrice]. */
            class Builder internal constructor() {

                private var bpsConfig: JsonField<BpsConfig>? = null
                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanBpsPrice: NewPlanBpsPrice) =
                    apply {
                        bpsConfig = newPlanBpsPrice.bpsConfig
                        cadence = newPlanBpsPrice.cadence
                        itemId = newPlanBpsPrice.itemId
                        modelType = newPlanBpsPrice.modelType
                        name = newPlanBpsPrice.name
                        billableMetricId = newPlanBpsPrice.billableMetricId
                        billedInAdvance = newPlanBpsPrice.billedInAdvance
                        billingCycleConfiguration = newPlanBpsPrice.billingCycleConfiguration
                        conversionRate = newPlanBpsPrice.conversionRate
                        currency = newPlanBpsPrice.currency
                        externalPriceId = newPlanBpsPrice.externalPriceId
                        fixedPriceQuantity = newPlanBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanBpsPrice.invoicingCycleConfiguration
                        metadata = newPlanBpsPrice.metadata
                        additionalProperties = newPlanBpsPrice.additionalProperties.toMutableMap()
                    }

                fun bpsConfig(bpsConfig: BpsConfig) = bpsConfig(JsonField.of(bpsConfig))

                fun bpsConfig(bpsConfig: JsonField<BpsConfig>) =
                    apply {
                        this.bpsConfig = bpsConfig
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanBpsPrice =
                    NewPlanBpsPrice(
                      checkRequired(
                        "bpsConfig", bpsConfig
                      ),
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            @NoAutoDetect
            class BpsConfig @JsonCreator private constructor(
                @JsonProperty("bps") @ExcludeMissing private val bps: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("per_unit_maximum") @ExcludeMissing private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** Basis point take rate per event */
                fun bps(): Double = bps.getRequired("bps")

                /** Optional currency amount maximum to cap spend per event */
                fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                /** Basis point take rate per event */
                @JsonProperty("bps")
                @ExcludeMissing
                fun _bps(): JsonField<Double> = bps

                /** Optional currency amount maximum to cap spend per event */
                @JsonProperty("per_unit_maximum")
                @ExcludeMissing
                fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BpsConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        bps()
                        perUnitMaximum()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [BpsConfig].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .bps()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BpsConfig]. */
                class Builder internal constructor() {

                    private var bps: JsonField<Double>? = null
                    private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(bpsConfig: BpsConfig) =
                        apply {
                            bps = bpsConfig.bps
                            perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                        }

                    /** Basis point take rate per event */
                    fun bps(bps: Double) = bps(JsonField.of(bps))

                    /** Basis point take rate per event */
                    fun bps(bps: JsonField<Double>) =
                        apply {
                            this.bps = bps
                        }

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(perUnitMaximum: String?) = perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(perUnitMaximum: Optional<String>) = perUnitMaximum(perUnitMaximum.getOrNull())

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(perUnitMaximum: JsonField<String>) =
                        apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BpsConfig =
                        BpsConfig(
                          checkRequired(
                            "bps", bps
                          ),
                          perUnitMaximum,
                          additionalProperties.toImmutable(),
                        )
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val BPS = of("bps")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    BPS,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    BPS,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        BPS -> Value.BPS
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        BPS -> Known.BPS
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanBpsPrice && bpsConfig == other.bpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(bpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanBpsPrice{bpsConfig=$bpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanBulkBpsPrice @JsonCreator private constructor(
            @JsonProperty("bulk_bps_config") @ExcludeMissing private val bulkBpsConfig: JsonField<BulkBpsConfig> = JsonMissing.of(),
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig.getRequired("bulk_bps_config")

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            @JsonProperty("bulk_bps_config")
            @ExcludeMissing
            fun _bulkBpsConfig(): JsonField<BulkBpsConfig> = bulkBpsConfig

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanBulkBpsPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    bulkBpsConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [NewPlanBulkBpsPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .bulkBpsConfig()
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanBulkBpsPrice]. */
            class Builder internal constructor() {

                private var bulkBpsConfig: JsonField<BulkBpsConfig>? = null
                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanBulkBpsPrice: NewPlanBulkBpsPrice) =
                    apply {
                        bulkBpsConfig = newPlanBulkBpsPrice.bulkBpsConfig
                        cadence = newPlanBulkBpsPrice.cadence
                        itemId = newPlanBulkBpsPrice.itemId
                        modelType = newPlanBulkBpsPrice.modelType
                        name = newPlanBulkBpsPrice.name
                        billableMetricId = newPlanBulkBpsPrice.billableMetricId
                        billedInAdvance = newPlanBulkBpsPrice.billedInAdvance
                        billingCycleConfiguration = newPlanBulkBpsPrice.billingCycleConfiguration
                        conversionRate = newPlanBulkBpsPrice.conversionRate
                        currency = newPlanBulkBpsPrice.currency
                        externalPriceId = newPlanBulkBpsPrice.externalPriceId
                        fixedPriceQuantity = newPlanBulkBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanBulkBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanBulkBpsPrice.invoicingCycleConfiguration
                        metadata = newPlanBulkBpsPrice.metadata
                        additionalProperties = newPlanBulkBpsPrice.additionalProperties.toMutableMap()
                    }

                fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) = bulkBpsConfig(JsonField.of(bulkBpsConfig))

                fun bulkBpsConfig(bulkBpsConfig: JsonField<BulkBpsConfig>) =
                    apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanBulkBpsPrice =
                    NewPlanBulkBpsPrice(
                      checkRequired(
                        "bulkBpsConfig", bulkBpsConfig
                      ),
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            @NoAutoDetect
            class BulkBpsConfig @JsonCreator private constructor(
                @JsonProperty("tiers") @ExcludeMissing private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /**
                 * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                 * tier based on total volume
                 */
                fun tiers(): List<Tier> = tiers.getRequired("tiers")

                /**
                 * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                 * tier based on total volume
                 */
                @JsonProperty("tiers")
                @ExcludeMissing
                fun _tiers(): JsonField<List<Tier>> = tiers

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BulkBpsConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [BulkBpsConfig].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .tiers()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BulkBpsConfig]. */
                class Builder internal constructor() {

                    private var tiers: JsonField<MutableList<Tier>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(bulkBpsConfig: BulkBpsConfig) =
                        apply {
                            tiers = bulkBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                        }

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun tiers(tiers: JsonField<List<Tier>>) =
                        apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun addTier(tier: Tier) =
                        apply {
                            tiers = (tiers ?: JsonField.of(mutableListOf())).also {
                                checkKnown("tiers", it).add(tier)
                            }
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BulkBpsConfig =
                        BulkBpsConfig(
                          checkRequired(
                            "tiers", tiers
                          ).map { it.toImmutable() }, additionalProperties.toImmutable()
                        )
                }

                @NoAutoDetect
                class Tier @JsonCreator private constructor(
                    @JsonProperty("bps") @ExcludeMissing private val bps: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("maximum_amount") @ExcludeMissing private val maximumAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("per_unit_maximum") @ExcludeMissing private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

                ) {

                    /** Basis points to rate on */
                    fun bps(): Double = bps.getRequired("bps")

                    /** Upper bound for tier */
                    fun maximumAmount(): Optional<String> = Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                    /** The maximum amount to charge for any one event */
                    fun perUnitMaximum(): Optional<String> = Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                    /** Basis points to rate on */
                    @JsonProperty("bps")
                    @ExcludeMissing
                    fun _bps(): JsonField<Double> = bps

                    /** Upper bound for tier */
                    @JsonProperty("maximum_amount")
                    @ExcludeMissing
                    fun _maximumAmount(): JsonField<String> = maximumAmount

                    /** The maximum amount to charge for any one event */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Tier =
                        apply {
                            if (validated) {
                              return@apply
                            }

                            bps()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [Tier].
                         *
                         * The following fields are required:
                         *
                         * ```java
                         * .bps()
                         * ```
                         */
                        @JvmStatic
                        fun builder() = Builder()
                    }

                    /** A builder for [Tier]. */
                    class Builder internal constructor() {

                        private var bps: JsonField<Double>? = null
                        private var maximumAmount: JsonField<String> = JsonMissing.of()
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tier: Tier) =
                            apply {
                                bps = tier.bps
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                        /** Basis points to rate on */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /** Basis points to rate on */
                        fun bps(bps: JsonField<Double>) =
                            apply {
                                this.bps = bps
                            }

                        /** Upper bound for tier */
                        fun maximumAmount(maximumAmount: String?) = maximumAmount(JsonField.ofNullable(maximumAmount))

                        /** Upper bound for tier */
                        fun maximumAmount(maximumAmount: Optional<String>) = maximumAmount(maximumAmount.getOrNull())

                        /** Upper bound for tier */
                        fun maximumAmount(maximumAmount: JsonField<String>) =
                            apply {
                                this.maximumAmount = maximumAmount
                            }

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(perUnitMaximum: String?) = perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) = perUnitMaximum(perUnitMaximum.getOrNull())

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) =
                            apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) =
                            apply {
                                additionalProperties.put(key, value)
                            }

                        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        fun removeAdditionalProperty(key: String) =
                            apply {
                                additionalProperties.remove(key)
                            }

                        fun removeAllAdditionalProperties(keys: Set<String>) =
                            apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                        fun build(): Tier =
                            Tier(
                              checkRequired(
                                "bps", bps
                              ),
                              maximumAmount,
                              perUnitMaximum,
                              additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is Tier && bps == other.bps && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, maximumAmount, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Tier{bps=$bps, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val BULK_BPS = of("bulk_bps")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    BULK_BPS,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    BULK_BPS,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        BULK_BPS -> Value.BULK_BPS
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        BULK_BPS -> Known.BULK_BPS
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanBulkBpsPrice && bulkBpsConfig == other.bulkBpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(bulkBpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanBulkBpsPrice{bulkBpsConfig=$bulkBpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanBulkPrice @JsonCreator private constructor(
            @JsonProperty("bulk_config") @ExcludeMissing private val bulkConfig: JsonField<BulkConfig> = JsonMissing.of(),
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            fun bulkConfig(): BulkConfig = bulkConfig.getRequired("bulk_config")

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            @JsonProperty("bulk_config")
            @ExcludeMissing
            fun _bulkConfig(): JsonField<BulkConfig> = bulkConfig

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanBulkPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    bulkConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of [NewPlanBulkPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .bulkConfig()
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanBulkPrice]. */
            class Builder internal constructor() {

                private var bulkConfig: JsonField<BulkConfig>? = null
                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanBulkPrice: NewPlanBulkPrice) =
                    apply {
                        bulkConfig = newPlanBulkPrice.bulkConfig
                        cadence = newPlanBulkPrice.cadence
                        itemId = newPlanBulkPrice.itemId
                        modelType = newPlanBulkPrice.modelType
                        name = newPlanBulkPrice.name
                        billableMetricId = newPlanBulkPrice.billableMetricId
                        billedInAdvance = newPlanBulkPrice.billedInAdvance
                        billingCycleConfiguration = newPlanBulkPrice.billingCycleConfiguration
                        conversionRate = newPlanBulkPrice.conversionRate
                        currency = newPlanBulkPrice.currency
                        externalPriceId = newPlanBulkPrice.externalPriceId
                        fixedPriceQuantity = newPlanBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanBulkPrice.invoicingCycleConfiguration
                        metadata = newPlanBulkPrice.metadata
                        additionalProperties = newPlanBulkPrice.additionalProperties.toMutableMap()
                    }

                fun bulkConfig(bulkConfig: BulkConfig) = bulkConfig(JsonField.of(bulkConfig))

                fun bulkConfig(bulkConfig: JsonField<BulkConfig>) =
                    apply {
                        this.bulkConfig = bulkConfig
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanBulkPrice =
                    NewPlanBulkPrice(
                      checkRequired(
                        "bulkConfig", bulkConfig
                      ),
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            @NoAutoDetect
            class BulkConfig @JsonCreator private constructor(
                @JsonProperty("tiers") @ExcludeMissing private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** Bulk tiers for rating based on total usage volume */
                fun tiers(): List<Tier> = tiers.getRequired("tiers")

                /** Bulk tiers for rating based on total usage volume */
                @JsonProperty("tiers")
                @ExcludeMissing
                fun _tiers(): JsonField<List<Tier>> = tiers

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BulkConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of [BulkConfig].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .tiers()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BulkConfig]. */
                class Builder internal constructor() {

                    private var tiers: JsonField<MutableList<Tier>>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(bulkConfig: BulkConfig) =
                        apply {
                            tiers = bulkConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                        }

                    /** Bulk tiers for rating based on total usage volume */
                    fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                    /** Bulk tiers for rating based on total usage volume */
                    fun tiers(tiers: JsonField<List<Tier>>) =
                        apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                    /** Bulk tiers for rating based on total usage volume */
                    fun addTier(tier: Tier) =
                        apply {
                            tiers = (tiers ?: JsonField.of(mutableListOf())).also {
                                checkKnown("tiers", it).add(tier)
                            }
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BulkConfig =
                        BulkConfig(
                          checkRequired(
                            "tiers", tiers
                          ).map { it.toImmutable() }, additionalProperties.toImmutable()
                        )
                }

                @NoAutoDetect
                class Tier @JsonCreator private constructor(
                    @JsonProperty("unit_amount") @ExcludeMissing private val unitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("maximum_units") @ExcludeMissing private val maximumUnits: JsonField<Double> = JsonMissing.of(),
                    @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

                ) {

                    /** Amount per unit */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /** Upper bound for this tier */
                    fun maximumUnits(): Optional<Double> = Optional.ofNullable(maximumUnits.getNullable("maximum_units"))

                    /** Amount per unit */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    /** Upper bound for this tier */
                    @JsonProperty("maximum_units")
                    @ExcludeMissing
                    fun _maximumUnits(): JsonField<Double> = maximumUnits

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Tier =
                        apply {
                            if (validated) {
                              return@apply
                            }

                            unitAmount()
                            maximumUnits()
                            validated = true
                        }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        /**
                         * Returns a mutable builder for constructing an instance of [Tier].
                         *
                         * The following fields are required:
                         *
                         * ```java
                         * .unitAmount()
                         * ```
                         */
                        @JvmStatic
                        fun builder() = Builder()
                    }

                    /** A builder for [Tier]. */
                    class Builder internal constructor() {

                        private var unitAmount: JsonField<String>? = null
                        private var maximumUnits: JsonField<Double> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tier: Tier) =
                            apply {
                                unitAmount = tier.unitAmount
                                maximumUnits = tier.maximumUnits
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                        /** Amount per unit */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /** Amount per unit */
                        fun unitAmount(unitAmount: JsonField<String>) =
                            apply {
                                this.unitAmount = unitAmount
                            }

                        /** Upper bound for this tier */
                        fun maximumUnits(maximumUnits: Double?) = maximumUnits(JsonField.ofNullable(maximumUnits))

                        /** Upper bound for this tier */
                        fun maximumUnits(maximumUnits: Double) = maximumUnits(maximumUnits as Double?)

                        /** Upper bound for this tier */
                        fun maximumUnits(maximumUnits: Optional<Double>) = maximumUnits(maximumUnits.getOrNull())

                        /** Upper bound for this tier */
                        fun maximumUnits(maximumUnits: JsonField<Double>) =
                            apply {
                                this.maximumUnits = maximumUnits
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) =
                            apply {
                                additionalProperties.put(key, value)
                            }

                        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.putAll(additionalProperties)
                            }

                        fun removeAdditionalProperty(key: String) =
                            apply {
                                additionalProperties.remove(key)
                            }

                        fun removeAllAdditionalProperties(keys: Set<String>) =
                            apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                        fun build(): Tier =
                            Tier(
                              checkRequired(
                                "unitAmount", unitAmount
                              ),
                              maximumUnits,
                              additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is Tier && unitAmount == other.unitAmount && maximumUnits == other.maximumUnits && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, maximumUnits, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Tier{unitAmount=$unitAmount, maximumUnits=$maximumUnits, additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val BULK = of("bulk")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    BULK,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    BULK,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        BULK -> Value.BULK
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        BULK -> Known.BULK
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanBulkPrice && bulkConfig == other.bulkConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(bulkConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanBulkPrice{bulkConfig=$bulkConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanThresholdTotalAmountPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("threshold_total_amount_config") @ExcludeMissing private val thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig = thresholdTotalAmountConfig.getRequired("threshold_total_amount_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("threshold_total_amount_config")
            @ExcludeMissing
            fun _thresholdTotalAmountConfig(): JsonField<ThresholdTotalAmountConfig> = thresholdTotalAmountConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanThresholdTotalAmountPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    thresholdTotalAmountConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanThresholdTotalAmountPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .thresholdTotalAmountConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanThresholdTotalAmountPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanThresholdTotalAmountPrice: NewPlanThresholdTotalAmountPrice) =
                    apply {
                        cadence = newPlanThresholdTotalAmountPrice.cadence
                        itemId = newPlanThresholdTotalAmountPrice.itemId
                        modelType = newPlanThresholdTotalAmountPrice.modelType
                        name = newPlanThresholdTotalAmountPrice.name
                        thresholdTotalAmountConfig = newPlanThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        billableMetricId = newPlanThresholdTotalAmountPrice.billableMetricId
                        billedInAdvance = newPlanThresholdTotalAmountPrice.billedInAdvance
                        billingCycleConfiguration = newPlanThresholdTotalAmountPrice.billingCycleConfiguration
                        conversionRate = newPlanThresholdTotalAmountPrice.conversionRate
                        currency = newPlanThresholdTotalAmountPrice.currency
                        externalPriceId = newPlanThresholdTotalAmountPrice.externalPriceId
                        fixedPriceQuantity = newPlanThresholdTotalAmountPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanThresholdTotalAmountPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanThresholdTotalAmountPrice.invoicingCycleConfiguration
                        metadata = newPlanThresholdTotalAmountPrice.metadata
                        additionalProperties = newPlanThresholdTotalAmountPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun thresholdTotalAmountConfig(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) = thresholdTotalAmountConfig(JsonField.of(thresholdTotalAmountConfig))

                fun thresholdTotalAmountConfig(thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>) =
                    apply {
                        this.thresholdTotalAmountConfig = thresholdTotalAmountConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanThresholdTotalAmountPrice =
                    NewPlanThresholdTotalAmountPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "thresholdTotalAmountConfig", thresholdTotalAmountConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val THRESHOLD_TOTAL_AMOUNT = of("threshold_total_amount")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    THRESHOLD_TOTAL_AMOUNT,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    THRESHOLD_TOTAL_AMOUNT,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class ThresholdTotalAmountConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): ThresholdTotalAmountConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [ThresholdTotalAmountConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [ThresholdTotalAmountConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                        apply {
                            additionalProperties = thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): ThresholdTotalAmountConfig = ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanThresholdTotalAmountPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, thresholdTotalAmountConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanThresholdTotalAmountPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanTieredPackagePrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("tiered_package_config") @ExcludeMissing private val tieredPackageConfig: JsonField<TieredPackageConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun tieredPackageConfig(): TieredPackageConfig = tieredPackageConfig.getRequired("tiered_package_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("tiered_package_config")
            @ExcludeMissing
            fun _tieredPackageConfig(): JsonField<TieredPackageConfig> = tieredPackageConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanTieredPackagePrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredPackageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanTieredPackagePrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .tieredPackageConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanTieredPackagePrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var tieredPackageConfig: JsonField<TieredPackageConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanTieredPackagePrice: NewPlanTieredPackagePrice) =
                    apply {
                        cadence = newPlanTieredPackagePrice.cadence
                        itemId = newPlanTieredPackagePrice.itemId
                        modelType = newPlanTieredPackagePrice.modelType
                        name = newPlanTieredPackagePrice.name
                        tieredPackageConfig = newPlanTieredPackagePrice.tieredPackageConfig
                        billableMetricId = newPlanTieredPackagePrice.billableMetricId
                        billedInAdvance = newPlanTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration = newPlanTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newPlanTieredPackagePrice.conversionRate
                        currency = newPlanTieredPackagePrice.currency
                        externalPriceId = newPlanTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newPlanTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newPlanTieredPackagePrice.metadata
                        additionalProperties = newPlanTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) = tieredPackageConfig(JsonField.of(tieredPackageConfig))

                fun tieredPackageConfig(tieredPackageConfig: JsonField<TieredPackageConfig>) =
                    apply {
                        this.tieredPackageConfig = tieredPackageConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanTieredPackagePrice =
                    NewPlanTieredPackagePrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "tieredPackageConfig", tieredPackageConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val TIERED_PACKAGE = of("tiered_package")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    TIERED_PACKAGE,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    TIERED_PACKAGE,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        TIERED_PACKAGE -> Value.TIERED_PACKAGE
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        TIERED_PACKAGE -> Known.TIERED_PACKAGE
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class TieredPackageConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): TieredPackageConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [TieredPackageConfig]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [TieredPackageConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredPackageConfig: TieredPackageConfig) =
                        apply {
                            additionalProperties = tieredPackageConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): TieredPackageConfig = TieredPackageConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "TieredPackageConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanTieredPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageConfig == other.tieredPackageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredPackageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanTieredPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageConfig=$tieredPackageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanTieredWithMinimumPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("tiered_with_minimum_config") @ExcludeMissing private val tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun tieredWithMinimumConfig(): TieredWithMinimumConfig = tieredWithMinimumConfig.getRequired("tiered_with_minimum_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("tiered_with_minimum_config")
            @ExcludeMissing
            fun _tieredWithMinimumConfig(): JsonField<TieredWithMinimumConfig> = tieredWithMinimumConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanTieredWithMinimumPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredWithMinimumConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanTieredWithMinimumPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .tieredWithMinimumConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanTieredWithMinimumPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanTieredWithMinimumPrice: NewPlanTieredWithMinimumPrice) =
                    apply {
                        cadence = newPlanTieredWithMinimumPrice.cadence
                        itemId = newPlanTieredWithMinimumPrice.itemId
                        modelType = newPlanTieredWithMinimumPrice.modelType
                        name = newPlanTieredWithMinimumPrice.name
                        tieredWithMinimumConfig = newPlanTieredWithMinimumPrice.tieredWithMinimumConfig
                        billableMetricId = newPlanTieredWithMinimumPrice.billableMetricId
                        billedInAdvance = newPlanTieredWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration = newPlanTieredWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newPlanTieredWithMinimumPrice.conversionRate
                        currency = newPlanTieredWithMinimumPrice.currency
                        externalPriceId = newPlanTieredWithMinimumPrice.externalPriceId
                        fixedPriceQuantity = newPlanTieredWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanTieredWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanTieredWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newPlanTieredWithMinimumPrice.metadata
                        additionalProperties = newPlanTieredWithMinimumPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) = tieredWithMinimumConfig(JsonField.of(tieredWithMinimumConfig))

                fun tieredWithMinimumConfig(tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>) =
                    apply {
                        this.tieredWithMinimumConfig = tieredWithMinimumConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanTieredWithMinimumPrice =
                    NewPlanTieredWithMinimumPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "tieredWithMinimumConfig", tieredWithMinimumConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val TIERED_WITH_MINIMUM = of("tiered_with_minimum")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    TIERED_WITH_MINIMUM,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    TIERED_WITH_MINIMUM,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class TieredWithMinimumConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): TieredWithMinimumConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [TieredWithMinimumConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [TieredWithMinimumConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        apply {
                            additionalProperties = tieredWithMinimumConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): TieredWithMinimumConfig = TieredWithMinimumConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanTieredWithMinimumPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithMinimumConfig == other.tieredWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanTieredWithMinimumPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithMinimumConfig=$tieredWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanUnitWithPercentPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("unit_with_percent_config") @ExcludeMissing private val unitWithPercentConfig: JsonField<UnitWithPercentConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun unitWithPercentConfig(): UnitWithPercentConfig = unitWithPercentConfig.getRequired("unit_with_percent_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("unit_with_percent_config")
            @ExcludeMissing
            fun _unitWithPercentConfig(): JsonField<UnitWithPercentConfig> = unitWithPercentConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanUnitWithPercentPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitWithPercentConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanUnitWithPercentPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .unitWithPercentConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanUnitWithPercentPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var unitWithPercentConfig: JsonField<UnitWithPercentConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanUnitWithPercentPrice: NewPlanUnitWithPercentPrice) =
                    apply {
                        cadence = newPlanUnitWithPercentPrice.cadence
                        itemId = newPlanUnitWithPercentPrice.itemId
                        modelType = newPlanUnitWithPercentPrice.modelType
                        name = newPlanUnitWithPercentPrice.name
                        unitWithPercentConfig = newPlanUnitWithPercentPrice.unitWithPercentConfig
                        billableMetricId = newPlanUnitWithPercentPrice.billableMetricId
                        billedInAdvance = newPlanUnitWithPercentPrice.billedInAdvance
                        billingCycleConfiguration = newPlanUnitWithPercentPrice.billingCycleConfiguration
                        conversionRate = newPlanUnitWithPercentPrice.conversionRate
                        currency = newPlanUnitWithPercentPrice.currency
                        externalPriceId = newPlanUnitWithPercentPrice.externalPriceId
                        fixedPriceQuantity = newPlanUnitWithPercentPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanUnitWithPercentPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanUnitWithPercentPrice.invoicingCycleConfiguration
                        metadata = newPlanUnitWithPercentPrice.metadata
                        additionalProperties = newPlanUnitWithPercentPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) = unitWithPercentConfig(JsonField.of(unitWithPercentConfig))

                fun unitWithPercentConfig(unitWithPercentConfig: JsonField<UnitWithPercentConfig>) =
                    apply {
                        this.unitWithPercentConfig = unitWithPercentConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanUnitWithPercentPrice =
                    NewPlanUnitWithPercentPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "unitWithPercentConfig", unitWithPercentConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val UNIT_WITH_PERCENT = of("unit_with_percent")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    UNIT_WITH_PERCENT,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    UNIT_WITH_PERCENT,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class UnitWithPercentConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): UnitWithPercentConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [UnitWithPercentConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [UnitWithPercentConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(unitWithPercentConfig: UnitWithPercentConfig) =
                        apply {
                            additionalProperties = unitWithPercentConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): UnitWithPercentConfig = UnitWithPercentConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanUnitWithPercentPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithPercentConfig == other.unitWithPercentConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithPercentConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanUnitWithPercentPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithPercentConfig=$unitWithPercentConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanPackageWithAllocationPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("package_with_allocation_config") @ExcludeMissing private val packageWithAllocationConfig: JsonField<PackageWithAllocationConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun packageWithAllocationConfig(): PackageWithAllocationConfig = packageWithAllocationConfig.getRequired("package_with_allocation_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("package_with_allocation_config")
            @ExcludeMissing
            fun _packageWithAllocationConfig(): JsonField<PackageWithAllocationConfig> = packageWithAllocationConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanPackageWithAllocationPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    packageWithAllocationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanPackageWithAllocationPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .packageWithAllocationConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanPackageWithAllocationPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanPackageWithAllocationPrice: NewPlanPackageWithAllocationPrice) =
                    apply {
                        cadence = newPlanPackageWithAllocationPrice.cadence
                        itemId = newPlanPackageWithAllocationPrice.itemId
                        modelType = newPlanPackageWithAllocationPrice.modelType
                        name = newPlanPackageWithAllocationPrice.name
                        packageWithAllocationConfig = newPlanPackageWithAllocationPrice.packageWithAllocationConfig
                        billableMetricId = newPlanPackageWithAllocationPrice.billableMetricId
                        billedInAdvance = newPlanPackageWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration = newPlanPackageWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newPlanPackageWithAllocationPrice.conversionRate
                        currency = newPlanPackageWithAllocationPrice.currency
                        externalPriceId = newPlanPackageWithAllocationPrice.externalPriceId
                        fixedPriceQuantity = newPlanPackageWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanPackageWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanPackageWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newPlanPackageWithAllocationPrice.metadata
                        additionalProperties = newPlanPackageWithAllocationPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun packageWithAllocationConfig(packageWithAllocationConfig: PackageWithAllocationConfig) = packageWithAllocationConfig(JsonField.of(packageWithAllocationConfig))

                fun packageWithAllocationConfig(packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>) =
                    apply {
                        this.packageWithAllocationConfig = packageWithAllocationConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanPackageWithAllocationPrice =
                    NewPlanPackageWithAllocationPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "packageWithAllocationConfig", packageWithAllocationConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val PACKAGE_WITH_ALLOCATION = of("package_with_allocation")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    PACKAGE_WITH_ALLOCATION,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    PACKAGE_WITH_ALLOCATION,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class PackageWithAllocationConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): PackageWithAllocationConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [PackageWithAllocationConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [PackageWithAllocationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(packageWithAllocationConfig: PackageWithAllocationConfig) =
                        apply {
                            additionalProperties = packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): PackageWithAllocationConfig = PackageWithAllocationConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanPackageWithAllocationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageWithAllocationConfig == other.packageWithAllocationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageWithAllocationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanPackageWithAllocationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageWithAllocationConfig=$packageWithAllocationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanTierWithProrationPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("tiered_with_proration_config") @ExcludeMissing private val tieredWithProrationConfig: JsonField<TieredWithProrationConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun tieredWithProrationConfig(): TieredWithProrationConfig = tieredWithProrationConfig.getRequired("tiered_with_proration_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("tiered_with_proration_config")
            @ExcludeMissing
            fun _tieredWithProrationConfig(): JsonField<TieredWithProrationConfig> = tieredWithProrationConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanTierWithProrationPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanTierWithProrationPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .tieredWithProrationConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanTierWithProrationPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var tieredWithProrationConfig: JsonField<TieredWithProrationConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanTierWithProrationPrice: NewPlanTierWithProrationPrice) =
                    apply {
                        cadence = newPlanTierWithProrationPrice.cadence
                        itemId = newPlanTierWithProrationPrice.itemId
                        modelType = newPlanTierWithProrationPrice.modelType
                        name = newPlanTierWithProrationPrice.name
                        tieredWithProrationConfig = newPlanTierWithProrationPrice.tieredWithProrationConfig
                        billableMetricId = newPlanTierWithProrationPrice.billableMetricId
                        billedInAdvance = newPlanTierWithProrationPrice.billedInAdvance
                        billingCycleConfiguration = newPlanTierWithProrationPrice.billingCycleConfiguration
                        conversionRate = newPlanTierWithProrationPrice.conversionRate
                        currency = newPlanTierWithProrationPrice.currency
                        externalPriceId = newPlanTierWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newPlanTierWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanTierWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanTierWithProrationPrice.invoicingCycleConfiguration
                        metadata = newPlanTierWithProrationPrice.metadata
                        additionalProperties = newPlanTierWithProrationPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun tieredWithProrationConfig(tieredWithProrationConfig: TieredWithProrationConfig) = tieredWithProrationConfig(JsonField.of(tieredWithProrationConfig))

                fun tieredWithProrationConfig(tieredWithProrationConfig: JsonField<TieredWithProrationConfig>) =
                    apply {
                        this.tieredWithProrationConfig = tieredWithProrationConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanTierWithProrationPrice =
                    NewPlanTierWithProrationPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "tieredWithProrationConfig", tieredWithProrationConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val TIERED_WITH_PRORATION = of("tiered_with_proration")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    TIERED_WITH_PRORATION,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    TIERED_WITH_PRORATION,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class TieredWithProrationConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): TieredWithProrationConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [TieredWithProrationConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [TieredWithProrationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                        apply {
                            additionalProperties = tieredWithProrationConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): TieredWithProrationConfig = TieredWithProrationConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanTierWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithProrationConfig == other.tieredWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanTierWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithProrationConfig=$tieredWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanUnitWithProrationPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("unit_with_proration_config") @ExcludeMissing private val unitWithProrationConfig: JsonField<UnitWithProrationConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun unitWithProrationConfig(): UnitWithProrationConfig = unitWithProrationConfig.getRequired("unit_with_proration_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("unit_with_proration_config")
            @ExcludeMissing
            fun _unitWithProrationConfig(): JsonField<UnitWithProrationConfig> = unitWithProrationConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanUnitWithProrationPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanUnitWithProrationPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .unitWithProrationConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanUnitWithProrationPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var unitWithProrationConfig: JsonField<UnitWithProrationConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanUnitWithProrationPrice: NewPlanUnitWithProrationPrice) =
                    apply {
                        cadence = newPlanUnitWithProrationPrice.cadence
                        itemId = newPlanUnitWithProrationPrice.itemId
                        modelType = newPlanUnitWithProrationPrice.modelType
                        name = newPlanUnitWithProrationPrice.name
                        unitWithProrationConfig = newPlanUnitWithProrationPrice.unitWithProrationConfig
                        billableMetricId = newPlanUnitWithProrationPrice.billableMetricId
                        billedInAdvance = newPlanUnitWithProrationPrice.billedInAdvance
                        billingCycleConfiguration = newPlanUnitWithProrationPrice.billingCycleConfiguration
                        conversionRate = newPlanUnitWithProrationPrice.conversionRate
                        currency = newPlanUnitWithProrationPrice.currency
                        externalPriceId = newPlanUnitWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newPlanUnitWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanUnitWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanUnitWithProrationPrice.invoicingCycleConfiguration
                        metadata = newPlanUnitWithProrationPrice.metadata
                        additionalProperties = newPlanUnitWithProrationPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) = unitWithProrationConfig(JsonField.of(unitWithProrationConfig))

                fun unitWithProrationConfig(unitWithProrationConfig: JsonField<UnitWithProrationConfig>) =
                    apply {
                        this.unitWithProrationConfig = unitWithProrationConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanUnitWithProrationPrice =
                    NewPlanUnitWithProrationPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "unitWithProrationConfig", unitWithProrationConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val UNIT_WITH_PRORATION = of("unit_with_proration")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    UNIT_WITH_PRORATION,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    UNIT_WITH_PRORATION,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class UnitWithProrationConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): UnitWithProrationConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [UnitWithProrationConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [UnitWithProrationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                        apply {
                            additionalProperties = unitWithProrationConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): UnitWithProrationConfig = UnitWithProrationConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanUnitWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithProrationConfig == other.unitWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanUnitWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithProrationConfig=$unitWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanGroupedAllocationPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("grouped_allocation_config") @ExcludeMissing private val groupedAllocationConfig: JsonField<GroupedAllocationConfig> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            fun groupedAllocationConfig(): GroupedAllocationConfig = groupedAllocationConfig.getRequired("grouped_allocation_config")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            @JsonProperty("grouped_allocation_config")
            @ExcludeMissing
            fun _groupedAllocationConfig(): JsonField<GroupedAllocationConfig> = groupedAllocationConfig

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanGroupedAllocationPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    groupedAllocationConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanGroupedAllocationPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .groupedAllocationConfig()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanGroupedAllocationPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var groupedAllocationConfig: JsonField<GroupedAllocationConfig>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanGroupedAllocationPrice: NewPlanGroupedAllocationPrice) =
                    apply {
                        cadence = newPlanGroupedAllocationPrice.cadence
                        groupedAllocationConfig = newPlanGroupedAllocationPrice.groupedAllocationConfig
                        itemId = newPlanGroupedAllocationPrice.itemId
                        modelType = newPlanGroupedAllocationPrice.modelType
                        name = newPlanGroupedAllocationPrice.name
                        billableMetricId = newPlanGroupedAllocationPrice.billableMetricId
                        billedInAdvance = newPlanGroupedAllocationPrice.billedInAdvance
                        billingCycleConfiguration = newPlanGroupedAllocationPrice.billingCycleConfiguration
                        conversionRate = newPlanGroupedAllocationPrice.conversionRate
                        currency = newPlanGroupedAllocationPrice.currency
                        externalPriceId = newPlanGroupedAllocationPrice.externalPriceId
                        fixedPriceQuantity = newPlanGroupedAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanGroupedAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanGroupedAllocationPrice.invoicingCycleConfiguration
                        metadata = newPlanGroupedAllocationPrice.metadata
                        additionalProperties = newPlanGroupedAllocationPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) = groupedAllocationConfig(JsonField.of(groupedAllocationConfig))

                fun groupedAllocationConfig(groupedAllocationConfig: JsonField<GroupedAllocationConfig>) =
                    apply {
                        this.groupedAllocationConfig = groupedAllocationConfig
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanGroupedAllocationPrice =
                    NewPlanGroupedAllocationPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "groupedAllocationConfig", groupedAllocationConfig
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class GroupedAllocationConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): GroupedAllocationConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedAllocationConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [GroupedAllocationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                        apply {
                            additionalProperties = groupedAllocationConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): GroupedAllocationConfig = GroupedAllocationConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val GROUPED_ALLOCATION = of("grouped_allocation")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    GROUPED_ALLOCATION,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    GROUPED_ALLOCATION,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanGroupedAllocationPrice && cadence == other.cadence && groupedAllocationConfig == other.groupedAllocationConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, groupedAllocationConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanGroupedAllocationPrice{cadence=$cadence, groupedAllocationConfig=$groupedAllocationConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanGroupedWithProratedMinimumPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("grouped_with_prorated_minimum_config") @ExcludeMissing private val groupedWithProratedMinimumConfig: JsonField<GroupedWithProratedMinimumConfig> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig.getRequired("grouped_with_prorated_minimum_config")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            @JsonProperty("grouped_with_prorated_minimum_config")
            @ExcludeMissing
            fun _groupedWithProratedMinimumConfig(): JsonField<GroupedWithProratedMinimumConfig> = groupedWithProratedMinimumConfig

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanGroupedWithProratedMinimumPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    groupedWithProratedMinimumConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanGroupedWithProratedMinimumPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .groupedWithProratedMinimumConfig()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanGroupedWithProratedMinimumPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var groupedWithProratedMinimumConfig: JsonField<GroupedWithProratedMinimumConfig>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanGroupedWithProratedMinimumPrice: NewPlanGroupedWithProratedMinimumPrice) =
                    apply {
                        cadence = newPlanGroupedWithProratedMinimumPrice.cadence
                        groupedWithProratedMinimumConfig = newPlanGroupedWithProratedMinimumPrice.groupedWithProratedMinimumConfig
                        itemId = newPlanGroupedWithProratedMinimumPrice.itemId
                        modelType = newPlanGroupedWithProratedMinimumPrice.modelType
                        name = newPlanGroupedWithProratedMinimumPrice.name
                        billableMetricId = newPlanGroupedWithProratedMinimumPrice.billableMetricId
                        billedInAdvance = newPlanGroupedWithProratedMinimumPrice.billedInAdvance
                        billingCycleConfiguration = newPlanGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        conversionRate = newPlanGroupedWithProratedMinimumPrice.conversionRate
                        currency = newPlanGroupedWithProratedMinimumPrice.currency
                        externalPriceId = newPlanGroupedWithProratedMinimumPrice.externalPriceId
                        fixedPriceQuantity = newPlanGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanGroupedWithProratedMinimumPrice.invoicingCycleConfiguration
                        metadata = newPlanGroupedWithProratedMinimumPrice.metadata
                        additionalProperties = newPlanGroupedWithProratedMinimumPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                fun groupedWithProratedMinimumConfig(groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig) = groupedWithProratedMinimumConfig(JsonField.of(groupedWithProratedMinimumConfig))

                fun groupedWithProratedMinimumConfig(groupedWithProratedMinimumConfig: JsonField<GroupedWithProratedMinimumConfig>) =
                    apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanGroupedWithProratedMinimumPrice =
                    NewPlanGroupedWithProratedMinimumPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "groupedWithProratedMinimumConfig", groupedWithProratedMinimumConfig
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class GroupedWithProratedMinimumConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): GroupedWithProratedMinimumConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedWithProratedMinimumConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [GroupedWithProratedMinimumConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig) =
                        apply {
                            additionalProperties = groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): GroupedWithProratedMinimumConfig = GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val GROUPED_WITH_PRORATED_MINIMUM = of("grouped_with_prorated_minimum")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    GROUPED_WITH_PRORATED_MINIMUM,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    GROUPED_WITH_PRORATED_MINIMUM,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanGroupedWithProratedMinimumPrice && cadence == other.cadence && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, groupedWithProratedMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanGroupedWithProratedMinimumPrice{cadence=$cadence, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanGroupedWithMeteredMinimumPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("grouped_with_metered_minimum_config") @ExcludeMissing private val groupedWithMeteredMinimumConfig: JsonField<GroupedWithMeteredMinimumConfig> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            fun groupedWithMeteredMinimumConfig(): GroupedWithMeteredMinimumConfig = groupedWithMeteredMinimumConfig.getRequired("grouped_with_metered_minimum_config")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            @JsonProperty("grouped_with_metered_minimum_config")
            @ExcludeMissing
            fun _groupedWithMeteredMinimumConfig(): JsonField<GroupedWithMeteredMinimumConfig> = groupedWithMeteredMinimumConfig

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanGroupedWithMeteredMinimumPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    groupedWithMeteredMinimumConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanGroupedWithMeteredMinimumPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .groupedWithMeteredMinimumConfig()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanGroupedWithMeteredMinimumPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var groupedWithMeteredMinimumConfig: JsonField<GroupedWithMeteredMinimumConfig>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanGroupedWithMeteredMinimumPrice: NewPlanGroupedWithMeteredMinimumPrice) =
                    apply {
                        cadence = newPlanGroupedWithMeteredMinimumPrice.cadence
                        groupedWithMeteredMinimumConfig = newPlanGroupedWithMeteredMinimumPrice.groupedWithMeteredMinimumConfig
                        itemId = newPlanGroupedWithMeteredMinimumPrice.itemId
                        modelType = newPlanGroupedWithMeteredMinimumPrice.modelType
                        name = newPlanGroupedWithMeteredMinimumPrice.name
                        billableMetricId = newPlanGroupedWithMeteredMinimumPrice.billableMetricId
                        billedInAdvance = newPlanGroupedWithMeteredMinimumPrice.billedInAdvance
                        billingCycleConfiguration = newPlanGroupedWithMeteredMinimumPrice.billingCycleConfiguration
                        conversionRate = newPlanGroupedWithMeteredMinimumPrice.conversionRate
                        currency = newPlanGroupedWithMeteredMinimumPrice.currency
                        externalPriceId = newPlanGroupedWithMeteredMinimumPrice.externalPriceId
                        fixedPriceQuantity = newPlanGroupedWithMeteredMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanGroupedWithMeteredMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanGroupedWithMeteredMinimumPrice.invoicingCycleConfiguration
                        metadata = newPlanGroupedWithMeteredMinimumPrice.metadata
                        additionalProperties = newPlanGroupedWithMeteredMinimumPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                fun groupedWithMeteredMinimumConfig(groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig) = groupedWithMeteredMinimumConfig(JsonField.of(groupedWithMeteredMinimumConfig))

                fun groupedWithMeteredMinimumConfig(groupedWithMeteredMinimumConfig: JsonField<GroupedWithMeteredMinimumConfig>) =
                    apply {
                        this.groupedWithMeteredMinimumConfig = groupedWithMeteredMinimumConfig
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanGroupedWithMeteredMinimumPrice =
                    NewPlanGroupedWithMeteredMinimumPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "groupedWithMeteredMinimumConfig", groupedWithMeteredMinimumConfig
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class GroupedWithMeteredMinimumConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): GroupedWithMeteredMinimumConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedWithMeteredMinimumConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [GroupedWithMeteredMinimumConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(groupedWithMeteredMinimumConfig: GroupedWithMeteredMinimumConfig) =
                        apply {
                            additionalProperties = groupedWithMeteredMinimumConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): GroupedWithMeteredMinimumConfig = GroupedWithMeteredMinimumConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is GroupedWithMeteredMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "GroupedWithMeteredMinimumConfig{additionalProperties=$additionalProperties}"
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val GROUPED_WITH_METERED_MINIMUM = of("grouped_with_metered_minimum")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    GROUPED_WITH_METERED_MINIMUM,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    GROUPED_WITH_METERED_MINIMUM,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        GROUPED_WITH_METERED_MINIMUM -> Value.GROUPED_WITH_METERED_MINIMUM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        GROUPED_WITH_METERED_MINIMUM -> Known.GROUPED_WITH_METERED_MINIMUM
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanGroupedWithMeteredMinimumPrice && cadence == other.cadence && groupedWithMeteredMinimumConfig == other.groupedWithMeteredMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, groupedWithMeteredMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanGroupedWithMeteredMinimumPrice{cadence=$cadence, groupedWithMeteredMinimumConfig=$groupedWithMeteredMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanMatrixWithDisplayNamePrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("matrix_with_display_name_config") @ExcludeMissing private val matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun matrixWithDisplayNameConfig(): MatrixWithDisplayNameConfig = matrixWithDisplayNameConfig.getRequired("matrix_with_display_name_config")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("matrix_with_display_name_config")
            @ExcludeMissing
            fun _matrixWithDisplayNameConfig(): JsonField<MatrixWithDisplayNameConfig> = matrixWithDisplayNameConfig

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanMatrixWithDisplayNamePrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    matrixWithDisplayNameConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanMatrixWithDisplayNamePrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .matrixWithDisplayNameConfig()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanMatrixWithDisplayNamePrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanMatrixWithDisplayNamePrice: NewPlanMatrixWithDisplayNamePrice) =
                    apply {
                        cadence = newPlanMatrixWithDisplayNamePrice.cadence
                        itemId = newPlanMatrixWithDisplayNamePrice.itemId
                        matrixWithDisplayNameConfig = newPlanMatrixWithDisplayNamePrice.matrixWithDisplayNameConfig
                        modelType = newPlanMatrixWithDisplayNamePrice.modelType
                        name = newPlanMatrixWithDisplayNamePrice.name
                        billableMetricId = newPlanMatrixWithDisplayNamePrice.billableMetricId
                        billedInAdvance = newPlanMatrixWithDisplayNamePrice.billedInAdvance
                        billingCycleConfiguration = newPlanMatrixWithDisplayNamePrice.billingCycleConfiguration
                        conversionRate = newPlanMatrixWithDisplayNamePrice.conversionRate
                        currency = newPlanMatrixWithDisplayNamePrice.currency
                        externalPriceId = newPlanMatrixWithDisplayNamePrice.externalPriceId
                        fixedPriceQuantity = newPlanMatrixWithDisplayNamePrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanMatrixWithDisplayNamePrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanMatrixWithDisplayNamePrice.invoicingCycleConfiguration
                        metadata = newPlanMatrixWithDisplayNamePrice.metadata
                        additionalProperties = newPlanMatrixWithDisplayNamePrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun matrixWithDisplayNameConfig(matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig) = matrixWithDisplayNameConfig(JsonField.of(matrixWithDisplayNameConfig))

                fun matrixWithDisplayNameConfig(matrixWithDisplayNameConfig: JsonField<MatrixWithDisplayNameConfig>) =
                    apply {
                        this.matrixWithDisplayNameConfig = matrixWithDisplayNameConfig
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanMatrixWithDisplayNamePrice =
                    NewPlanMatrixWithDisplayNamePrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "matrixWithDisplayNameConfig", matrixWithDisplayNameConfig
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class MatrixWithDisplayNameConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): MatrixWithDisplayNameConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [MatrixWithDisplayNameConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [MatrixWithDisplayNameConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(matrixWithDisplayNameConfig: MatrixWithDisplayNameConfig) =
                        apply {
                            additionalProperties = matrixWithDisplayNameConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): MatrixWithDisplayNameConfig = MatrixWithDisplayNameConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is MatrixWithDisplayNameConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "MatrixWithDisplayNameConfig{additionalProperties=$additionalProperties}"
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val MATRIX_WITH_DISPLAY_NAME = of("matrix_with_display_name")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    MATRIX_WITH_DISPLAY_NAME,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    MATRIX_WITH_DISPLAY_NAME,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        MATRIX_WITH_DISPLAY_NAME -> Value.MATRIX_WITH_DISPLAY_NAME
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        MATRIX_WITH_DISPLAY_NAME -> Known.MATRIX_WITH_DISPLAY_NAME
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanMatrixWithDisplayNamePrice && cadence == other.cadence && itemId == other.itemId && matrixWithDisplayNameConfig == other.matrixWithDisplayNameConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, matrixWithDisplayNameConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanMatrixWithDisplayNamePrice{cadence=$cadence, itemId=$itemId, matrixWithDisplayNameConfig=$matrixWithDisplayNameConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanBulkWithProrationPrice @JsonCreator private constructor(
            @JsonProperty("bulk_with_proration_config") @ExcludeMissing private val bulkWithProrationConfig: JsonField<BulkWithProrationConfig> = JsonMissing.of(),
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            fun bulkWithProrationConfig(): BulkWithProrationConfig = bulkWithProrationConfig.getRequired("bulk_with_proration_config")

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            @JsonProperty("bulk_with_proration_config")
            @ExcludeMissing
            fun _bulkWithProrationConfig(): JsonField<BulkWithProrationConfig> = bulkWithProrationConfig

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanBulkWithProrationPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    bulkWithProrationConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanBulkWithProrationPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .bulkWithProrationConfig()
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanBulkWithProrationPrice]. */
            class Builder internal constructor() {

                private var bulkWithProrationConfig: JsonField<BulkWithProrationConfig>? = null
                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanBulkWithProrationPrice: NewPlanBulkWithProrationPrice) =
                    apply {
                        bulkWithProrationConfig = newPlanBulkWithProrationPrice.bulkWithProrationConfig
                        cadence = newPlanBulkWithProrationPrice.cadence
                        itemId = newPlanBulkWithProrationPrice.itemId
                        modelType = newPlanBulkWithProrationPrice.modelType
                        name = newPlanBulkWithProrationPrice.name
                        billableMetricId = newPlanBulkWithProrationPrice.billableMetricId
                        billedInAdvance = newPlanBulkWithProrationPrice.billedInAdvance
                        billingCycleConfiguration = newPlanBulkWithProrationPrice.billingCycleConfiguration
                        conversionRate = newPlanBulkWithProrationPrice.conversionRate
                        currency = newPlanBulkWithProrationPrice.currency
                        externalPriceId = newPlanBulkWithProrationPrice.externalPriceId
                        fixedPriceQuantity = newPlanBulkWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanBulkWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanBulkWithProrationPrice.invoicingCycleConfiguration
                        metadata = newPlanBulkWithProrationPrice.metadata
                        additionalProperties = newPlanBulkWithProrationPrice.additionalProperties.toMutableMap()
                    }

                fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) = bulkWithProrationConfig(JsonField.of(bulkWithProrationConfig))

                fun bulkWithProrationConfig(bulkWithProrationConfig: JsonField<BulkWithProrationConfig>) =
                    apply {
                        this.bulkWithProrationConfig = bulkWithProrationConfig
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanBulkWithProrationPrice =
                    NewPlanBulkWithProrationPrice(
                      checkRequired(
                        "bulkWithProrationConfig", bulkWithProrationConfig
                      ),
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            @NoAutoDetect
            class BulkWithProrationConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BulkWithProrationConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BulkWithProrationConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BulkWithProrationConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                        apply {
                            additionalProperties = bulkWithProrationConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BulkWithProrationConfig = BulkWithProrationConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val BULK_WITH_PRORATION = of("bulk_with_proration")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    BULK_WITH_PRORATION,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    BULK_WITH_PRORATION,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanBulkWithProrationPrice && bulkWithProrationConfig == other.bulkWithProrationConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(bulkWithProrationConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanBulkWithProrationPrice{bulkWithProrationConfig=$bulkWithProrationConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanGroupedTieredPackagePrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("grouped_tiered_package_config") @ExcludeMissing private val groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            fun groupedTieredPackageConfig(): GroupedTieredPackageConfig = groupedTieredPackageConfig.getRequired("grouped_tiered_package_config")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            @JsonProperty("grouped_tiered_package_config")
            @ExcludeMissing
            fun _groupedTieredPackageConfig(): JsonField<GroupedTieredPackageConfig> = groupedTieredPackageConfig

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanGroupedTieredPackagePrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    groupedTieredPackageConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanGroupedTieredPackagePrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .groupedTieredPackageConfig()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanGroupedTieredPackagePrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanGroupedTieredPackagePrice: NewPlanGroupedTieredPackagePrice) =
                    apply {
                        cadence = newPlanGroupedTieredPackagePrice.cadence
                        groupedTieredPackageConfig = newPlanGroupedTieredPackagePrice.groupedTieredPackageConfig
                        itemId = newPlanGroupedTieredPackagePrice.itemId
                        modelType = newPlanGroupedTieredPackagePrice.modelType
                        name = newPlanGroupedTieredPackagePrice.name
                        billableMetricId = newPlanGroupedTieredPackagePrice.billableMetricId
                        billedInAdvance = newPlanGroupedTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration = newPlanGroupedTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newPlanGroupedTieredPackagePrice.conversionRate
                        currency = newPlanGroupedTieredPackagePrice.currency
                        externalPriceId = newPlanGroupedTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newPlanGroupedTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanGroupedTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanGroupedTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newPlanGroupedTieredPackagePrice.metadata
                        additionalProperties = newPlanGroupedTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                fun groupedTieredPackageConfig(groupedTieredPackageConfig: GroupedTieredPackageConfig) = groupedTieredPackageConfig(JsonField.of(groupedTieredPackageConfig))

                fun groupedTieredPackageConfig(groupedTieredPackageConfig: JsonField<GroupedTieredPackageConfig>) =
                    apply {
                        this.groupedTieredPackageConfig = groupedTieredPackageConfig
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanGroupedTieredPackagePrice =
                    NewPlanGroupedTieredPackagePrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "groupedTieredPackageConfig", groupedTieredPackageConfig
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class GroupedTieredPackageConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): GroupedTieredPackageConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [GroupedTieredPackageConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [GroupedTieredPackageConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(groupedTieredPackageConfig: GroupedTieredPackageConfig) =
                        apply {
                            additionalProperties = groupedTieredPackageConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): GroupedTieredPackageConfig = GroupedTieredPackageConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is GroupedTieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "GroupedTieredPackageConfig{additionalProperties=$additionalProperties}"
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val GROUPED_TIERED_PACKAGE = of("grouped_tiered_package")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    GROUPED_TIERED_PACKAGE,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    GROUPED_TIERED_PACKAGE,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        GROUPED_TIERED_PACKAGE -> Value.GROUPED_TIERED_PACKAGE
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        GROUPED_TIERED_PACKAGE -> Known.GROUPED_TIERED_PACKAGE
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanGroupedTieredPackagePrice && cadence == other.cadence && groupedTieredPackageConfig == other.groupedTieredPackageConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, groupedTieredPackageConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanGroupedTieredPackagePrice{cadence=$cadence, groupedTieredPackageConfig=$groupedTieredPackageConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanMaxGroupTieredPackagePrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("max_group_tiered_package_config") @ExcludeMissing private val maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun maxGroupTieredPackageConfig(): MaxGroupTieredPackageConfig = maxGroupTieredPackageConfig.getRequired("max_group_tiered_package_config")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("max_group_tiered_package_config")
            @ExcludeMissing
            fun _maxGroupTieredPackageConfig(): JsonField<MaxGroupTieredPackageConfig> = maxGroupTieredPackageConfig

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanMaxGroupTieredPackagePrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    maxGroupTieredPackageConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanMaxGroupTieredPackagePrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .maxGroupTieredPackageConfig()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanMaxGroupTieredPackagePrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanMaxGroupTieredPackagePrice: NewPlanMaxGroupTieredPackagePrice) =
                    apply {
                        cadence = newPlanMaxGroupTieredPackagePrice.cadence
                        itemId = newPlanMaxGroupTieredPackagePrice.itemId
                        maxGroupTieredPackageConfig = newPlanMaxGroupTieredPackagePrice.maxGroupTieredPackageConfig
                        modelType = newPlanMaxGroupTieredPackagePrice.modelType
                        name = newPlanMaxGroupTieredPackagePrice.name
                        billableMetricId = newPlanMaxGroupTieredPackagePrice.billableMetricId
                        billedInAdvance = newPlanMaxGroupTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration = newPlanMaxGroupTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newPlanMaxGroupTieredPackagePrice.conversionRate
                        currency = newPlanMaxGroupTieredPackagePrice.currency
                        externalPriceId = newPlanMaxGroupTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newPlanMaxGroupTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanMaxGroupTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanMaxGroupTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newPlanMaxGroupTieredPackagePrice.metadata
                        additionalProperties = newPlanMaxGroupTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun maxGroupTieredPackageConfig(maxGroupTieredPackageConfig: MaxGroupTieredPackageConfig) = maxGroupTieredPackageConfig(JsonField.of(maxGroupTieredPackageConfig))

                fun maxGroupTieredPackageConfig(maxGroupTieredPackageConfig: JsonField<MaxGroupTieredPackageConfig>) =
                    apply {
                        this.maxGroupTieredPackageConfig = maxGroupTieredPackageConfig
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanMaxGroupTieredPackagePrice =
                    NewPlanMaxGroupTieredPackagePrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "maxGroupTieredPackageConfig", maxGroupTieredPackageConfig
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class MaxGroupTieredPackageConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): MaxGroupTieredPackageConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [MaxGroupTieredPackageConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [MaxGroupTieredPackageConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(maxGroupTieredPackageConfig: MaxGroupTieredPackageConfig) =
                        apply {
                            additionalProperties = maxGroupTieredPackageConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): MaxGroupTieredPackageConfig = MaxGroupTieredPackageConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is MaxGroupTieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "MaxGroupTieredPackageConfig{additionalProperties=$additionalProperties}"
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val MAX_GROUP_TIERED_PACKAGE = of("max_group_tiered_package")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    MAX_GROUP_TIERED_PACKAGE,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    MAX_GROUP_TIERED_PACKAGE,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        MAX_GROUP_TIERED_PACKAGE -> Value.MAX_GROUP_TIERED_PACKAGE
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        MAX_GROUP_TIERED_PACKAGE -> Known.MAX_GROUP_TIERED_PACKAGE
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanMaxGroupTieredPackagePrice && cadence == other.cadence && itemId == other.itemId && maxGroupTieredPackageConfig == other.maxGroupTieredPackageConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, maxGroupTieredPackageConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanMaxGroupTieredPackagePrice{cadence=$cadence, itemId=$itemId, maxGroupTieredPackageConfig=$maxGroupTieredPackageConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanScalableMatrixWithUnitPricingPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("scalable_matrix_with_unit_pricing_config") @ExcludeMissing private val scalableMatrixWithUnitPricingConfig: JsonField<ScalableMatrixWithUnitPricingConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun scalableMatrixWithUnitPricingConfig(): ScalableMatrixWithUnitPricingConfig = scalableMatrixWithUnitPricingConfig.getRequired("scalable_matrix_with_unit_pricing_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("scalable_matrix_with_unit_pricing_config")
            @ExcludeMissing
            fun _scalableMatrixWithUnitPricingConfig(): JsonField<ScalableMatrixWithUnitPricingConfig> = scalableMatrixWithUnitPricingConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanScalableMatrixWithUnitPricingPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    scalableMatrixWithUnitPricingConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanScalableMatrixWithUnitPricingPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .scalableMatrixWithUnitPricingConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanScalableMatrixWithUnitPricingPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var scalableMatrixWithUnitPricingConfig: JsonField<ScalableMatrixWithUnitPricingConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanScalableMatrixWithUnitPricingPrice: NewPlanScalableMatrixWithUnitPricingPrice) =
                    apply {
                        cadence = newPlanScalableMatrixWithUnitPricingPrice.cadence
                        itemId = newPlanScalableMatrixWithUnitPricingPrice.itemId
                        modelType = newPlanScalableMatrixWithUnitPricingPrice.modelType
                        name = newPlanScalableMatrixWithUnitPricingPrice.name
                        scalableMatrixWithUnitPricingConfig = newPlanScalableMatrixWithUnitPricingPrice.scalableMatrixWithUnitPricingConfig
                        billableMetricId = newPlanScalableMatrixWithUnitPricingPrice.billableMetricId
                        billedInAdvance = newPlanScalableMatrixWithUnitPricingPrice.billedInAdvance
                        billingCycleConfiguration = newPlanScalableMatrixWithUnitPricingPrice.billingCycleConfiguration
                        conversionRate = newPlanScalableMatrixWithUnitPricingPrice.conversionRate
                        currency = newPlanScalableMatrixWithUnitPricingPrice.currency
                        externalPriceId = newPlanScalableMatrixWithUnitPricingPrice.externalPriceId
                        fixedPriceQuantity = newPlanScalableMatrixWithUnitPricingPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanScalableMatrixWithUnitPricingPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanScalableMatrixWithUnitPricingPrice.invoicingCycleConfiguration
                        metadata = newPlanScalableMatrixWithUnitPricingPrice.metadata
                        additionalProperties = newPlanScalableMatrixWithUnitPricingPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun scalableMatrixWithUnitPricingConfig(scalableMatrixWithUnitPricingConfig: ScalableMatrixWithUnitPricingConfig) = scalableMatrixWithUnitPricingConfig(JsonField.of(scalableMatrixWithUnitPricingConfig))

                fun scalableMatrixWithUnitPricingConfig(scalableMatrixWithUnitPricingConfig: JsonField<ScalableMatrixWithUnitPricingConfig>) =
                    apply {
                        this.scalableMatrixWithUnitPricingConfig = scalableMatrixWithUnitPricingConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanScalableMatrixWithUnitPricingPrice =
                    NewPlanScalableMatrixWithUnitPricingPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "scalableMatrixWithUnitPricingConfig", scalableMatrixWithUnitPricingConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val SCALABLE_MATRIX_WITH_UNIT_PRICING = of("scalable_matrix_with_unit_pricing")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    SCALABLE_MATRIX_WITH_UNIT_PRICING,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    SCALABLE_MATRIX_WITH_UNIT_PRICING,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        SCALABLE_MATRIX_WITH_UNIT_PRICING -> Value.SCALABLE_MATRIX_WITH_UNIT_PRICING
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        SCALABLE_MATRIX_WITH_UNIT_PRICING -> Known.SCALABLE_MATRIX_WITH_UNIT_PRICING
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class ScalableMatrixWithUnitPricingConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): ScalableMatrixWithUnitPricingConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [ScalableMatrixWithUnitPricingConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [ScalableMatrixWithUnitPricingConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(scalableMatrixWithUnitPricingConfig: ScalableMatrixWithUnitPricingConfig) =
                        apply {
                            additionalProperties = scalableMatrixWithUnitPricingConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): ScalableMatrixWithUnitPricingConfig = ScalableMatrixWithUnitPricingConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ScalableMatrixWithUnitPricingConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "ScalableMatrixWithUnitPricingConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanScalableMatrixWithUnitPricingPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && scalableMatrixWithUnitPricingConfig == other.scalableMatrixWithUnitPricingConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, scalableMatrixWithUnitPricingConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanScalableMatrixWithUnitPricingPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, scalableMatrixWithUnitPricingConfig=$scalableMatrixWithUnitPricingConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanScalableMatrixWithTieredPricingPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("scalable_matrix_with_tiered_pricing_config") @ExcludeMissing private val scalableMatrixWithTieredPricingConfig: JsonField<ScalableMatrixWithTieredPricingConfig> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            fun scalableMatrixWithTieredPricingConfig(): ScalableMatrixWithTieredPricingConfig = scalableMatrixWithTieredPricingConfig.getRequired("scalable_matrix_with_tiered_pricing_config")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            @JsonProperty("scalable_matrix_with_tiered_pricing_config")
            @ExcludeMissing
            fun _scalableMatrixWithTieredPricingConfig(): JsonField<ScalableMatrixWithTieredPricingConfig> = scalableMatrixWithTieredPricingConfig

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanScalableMatrixWithTieredPricingPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    scalableMatrixWithTieredPricingConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanScalableMatrixWithTieredPricingPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * .scalableMatrixWithTieredPricingConfig()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanScalableMatrixWithTieredPricingPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var scalableMatrixWithTieredPricingConfig: JsonField<ScalableMatrixWithTieredPricingConfig>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanScalableMatrixWithTieredPricingPrice: NewPlanScalableMatrixWithTieredPricingPrice) =
                    apply {
                        cadence = newPlanScalableMatrixWithTieredPricingPrice.cadence
                        itemId = newPlanScalableMatrixWithTieredPricingPrice.itemId
                        modelType = newPlanScalableMatrixWithTieredPricingPrice.modelType
                        name = newPlanScalableMatrixWithTieredPricingPrice.name
                        scalableMatrixWithTieredPricingConfig = newPlanScalableMatrixWithTieredPricingPrice.scalableMatrixWithTieredPricingConfig
                        billableMetricId = newPlanScalableMatrixWithTieredPricingPrice.billableMetricId
                        billedInAdvance = newPlanScalableMatrixWithTieredPricingPrice.billedInAdvance
                        billingCycleConfiguration = newPlanScalableMatrixWithTieredPricingPrice.billingCycleConfiguration
                        conversionRate = newPlanScalableMatrixWithTieredPricingPrice.conversionRate
                        currency = newPlanScalableMatrixWithTieredPricingPrice.currency
                        externalPriceId = newPlanScalableMatrixWithTieredPricingPrice.externalPriceId
                        fixedPriceQuantity = newPlanScalableMatrixWithTieredPricingPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanScalableMatrixWithTieredPricingPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanScalableMatrixWithTieredPricingPrice.invoicingCycleConfiguration
                        metadata = newPlanScalableMatrixWithTieredPricingPrice.metadata
                        additionalProperties = newPlanScalableMatrixWithTieredPricingPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                fun scalableMatrixWithTieredPricingConfig(scalableMatrixWithTieredPricingConfig: ScalableMatrixWithTieredPricingConfig) = scalableMatrixWithTieredPricingConfig(JsonField.of(scalableMatrixWithTieredPricingConfig))

                fun scalableMatrixWithTieredPricingConfig(scalableMatrixWithTieredPricingConfig: JsonField<ScalableMatrixWithTieredPricingConfig>) =
                    apply {
                        this.scalableMatrixWithTieredPricingConfig = scalableMatrixWithTieredPricingConfig
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanScalableMatrixWithTieredPricingPrice =
                    NewPlanScalableMatrixWithTieredPricingPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      checkRequired(
                        "scalableMatrixWithTieredPricingConfig", scalableMatrixWithTieredPricingConfig
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val SCALABLE_MATRIX_WITH_TIERED_PRICING = of("scalable_matrix_with_tiered_pricing")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    SCALABLE_MATRIX_WITH_TIERED_PRICING,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    SCALABLE_MATRIX_WITH_TIERED_PRICING,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        SCALABLE_MATRIX_WITH_TIERED_PRICING -> Value.SCALABLE_MATRIX_WITH_TIERED_PRICING
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        SCALABLE_MATRIX_WITH_TIERED_PRICING -> Known.SCALABLE_MATRIX_WITH_TIERED_PRICING
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class ScalableMatrixWithTieredPricingConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): ScalableMatrixWithTieredPricingConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [ScalableMatrixWithTieredPricingConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [ScalableMatrixWithTieredPricingConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(scalableMatrixWithTieredPricingConfig: ScalableMatrixWithTieredPricingConfig) =
                        apply {
                            additionalProperties = scalableMatrixWithTieredPricingConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): ScalableMatrixWithTieredPricingConfig = ScalableMatrixWithTieredPricingConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ScalableMatrixWithTieredPricingConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "ScalableMatrixWithTieredPricingConfig{additionalProperties=$additionalProperties}"
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanScalableMatrixWithTieredPricingPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && scalableMatrixWithTieredPricingConfig == other.scalableMatrixWithTieredPricingConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, scalableMatrixWithTieredPricingConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanScalableMatrixWithTieredPricingPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, scalableMatrixWithTieredPricingConfig=$scalableMatrixWithTieredPricingConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class NewPlanCumulativeGroupedBulkPrice @JsonCreator private constructor(
            @JsonProperty("cadence") @ExcludeMissing private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("cumulative_grouped_bulk_config") @ExcludeMissing private val cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig> = JsonMissing.of(),
            @JsonProperty("item_id") @ExcludeMissing private val itemId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("model_type") @ExcludeMissing private val modelType: JsonField<ModelType> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing private val name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billable_metric_id") @ExcludeMissing private val billableMetricId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("billed_in_advance") @ExcludeMissing private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("billing_cycle_configuration") @ExcludeMissing private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("conversion_rate") @ExcludeMissing private val conversionRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("currency") @ExcludeMissing private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("external_price_id") @ExcludeMissing private val externalPriceId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fixed_price_quantity") @ExcludeMissing private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("invoice_grouping_key") @ExcludeMissing private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
            @JsonProperty("invoicing_cycle_configuration") @ExcludeMissing private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of(),
            @JsonProperty("metadata") @ExcludeMissing private val metadata: JsonField<Metadata> = JsonMissing.of(),
            @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

        ) {

            /** The cadence to bill for this price on. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            fun cumulativeGroupedBulkConfig(): CumulativeGroupedBulkConfig = cumulativeGroupedBulkConfig.getRequired("cumulative_grouped_bulk_config")

            /** The id of the item the price will be associated with. */
            fun itemId(): String = itemId.getRequired("item_id")

            fun modelType(): ModelType = modelType.getRequired("model_type")

            /** The name of the price. */
            fun name(): String = name.getRequired("name")

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            fun billableMetricId(): Optional<String> = Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            fun billedInAdvance(): Optional<Boolean> = Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> = Optional.ofNullable(billingCycleConfiguration.getNullable("billing_cycle_configuration"))

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            fun conversionRate(): Optional<Double> = Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            fun currency(): Optional<String> = Optional.ofNullable(currency.getNullable("currency"))

            /** An alias for the price. */
            fun externalPriceId(): Optional<String> = Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            fun fixedPriceQuantity(): Optional<Double> = Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

            /** The property used to group this price on an invoice */
            fun invoiceGroupingKey(): Optional<String> = Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> = Optional.ofNullable(invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration"))

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            fun metadata(): Optional<Metadata> = Optional.ofNullable(metadata.getNullable("metadata"))

            /** The cadence to bill for this price on. */
            @JsonProperty("cadence")
            @ExcludeMissing
            fun _cadence(): JsonField<Cadence> = cadence

            @JsonProperty("cumulative_grouped_bulk_config")
            @ExcludeMissing
            fun _cumulativeGroupedBulkConfig(): JsonField<CumulativeGroupedBulkConfig> = cumulativeGroupedBulkConfig

            /** The id of the item the price will be associated with. */
            @JsonProperty("item_id")
            @ExcludeMissing
            fun _itemId(): JsonField<String> = itemId

            @JsonProperty("model_type")
            @ExcludeMissing
            fun _modelType(): JsonField<ModelType> = modelType

            /** The name of the price. */
            @JsonProperty("name")
            @ExcludeMissing
            fun _name(): JsonField<String> = name

            /**
             * The id of the billable metric for the price. Only needed if the price is
             * usage-based.
             */
            @JsonProperty("billable_metric_id")
            @ExcludeMissing
            fun _billableMetricId(): JsonField<String> = billableMetricId

            /**
             * If the Price represents a fixed cost, the price will be billed in-advance if
             * this is true, and in-arrears if this is false.
             */
            @JsonProperty("billed_in_advance")
            @ExcludeMissing
            fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @JsonProperty("billing_cycle_configuration")
            @ExcludeMissing
            fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> = billingCycleConfiguration

            /** The per unit conversion rate of the price currency to the invoicing currency. */
            @JsonProperty("conversion_rate")
            @ExcludeMissing
            fun _conversionRate(): JsonField<Double> = conversionRate

            /**
             * An ISO 4217 currency string, or custom pricing unit identifier, in which this
             * price is billed.
             */
            @JsonProperty("currency")
            @ExcludeMissing
            fun _currency(): JsonField<String> = currency

            /** An alias for the price. */
            @JsonProperty("external_price_id")
            @ExcludeMissing
            fun _externalPriceId(): JsonField<String> = externalPriceId

            /**
             * If the Price represents a fixed cost, this represents the quantity of units
             * applied.
             */
            @JsonProperty("fixed_price_quantity")
            @ExcludeMissing
            fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

            /** The property used to group this price on an invoice */
            @JsonProperty("invoice_grouping_key")
            @ExcludeMissing
            fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @JsonProperty("invoicing_cycle_configuration")
            @ExcludeMissing
            fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> = invoicingCycleConfiguration

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @JsonProperty("metadata")
            @ExcludeMissing
            fun _metadata(): JsonField<Metadata> = metadata

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): NewPlanCumulativeGroupedBulkPrice =
                apply {
                    if (validated) {
                      return@apply
                    }

                    cadence()
                    cumulativeGroupedBulkConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    validated = true
                }

            fun toBuilder() = Builder().from(this)

            companion object {

                /**
                 * Returns a mutable builder for constructing an instance of
                 * [NewPlanCumulativeGroupedBulkPrice].
                 *
                 * The following fields are required:
                 *
                 * ```java
                 * .cadence()
                 * .cumulativeGroupedBulkConfig()
                 * .itemId()
                 * .modelType()
                 * .name()
                 * ```
                 */
                @JvmStatic
                fun builder() = Builder()
            }

            /** A builder for [NewPlanCumulativeGroupedBulkPrice]. */
            class Builder internal constructor() {

                private var cadence: JsonField<Cadence>? = null
                private var cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig>? = null
                private var itemId: JsonField<String>? = null
                private var modelType: JsonField<ModelType>? = null
                private var name: JsonField<String>? = null
                private var billableMetricId: JsonField<String> = JsonMissing.of()
                private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> = JsonMissing.of()
                private var conversionRate: JsonField<Double> = JsonMissing.of()
                private var currency: JsonField<String> = JsonMissing.of()
                private var externalPriceId: JsonField<String> = JsonMissing.of()
                private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                private var invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> = JsonMissing.of()
                private var metadata: JsonField<Metadata> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(newPlanCumulativeGroupedBulkPrice: NewPlanCumulativeGroupedBulkPrice) =
                    apply {
                        cadence = newPlanCumulativeGroupedBulkPrice.cadence
                        cumulativeGroupedBulkConfig = newPlanCumulativeGroupedBulkPrice.cumulativeGroupedBulkConfig
                        itemId = newPlanCumulativeGroupedBulkPrice.itemId
                        modelType = newPlanCumulativeGroupedBulkPrice.modelType
                        name = newPlanCumulativeGroupedBulkPrice.name
                        billableMetricId = newPlanCumulativeGroupedBulkPrice.billableMetricId
                        billedInAdvance = newPlanCumulativeGroupedBulkPrice.billedInAdvance
                        billingCycleConfiguration = newPlanCumulativeGroupedBulkPrice.billingCycleConfiguration
                        conversionRate = newPlanCumulativeGroupedBulkPrice.conversionRate
                        currency = newPlanCumulativeGroupedBulkPrice.currency
                        externalPriceId = newPlanCumulativeGroupedBulkPrice.externalPriceId
                        fixedPriceQuantity = newPlanCumulativeGroupedBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newPlanCumulativeGroupedBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration = newPlanCumulativeGroupedBulkPrice.invoicingCycleConfiguration
                        metadata = newPlanCumulativeGroupedBulkPrice.metadata
                        additionalProperties = newPlanCumulativeGroupedBulkPrice.additionalProperties.toMutableMap()
                    }

                /** The cadence to bill for this price on. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence to bill for this price on. */
                fun cadence(cadence: JsonField<Cadence>) =
                    apply {
                        this.cadence = cadence
                    }

                fun cumulativeGroupedBulkConfig(cumulativeGroupedBulkConfig: CumulativeGroupedBulkConfig) = cumulativeGroupedBulkConfig(JsonField.of(cumulativeGroupedBulkConfig))

                fun cumulativeGroupedBulkConfig(cumulativeGroupedBulkConfig: JsonField<CumulativeGroupedBulkConfig>) =
                    apply {
                        this.cumulativeGroupedBulkConfig = cumulativeGroupedBulkConfig
                    }

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                /** The id of the item the price will be associated with. */
                fun itemId(itemId: JsonField<String>) =
                    apply {
                        this.itemId = itemId
                    }

                fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                fun modelType(modelType: JsonField<ModelType>) =
                    apply {
                        this.modelType = modelType
                    }

                /** The name of the price. */
                fun name(name: String) = name(JsonField.of(name))

                /** The name of the price. */
                fun name(name: JsonField<String>) =
                    apply {
                        this.name = name
                    }

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: String?) = billableMetricId(JsonField.ofNullable(billableMetricId))

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: Optional<String>) = billableMetricId(billableMetricId.getOrNull())

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(billableMetricId: JsonField<String>) =
                    apply {
                        this.billableMetricId = billableMetricId
                    }

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean?) = billedInAdvance(JsonField.ofNullable(billedInAdvance))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Boolean) = billedInAdvance(billedInAdvance as Boolean?)

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: Optional<Boolean>) = billedInAdvance(billedInAdvance.getOrNull())

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if
                 * this is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(billedInAdvance: JsonField<Boolean>) =
                    apply {
                        this.billedInAdvance = billedInAdvance
                    }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: BillingCycleConfiguration?) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: Optional<BillingCycleConfiguration>) = billingCycleConfiguration(billingCycleConfiguration.getOrNull())

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(billingCycleConfiguration: JsonField<BillingCycleConfiguration>) =
                    apply {
                        this.billingCycleConfiguration = billingCycleConfiguration
                    }

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double?) = conversionRate(JsonField.ofNullable(conversionRate))

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Double) = conversionRate(conversionRate as Double?)

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: Optional<Double>) = conversionRate(conversionRate.getOrNull())

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(conversionRate: JsonField<Double>) =
                    apply {
                        this.conversionRate = conversionRate
                    }

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: Optional<String>) = currency(currency.getOrNull())

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(currency: JsonField<String>) =
                    apply {
                        this.currency = currency
                    }

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: String?) = externalPriceId(JsonField.ofNullable(externalPriceId))

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: Optional<String>) = externalPriceId(externalPriceId.getOrNull())

                /** An alias for the price. */
                fun externalPriceId(externalPriceId: JsonField<String>) =
                    apply {
                        this.externalPriceId = externalPriceId
                    }

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double?) = fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Double) = fixedPriceQuantity(fixedPriceQuantity as Double?)

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) = fixedPriceQuantity(fixedPriceQuantity.getOrNull())

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) =
                    apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: String?) = invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) = invoiceGroupingKey(invoiceGroupingKey.getOrNull())

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) =
                    apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: InvoicingCycleConfiguration?) = invoicingCycleConfiguration(JsonField.ofNullable(invoicingCycleConfiguration))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>) = invoicingCycleConfiguration(invoicingCycleConfiguration.getOrNull())

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>) =
                    apply {
                        this.invoicingCycleConfiguration = invoicingCycleConfiguration
                    }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: Optional<Metadata>) = metadata(metadata.getOrNull())

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared
                 * by setting `metadata` to `null`.
                 */
                fun metadata(metadata: JsonField<Metadata>) =
                    apply {
                        this.metadata = metadata
                    }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                fun putAdditionalProperty(key: String, value: JsonValue) =
                    apply {
                        additionalProperties.put(key, value)
                    }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) =
                    apply {
                        additionalProperties.remove(key)
                    }

                fun removeAllAdditionalProperties(keys: Set<String>) =
                    apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                fun build(): NewPlanCumulativeGroupedBulkPrice =
                    NewPlanCumulativeGroupedBulkPrice(
                      checkRequired(
                        "cadence", cadence
                      ),
                      checkRequired(
                        "cumulativeGroupedBulkConfig", cumulativeGroupedBulkConfig
                      ),
                      checkRequired(
                        "itemId", itemId
                      ),
                      checkRequired(
                        "modelType", modelType
                      ),
                      checkRequired(
                        "name", name
                      ),
                      billableMetricId,
                      billedInAdvance,
                      billingCycleConfiguration,
                      conversionRate,
                      currency,
                      externalPriceId,
                      fixedPriceQuantity,
                      invoiceGroupingKey,
                      invoicingCycleConfiguration,
                      metadata,
                      additionalProperties.toImmutable(),
                    )
            }

            /** The cadence to bill for this price on. */
            class Cadence @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ANNUAL,
                    SEMI_ANNUAL,
                    MONTHLY,
                    QUARTERLY,
                    ONE_TIME,
                    CUSTOM,
                    /** An enum member indicating that [Cadence] was instantiated with an unknown value. */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ANNUAL -> Value.ANNUAL
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        ONE_TIME -> Value.ONE_TIME
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        ANNUAL -> Known.ANNUAL
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        ONE_TIME -> Known.ONE_TIME
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            @NoAutoDetect
            class CumulativeGroupedBulkConfig @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): CumulativeGroupedBulkConfig =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [CumulativeGroupedBulkConfig].
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [CumulativeGroupedBulkConfig]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(cumulativeGroupedBulkConfig: CumulativeGroupedBulkConfig) =
                        apply {
                            additionalProperties = cumulativeGroupedBulkConfig.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): CumulativeGroupedBulkConfig = CumulativeGroupedBulkConfig(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is CumulativeGroupedBulkConfig && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "CumulativeGroupedBulkConfig{additionalProperties=$additionalProperties}"
            }

            class ModelType @JsonCreator private constructor(
                private val value: JsonField<String>,

            ) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue
                fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val CUMULATIVE_GROUPED_BULK = of("cumulative_grouped_bulk")

                    @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                }

                /** An enum containing [ModelType]'s known values. */
                enum class Known {
                    CUMULATIVE_GROUPED_BULK,
                }

                /**
                 * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [ModelType] can contain an unknown value in a couple of cases:
                 *
                 * - It was deserialized from data that doesn't match any known member. For
                 *   example, if the SDK is on an older version than the API, then the API may
                 *   respond with new members that the SDK is unaware of.
                 *
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    CUMULATIVE_GROUPED_BULK,
                    /**
                     * An enum member indicating that [ModelType] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        CUMULATIVE_GROUPED_BULK -> Value.CUMULATIVE_GROUPED_BULK
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 * member.
                 */
                fun known(): Known =
                    when (this) {
                        CUMULATIVE_GROUPED_BULK -> Known.CUMULATIVE_GROUPED_BULK
                        else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                    }

                /**
                 * Returns this class instance's primitive wire representation.
                 *
                 * This differs from the [toString] method because that method is primarily for
                 * debugging and generally doesn't throw.
                 *
                 * @throws OrbInvalidDataException if this class instance's value does not have the
                 * expected primitive type.
                 */
                fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            /**
             * For custom cadence: specifies the duration of the billing period in days or
             * months.
             */
            @NoAutoDetect
            class BillingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): BillingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [BillingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [BillingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                        apply {
                            duration = billingCycleConfiguration.duration
                            durationUnit = billingCycleConfiguration.durationUnit
                            additionalProperties = billingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): BillingCycleConfiguration =
                        BillingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * Within each billing cycle, specifies the cadence at which invoices are produced.
             * If unspecified, a single invoice is produced per billing cycle.
             */
            @NoAutoDetect
            class InvoicingCycleConfiguration @JsonCreator private constructor(
                @JsonProperty("duration") @ExcludeMissing private val duration: JsonField<Long> = JsonMissing.of(),
                @JsonProperty("duration_unit") @ExcludeMissing private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                /** The duration of the billing period. */
                fun duration(): Long = duration.getRequired("duration")

                /** The unit of billing period duration. */
                fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                /** The duration of the billing period. */
                @JsonProperty("duration")
                @ExcludeMissing
                fun _duration(): JsonField<Long> = duration

                /** The unit of billing period duration. */
                @JsonProperty("duration_unit")
                @ExcludeMissing
                fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): InvoicingCycleConfiguration =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /**
                     * Returns a mutable builder for constructing an instance of
                     * [InvoicingCycleConfiguration].
                     *
                     * The following fields are required:
                     *
                     * ```java
                     * .duration()
                     * .durationUnit()
                     * ```
                     */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [InvoicingCycleConfiguration]. */
                class Builder internal constructor() {

                    private var duration: JsonField<Long>? = null
                    private var durationUnit: JsonField<DurationUnit>? = null
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(invoicingCycleConfiguration: InvoicingCycleConfiguration) =
                        apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties = invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                    /** The duration of the billing period. */
                    fun duration(duration: Long) = duration(JsonField.of(duration))

                    /** The duration of the billing period. */
                    fun duration(duration: JsonField<Long>) =
                        apply {
                            this.duration = duration
                        }

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: DurationUnit) = durationUnit(JsonField.of(durationUnit))

                    /** The unit of billing period duration. */
                    fun durationUnit(durationUnit: JsonField<DurationUnit>) =
                        apply {
                            this.durationUnit = durationUnit
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): InvoicingCycleConfiguration =
                        InvoicingCycleConfiguration(
                          checkRequired(
                            "duration", duration
                          ),
                          checkRequired(
                            "durationUnit", durationUnit
                          ),
                          additionalProperties.toImmutable(),
                        )
                }

                /** The unit of billing period duration. */
                class DurationUnit @JsonCreator private constructor(
                    private val value: JsonField<String>,

                ) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example, if
                     * the SDK is on an older version than the API, then the API may respond with new
                     * members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val DAY = of("day")

                        @JvmField val MONTH = of("month")

                        @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                    }

                    /** An enum containing [DurationUnit]'s known values. */
                    enum class Known {
                        DAY,
                        MONTH,
                    }

                    /**
                     * An enum containing [DurationUnit]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [DurationUnit] can contain an unknown value in a couple of cases:
                     *
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     *
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        DAY,
                        MONTH,
                        /**
                         * An enum member indicating that [DurationUnit] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or if
                     * you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            DAY -> Value.DAY
                            MONTH -> Value.MONTH
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known and
                     * don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a known
                     * member.
                     */
                    fun known(): Known =
                        when (this) {
                            DAY -> Known.DAY
                            MONTH -> Known.MONTH
                            else -> throw OrbInvalidDataException("Unknown DurationUnit: $value")
                        }

                    /**
                     * Returns this class instance's primitive wire representation.
                     *
                     * This differs from the [toString] method because that method is primarily for
                     * debugging and generally doesn't throw.
                     *
                     * @throws OrbInvalidDataException if this class instance's value does not have the
                     * expected primitive type.
                     */
                    fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

                    override fun equals(other: Any?): Boolean {
                      if (this === other) {
                          return true
                      }

                      return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
            }

            /**
             * User-specified key/value pairs for the resource. Individual keys can be removed
             * by setting the value to `null`, and the entire metadata mapping can be cleared
             * by setting `metadata` to `null`.
             */
            @NoAutoDetect
            class Metadata @JsonCreator private constructor(
                @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

            ) {

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): Metadata =
                    apply {
                        if (validated) {
                          return@apply
                        }

                        validated = true
                    }

                fun toBuilder() = Builder().from(this)

                companion object {

                    /** Returns a mutable builder for constructing an instance of [Metadata]. */
                    @JvmStatic
                    fun builder() = Builder()
                }

                /** A builder for [Metadata]. */
                class Builder internal constructor() {

                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(metadata: Metadata) =
                        apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.clear()
                            putAllAdditionalProperties(additionalProperties)
                        }

                    fun putAdditionalProperty(key: String, value: JsonValue) =
                        apply {
                            additionalProperties.put(key, value)
                        }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) =
                        apply {
                            additionalProperties.remove(key)
                        }

                    fun removeAllAdditionalProperties(keys: Set<String>) =
                        apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                    fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                }

                override fun equals(other: Any?): Boolean {
                  if (this === other) {
                      return true
                  }

                  return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
              if (this === other) {
                  return true
              }

              return /* spotless:off */ other is NewPlanCumulativeGroupedBulkPrice && cadence == other.cadence && cumulativeGroupedBulkConfig == other.cumulativeGroupedBulkConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(cadence, cumulativeGroupedBulkConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() = "NewPlanCumulativeGroupedBulkPrice{cadence=$cadence, cumulativeGroupedBulkConfig=$cumulativeGroupedBulkConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, additionalProperties=$additionalProperties}"
        }
    }

    /**
     * User-specified key/value pairs for the resource. Individual keys can be removed
     * by setting the value to `null`, and the entire metadata mapping can be cleared
     * by setting `metadata` to `null`.
     */
    @NoAutoDetect
    class Metadata @JsonCreator private constructor(
        @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),

    ) {

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Metadata =
            apply {
                if (validated) {
                  return@apply
                }

                validated = true
            }

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [Metadata]. */
            @JvmStatic
            fun builder() = Builder()
        }

        /** A builder for [Metadata]. */
        class Builder internal constructor() {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(metadata: Metadata) =
                apply {
                    additionalProperties = metadata.additionalProperties.toMutableMap()
                }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

            fun putAdditionalProperty(key: String, value: JsonValue) =
                apply {
                    additionalProperties.put(key, value)
                }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                apply {
                    this.additionalProperties.putAll(additionalProperties)
                }

            fun removeAdditionalProperty(key: String) =
                apply {
                    additionalProperties.remove(key)
                }

            fun removeAllAdditionalProperties(keys: Set<String>) =
                apply {
                    keys.forEach(::removeAdditionalProperty)
                }

            fun build(): Metadata = Metadata(additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
          if (this === other) {
              return true
          }

          return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
    }

    /**
     * The status of the plan to create (either active or draft). If not specified,
     * this defaults to active.
     */
    class Status @JsonCreator private constructor(
        private val value: JsonField<String>,

    ) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that
         * doesn't match any known member, and you want to know that value. For example, if
         * the SDK is on an older version than the API, then the API may respond with new
         * members that the SDK is unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue
        fun _value(): JsonField<String> = value

        companion object {

            @JvmField val ACTIVE = of("active")

            @JvmField val DRAFT = of("draft")

            @JvmStatic fun of(value: String) = Status(JsonField.of(value))
        }

        /** An enum containing [Status]'s known values. */
        enum class Known {
            ACTIVE,
            DRAFT,
        }

        /**
         * An enum containing [Status]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [Status] can contain an unknown value in a couple of cases:
         *
         * - It was deserialized from data that doesn't match any known member. For
         *   example, if the SDK is on an older version than the API, then the API may
         *   respond with new members that the SDK is unaware of.
         *
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            ACTIVE,
            DRAFT,
            /** An enum member indicating that [Status] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or
         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if
         * you want to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                ACTIVE -> Value.ACTIVE
                DRAFT -> Value.DRAFT
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and
         * don't want to throw for the unknown case.
         *
         * @throws OrbInvalidDataException if this class instance's value is a not a known
         * member.
         */
        fun known(): Known =
            when (this) {
                ACTIVE -> Known.ACTIVE
                DRAFT -> Known.DRAFT
                else -> throw OrbInvalidDataException("Unknown Status: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for
         * debugging and generally doesn't throw.
         *
         * @throws OrbInvalidDataException if this class instance's value does not have the
         * expected primitive type.
         */
        fun asString(): String = _value().asString().orElseThrow { OrbInvalidDataException("Value is not a String") }

        override fun equals(other: Any?): Boolean {
          if (this === other) {
              return true
          }

          return /* spotless:off */ other is Status && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
      if (this === other) {
          return true
      }

      return /* spotless:off */ other is PlanCreateParams && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() = "PlanCreateParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
